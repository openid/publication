<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.29 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY OASIS.saml-core-2.0-os SYSTEM "https://bib.ietf.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml">
<!ENTITY RFC2119 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC7159 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7517 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml">
<!ENTITY RFC7519 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml">
<!ENTITY RFC8174 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8417 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8417.xml">
<!ENTITY RFC8615 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8615.xml">
<!ENTITY RFC8935 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8935.xml">
<!ENTITY RFC8936 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8936.xml">
<!ENTITY RFC9110 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9110.xml">
<!ENTITY RFC9493 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9493.xml">
<!ENTITY RFC4001 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4001.xml">
<!ENTITY RFC3986 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
]>

<?rfc private="yes"?>

<rfc ipr="none" docName="openid-sharedsignals-framework-1_0" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SharedSignals">OpenID Shared Signals Framework Specification 1.0</title>

    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization>SGNL</organization>
      <address>
        <email>atul@sgnl.ai</email>
      </address>
    </author>
    <author initials="T." surname="Cappalli" fullname="Tim Cappalli">
      <organization>Microsoft</organization>
      <address>
        <email>tim.cappalli@microsoft.com</email>
      </address>
    </author>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Coinbase</organization>
      <address>
        <email>marius.scurtescu@coinbase.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
      <address>
        <email>secevemt@ve7jtb.com</email>
      </address>
    </author>
    <author initials="S." surname="Miel" fullname="Shayne Miel">
      <organization>Cisco</organization>
      <address>
        <email>smiel@cisco.com</email>
      </address>
    </author>

    <date year="2025" month="June" day="03"/>

    
    <workgroup>Shared Signals</workgroup>
    

    <abstract>


<?line 156?>

<t>This Shared Signals Framework (SSF) enables sharing of signals and events
between cooperating peers. It enables multiple applications such as Risk
Incident Sharing and Coordination (RISC) and the Continuous Access Evaluation
Profile (<xref target="CAEP"/>)</t>

<t>This specification defines:</t>

<t><list style="symbols">
  <t>A profile for Security Events Tokens <xref target="RFC8417"/></t>
  <t>Subject principals</t>
  <t>Subject claims in SSF events</t>
  <t>Event types</t>
  <t>Events</t>
  <t>Transmitter Configuration Metadata and its discovery method for Receivers</t>
  <t>A management API for Event Streams</t>
</list></t>

<t>This specification also directly profiles several IETF Security Events
specifications:</t>

<t><list style="symbols">
  <t>Security Event Token (SET) <xref target="RFC8417"/></t>
  <t>Subject Identifiers for Security Event Tokens <xref target="RFC9493"/></t>
  <t>Push-Based SET Token Delivery Using HTTP <xref target="RFC8935"/></t>
  <t>Poll-Based SET Token Delivery Using HTTP <xref target="RFC8936"/></t>
</list></t>



    </abstract>



  </front>

  <middle>


<?line 181?>

<section anchor="introduction"><name>Introduction</name>

<section anchor="notational-conventions"><name>Notational Conventions</name>

<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="subject-principals"><name>Subject Principals</name>

<t>This Shared Signals Framework specification defines a Subject Principal to be
the entities about which an event can be sent by Transmitters and received by
Receivers using the Shared Signals Framework.</t>

<t>Subject Principals are the managed entities in an SSF Transmitter or Receiver.
These include human or robotic principals, devices, customer tenants in a
multi-tenanted service, organizational units within a tenant, groups of subject
principals, or other entities that are managed by Transmitters and Receivers.
There may be other actors or resources that can be treated as Subject
Principals, and event-type definitions SHOULD specify the range of principals
addressed by the event.</t>

<t>Subject Principals are identified by Subject Members defined below.</t>

</section>
<section anchor="subject-ids"><name>Subject Members in SSF Events</name>

<section anchor="subject-members"><name>Subject Members</name>

<t>A Subject Member of an SSF event describes a subject of the event. A top-level
claimnamed <spanx style="verb">sub_id</spanx> MUST be used to describe the primary subject of the event.</t>

<section anchor="existing-caep-and-risc-events"><name>Existing CAEP and RISC Events</name>

<t>Event types already defined in the CAEP (<xref target="CAEP"/>) and RISC (<xref target="RISC"/>)
specifications MAY use a <spanx style="verb">subject</spanx> field within the <spanx style="verb">events</spanx> claim of the SSF
event to describe the primary Subject Principal of the event. SSF Transmitters
MUST include the top-level <spanx style="verb">sub_id</spanx> claim even for these existing event types.</t>

</section>
<section anchor="new-event-types"><name>New Event Types</name>

<t>New event types MUST use the top-level <spanx style="verb">sub_id</spanx> claim and MUST NOT use the
<spanx style="verb">subject</spanx> field in the <spanx style="verb">events</spanx> claim to describe the primary Subject Principal.</t>

</section>
<section anchor="additional-subject-members"><name>Additional Subject Members</name>

<t>Specific event types MAY define additional Subject Members if required to
describe additional subjects of that event type (e.g. a Transferee). These
additional subject fields MAY have any field name.</t>

</section>
<section anchor="subject-member-values"><name>Subject Member Values</name>

<t>Each Subject Member MUST refer to exactly one Subject Principal. The value of a
Subject Member MAY be a &quot;simple subject&quot; or a &quot;complex subject&quot;.</t>

</section>
</section>
<section anchor="simple-subjects"><name>Simple Subject Members</name>

<t>A Simple Subject Member has a claim name and a value that is a &quot;Subject
Identifier&quot; as defined in the Subject Identifiers for Security Event Tokens
<xref target="RFC9493"/>. Below is a non-normative example of a Simple Subject Member in an
SSF event.</t>

<figure title="Example: Simple Subject" anchor="simple-subject-ex"><sourcecode type="json"><![CDATA[
"sub_id": {
  "format": "email",
  "email": "foo@example.com"
}
]]></sourcecode></figure>

</section>
<section anchor="complex-subjects"><name>Complex Subject Members</name>

<t>A Complex Subject Member has a name and a value that is a JSON <xref target="RFC7159"/>
object that has a format field, and one or more Simple Subject Members. The name
of the format field is &quot;format&quot;, and its value is &quot;complex&quot;. The name of each
Simple Subject Member in this value MAY be one of the following:</t>

<t>user</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies a user.</t>
</li></ul>

<t>device</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies a device.</t>
</li></ul>

<t>session</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies a session.</t>
</li></ul>

<t>application</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies an application.</t>
</li></ul>

<t>tenant</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies a tenant.</t>
</li></ul>

<t>org_unit</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies an organizational unit.</t>
</li></ul>

<t>group</t>

<ul empty="true"><li>
  <t>OPTIONAL. A Subject Identifier that identifies a group.</t>
</li></ul>

<t>Additional Subject Member names MAY be used in Complex Subjects. Each member
name MAY appear at most once in the Complex Subject value.</t>

<t>Below is a non-normative example of a Complex Subject claim in an SSF event.</t>

<figure title="Example: Complex Subject" anchor="complex-subject-ex"><sourcecode type="json"><![CDATA[
"sub_id": {
  "format": "complex",
  "user" : {
    "format": "email",
    "email": "bar@example.com"
  },
  "tenant" : {
    "format": "iss_sub",
    "iss" : "https://example.com/idp1",
    "sub" : "1234"
  }
}
]]></sourcecode></figure>

<section anchor="complex-subject-interpretation"><name>Complex Subject Interpretation</name>

<t>All members within a Complex Subject MUST represent attributes of the same
Subject Principal. As a whole, the Complex Subject MUST refer to exactly one
Subject Principal.</t>

<t>For details about how to interpret unspecified claims in a Complex Subject as
wildcards, please see the section on Subject Matching (<xref target="subject-matching"/>).</t>

</section>
</section>
<section anchor="subject-ids-in-ssf"><name>Subject Identifiers in SSF Events</name>

<t>A Subject Identifier in an SSF event MUST have an identifier format that is any
one of:</t>

<t><list style="symbols">
  <t>Defined in the IANA Registry defined in Subject Identifiers for Security
Event Tokens <xref target="RFC9493"/></t>
  <t>An identifier format defined in the Additional Subject Identifier Formats
(<xref target="additional-subject-id-formats"/>) section below, OR</t>
  <t>A proprietary subject identifier format that is agreed to between parties.
Members within a subject identifier that has a proprietary subject identifier
format are agreed to between the parties and such agreement is outside the
scope of this specification.</t>
</list></t>

</section>
<section anchor="additional-subject-id-formats"><name>Additional Subject Identifier Formats</name>

<t>The following new subject identifier formats are defined:</t>

<section anchor="sub-id-jwt-id"><name>JWT ID Subject Identifier Format</name>

<t>The &quot;JWT ID&quot; Subject Identifier Format specifies a JSON Web Token (JWT)
identifier, defined in <xref target="RFC7519"/>. Subject Identifiers of this type MUST
contain the following members:</t>

<t>iss</t>

<ul empty="true"><li>
  <t>REQUIRED. The &quot;iss&quot; (issuer) claim of the JWT being identified, defined in
  <xref target="RFC7519"/></t>
</li></ul>

<t>jti</t>

<ul empty="true"><li>
  <t>REQUIRED. The &quot;jti&quot; (JWT token ID) claim of the JWT being identified, defined
  in <xref target="RFC7519"/></t>
</li></ul>

<t>The &quot;JWT ID&quot; Subject Identifier Format is identified by the name &quot;jwt_id&quot;.</t>

<t>Below is a non-normative example of Subject Identifier for the &quot;jwt_id&quot; Subject
Identifier Format.</t>

<figure title="Example: 'jwt_id' Subject Identifier" anchor="sub-id-jwtid"><sourcecode type="json"><![CDATA[
{
    "format": "jwt_id",
    "iss": "https://idp.example.com/123456789/",
    "jti": "B70BA622-9515-4353-A866-823539EECBC8"
}
]]></sourcecode></figure>

</section>
<section anchor="sub-id-saml-assertion-id"><name>SAML Assertion ID Subject Identifier Format</name>

<t>The &quot;SAML Assertion ID&quot; Subject Identifier Format specifies a SAML 2.0
<xref target="OASIS.saml-core-2.0-os"/> assertion identifier. Subject Identifiers of this
format MUST contain the following members:</t>

<t>issuer</t>

<ul empty="true"><li>
  <t>REQUIRED. The &quot;Issuer&quot; value of the SAML assertion being identified, defined
  in <xref target="OASIS.saml-core-2.0-os"/></t>
</li></ul>

<t>assertion_id</t>

<ul empty="true"><li>
  <t>REQUIRED. The &quot;ID&quot; value of the SAML assertion being identified, defined in
  <xref target="OASIS.saml-core-2.0-os"/></t>
</li></ul>

<t>The &quot;SAML Assertion ID&quot; Subject Identifier Format is identified by the name
&quot;saml_assertion_id&quot;.</t>

<t>Below is a non-normative example of Subject Identifier for the
&quot;saml_assertion_id&quot; Subject Identifier Format.</t>

<figure title="Example: 'saml_assertion_id' Subject
Identifier" anchor="sub-id-samlassertionid"><sourcecode type="json"><![CDATA[
{
    "format": "saml_assertion_id",
    "issuer": "https://idp.example.com/123456789/",
    "assertion_id": "_8e8dc5f69a98cc4c1ff3427e5ce34606fd672f91e6"
}

]]></sourcecode></figure>

</section>
<section anchor="sub-id-ips"><name>IP Addresses Subject Identifier Format</name>

<t>The &quot;IP addresses&quot; Subject Identifier Format specifies an array of IP addresses
observed by the Transmitter. Subject Identifiers of this format MUST contain the
following members:</t>

<t>ip-addresses</t>

<ul empty="true"><li>
  <t>REQUIRED. The array of IP addresses of the subject as observed by the
Transmitter. The value MUST be in the format of an array of strings, each one of
which represents the <xref target="RFC4001"/> string representation of an IP address.</t>
</li></ul>

<t>The &quot;IP addresses&quot; Subject Identifier Format is identified by the name
&quot;ip-addresses&quot;.</t>

<t>Below is a non-normative example of Subject Identifier for the &quot;IP addresses&quot;
Subject Identifier Format.</t>

<figure title="Example: 'ip-addresses' Subject Identifier" anchor="sub-id-ips-example"><sourcecode type="json"><![CDATA[
{
    "format": "ip-addresses",
    "ip-addresses": ["10.29.37.75", "2001:0db8:0000:0000:0000:8a2e:0370:7334"]
}

]]></sourcecode></figure>

</section>
</section>
<section anchor="receiver-subject-processing"><name>Receiver Subject Processing</name>

<t>A SSF Receiver MUST make a best effort to process all members from a Subject in
an SSF event. The Transmitter Configuration Metadata (<xref target="discovery-meta"/>)
defined below MAY define certain members within a Complex Subject to be
Critical. A SSF Receiver MUST discard any event that contains a Subject with a
Critical member that it is unable to process.</t>

</section>
</section>
<section anchor="events"><name>Events</name>

<section anchor="set-profle"><name>Security Event Token Profile</name>

<t>The Shared Signals Framework profiles the Security Event Token (SET)
<xref target="RFC8417"/> specification by defining certain properties of SETs as described in
this section.</t>

<section anchor="explicit-typing"><name>Explicit Typing of SETs</name>

<t>SSF events MUST use explicit typing as defined in Section 2.3 of <xref target="RFC8417"/>.</t>

<figure title="Explicitly Typed JOSE Header" anchor="explicit-type-header"><sourcecode type="json"><![CDATA[
{
  "typ":"secevent+jwt",
  "alg":"HS256"
}
]]></sourcecode></figure>

<t>The purpose is defense against confusion with other JWTs, as described in
Sections 4.5, 4.6 and 4.7 of <xref target="RFC8417"/>. While current Id Token <xref target="OpenID.Core"/>
validators may not be using the &quot;typ&quot; header parameter, requiring it for SSF
SETs guarantees a distinct value for future validators.</t>

</section>
<section anchor="event-subjects"><name>SSF Event Subject</name>

<t>The primary Subject Member of SSF events is described in the &quot;Subject Members&quot;
section (<xref target="subject-ids"/>). The JWT &quot;sub&quot; claim MUST NOT be present in any SET
containing an SSF event.</t>

</section>
<section anchor="distinguishing-sets-from-other-kinds-of-jwts"><name>Distinguishing SETs from other Kinds of JWTs</name>

<t>Of particular concern is the possibility that SETs are confused for other kinds
of JWTs. Section 4 of <xref target="RFC8417"/> has several sub-sections
on this subject. The Shared Signals Framework requires further restrictions:</t>

<t><list style="symbols">
  <t>The &quot;sub&quot; claim MUST NOT be present, as described in <xref target="event-subjects"/>.</t>
  <t>SSF SETs MUST use explicit typing, as described in <xref target="explicit-typing"/>.</t>
  <t>The &quot;exp&quot; claim MUST NOT be present, as described in <xref target="exp-claim"/>.</t>
</list></t>

</section>
<section anchor="signature-key-resolution"><name>Signature Key Resolution</name>

<t>The signature key can be obtained through &quot;jwks_uri&quot;, see <xref target="discovery"/>.</t>

</section>
<section anchor="prescriptive-sets"><name>SSF Prescriptive SETs</name>

<t>The Shared Signals Framework allows each deployment or integration to define its
own event processing behaviors, ranging from informational input to additional
processing needed, to mandatory enforcement.</t>

</section>
<section anchor="iss-claim"><name>The &quot;iss&quot; Claim</name>

<t>The &quot;iss&quot; claim MUST match the &quot;iss&quot; value in the Stream Configuration data for
the stream that the event is sent on. Receivers MUST validate that this claim
matches the &quot;iss&quot; in the Stream Configuration data, as well as the Issuer from
which the Receiver requested the Transmitter Configuration data.</t>

</section>
<section anchor="exp-claim"><name>The &quot;exp&quot; Claim</name>

<t>The &quot;exp&quot; claim MUST NOT be used in SETs.</t>

<t>The purpose is defense in depth against confusion with other JWTs, as described
in Sections 4.5 and 4.6 of <xref target="RFC8417"/>.</t>

</section>
<section anchor="aud-claim"><name>The &quot;aud&quot; Claim</name>

<t>The &quot;aud&quot; claim can be a single string or an array of strings. Values that
uniquely identify the Receiver to the Transmitter MAY be used, if the two
parties have agreement on the format.</t>

<t>More than one value can be present if the corresponding Receivers are known to
the Transmitter to be the same entity, for example a web client and a mobile
client of the same application. All the Receivers in this case MUST use the
exact same delivery method.</t>

<t>If multiple Receivers have the exact same delivery configuration but the
Transmitter does not know if they belong to the same entity then the Transmitter
SHOULD issue distinct SETs for each Receiver and deliver them separately. In
this case the multiple Receivers might use the same service to process SETs, and
this service might reroute SETs to respective Receivers, an &quot;aud&quot; claim with
multiple Receivers would lead to unintended data disclosure.</t>

<figure title="Example: SET with array 'aud' claim" anchor="figarrayaud"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": ["receiver.example.com/web", "receiver.example.com/mobile"],
  "iat": 1493856000,
  "txn": 8675309,
  "sub_id": {
    "format": "opaque",
    "id": "72e6991badb44e08a69672960053b342"
  },
  "events": {
    "https://schemas.openid.net/secevent/ssf/event-type/verification": {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="txn-claim"><name>The &quot;txn&quot; claim</name>

<t>Transmitters SHOULD set the &quot;txn&quot; claim value in Security Event Tokens (SETs).
If the value is present, it MUST be unique to the underlying event that caused
the Transmitter to generate the Security Event Token (SET). The Transmitter,
however, may use the same value in the &quot;txn&quot; claim across different Security
Events Tokens (SETs), such as session revoked and credential change, to indicate
that the SETs originated from the same underlying cause or reason.</t>

</section>
</section>
<section anchor="event-properties"><name>Event Properties</name>

<section anchor="events-claim"><name>The &quot;events&quot; claim</name>

<t>The &quot;events&quot; claim SHOULD contain only one event. Multiple event type URIs are
permitted only if they are alternative URIs defining the exact same event type.
The type of the event is specified by the key in the value of the <spanx style="verb">events</spanx>
claim. The value of this field is the event object.</t>

</section>
<section anchor="event-type-specific-fields"><name>Event type specific fields</name>

<t>The event object inside the <spanx style="verb">events</spanx> claim MAY have one or more fields that are
uniquely determined by the type of the event.</t>

</section>
<section anchor="additional-fields"><name>Additional fields</name>

<t>Transmitters MAY include additional fields in SSF events. These fields MAY exist
anywhere in the SET, including the event object inside the &quot;events&quot; claim.
Receivers MUST ignore any fields they do not understand from the SSF events they
receive.</t>

</section>
</section>
</section>
<section anchor="events-examples"><name>Example SETs that conform to the Shared Signals Framework</name>

<t>The following are hypothetical examples of SETs that conform to the Shared
Signals Framework.</t>

<figure title="Example: SET Containing an SSF Event with a
Simple Subject Member" anchor="subject-ids-ex-simple"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "txn": 8675309,
  "aud": "636C69656E745F6964",
  "sub_id": {
    "format": "email",
    "email": "foo@example.com"
  },
  "events": {
    "https://schemas.openid.net/secevent/risc/event-type/account-enabled": {}
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a RISC Event with
a Phone Number Subject" anchor="risc-event-subject-example"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "txn": 8675309,
  "aud": "636C69656E745F6964",
  "sub_id": {
    "format": "phone_number",
    "phone_number": "+1 206 555 0123"
  },
  "events": {
    "https://schemas.openid.net/secevent/risc/event-type/account-disabled": {
      "reason": "hijacking"
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing a CAEP Event
with Properties" anchor="caep-event-properties-example"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "txn": 8675309,
  "aud": "636C69656E745F6964",
  "sub_id": {
    "format": "email",
    "email": "user@example.com"
  },
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
      "claims": {
        "token": "some-token-value"
      }
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing an SSF Event with a
Complex Subject Member" anchor="subject-ids-ex-complex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://idp.example.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "txn": 8675309,
  "aud": "636C69656E745F6964",
  "sub_id": {
    "format": "complex",
    "user": {
      "format": "iss_sub",
      "iss": "https://idp.example.com/3957ea72-1b66-44d6-a044-d805712b9288/",
      "sub": "jane.smith@example.com"
    },
    "device": {
      "format": "iss_sub",
      "iss": "https://idp.example.com/3957ea72-1b66-44d6-a044-d805712b9288/",
      "sub": "e9297990-14d2-42ec-a4a9-4036db86509a"
    }
  },
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/session-revoked": {
      "initiating_entity": "policy",
      "reason_admin": {
        "en": "Policy Violation: C076E82F"
      },
      "reason_user": {
        "en": "Land speed violation.",
        "es": "Violacion de velocidad en tierra."
      },
      "event_timestamp": 1600975810
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing an SSF Event with a
Simple Subject and a Property Member" anchor="subject-properties-ex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://sp.example2.com/",
  "jti": "756E69717565206964656E746966696572",
  "iat": 1520364019,
  "txn": 8675309,
  "aud": "636C69656E745F6964",
  "sub_id": {
    "format": "email",
    "email": "foo@example2.com"
  },
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
      "event_timestamp": 1600975810,
      "claims": {
         "role": "ro-admin"
      }
    }
  }
}
]]></sourcecode></figure>

<figure title="Example: SET Containing an SSF Event with a
Proprietary Subject Identifier Format" anchor="subject-custom-type-ex"><sourcecode type="json"><![CDATA[
{
  "iss": "https://myservice.example3.com/",
  "jti": "756E69717565206964656E746966696534",
  "iat": 15203800012,
  "txn": 8675309,
  "aud": "636C69656E745F6324",
  "sub_id": {
    "format": "catalog_item",
    "catalog_id": "c0384/winter/2354122"
  },
  "events": {
    "https://schemas.openid.net/secevent/caep/event-type/token-claims-change": {
      "event_timestamp": 1600975810,
      "claims": {
         "role": "ro-admin"
      }
    }
  }
}
]]></sourcecode></figure>

</section>
<section anchor="event-delivery"><name>Event Delivery</name>

<t>This section describes the supported methods of delivering SSF Events. It
provides SSF profiling specifications for the <xref target="RFC8935"/> and <xref target="RFC8936"/> specs.</t>

<section anchor="delivery-meta"><name>Stream Configuration Metadata</name>

<t>Each delivery method is identified by a URI, specified below by the &quot;method&quot;
metadata.</t>

<section anchor="push-delivery-using-http"><name>Push Delivery using HTTP</name>

<t>This section provides SSF profiling specifications for the <xref target="RFC8935"/> spec.</t>

<t>method</t>

<ul empty="true"><li>
  <t>&quot;urn:ietf:rfc:8935&quot;</t>
</li></ul>

<t>endpoint_url</t>

<ul empty="true"><li>
  <t>The URL where events are pushed through HTTP POST. This is set by the
  Receiver. If a Receiver is using multiple streams from a single Transmitter
  and needs to keep the SETs separated, it is RECOMMENDED that the URL for each
  stream be unique.</t>
</li></ul>

<t>authorization_header</t>

<ul empty="true"><li>
  <t>If the endpoint_url requires authorization, the receiver SHOULD provide this
authorization header in the stream creation/updation. If present, the
Transmitter MUST provide this value with every HTTP request to the
<spanx style="verb">endpoint_url</spanx>.</t>
</li></ul>

</section>
<section anchor="poll-delivery-using-http"><name>Poll Delivery using HTTP</name>

<t>This section provides SSF profiling specifications for the <xref target="RFC8936"/> spec.</t>

<t>method</t>

<ul empty="true"><li>
  <t>&quot;urn:ietf:rfc:8936&quot;</t>
</li></ul>

<t>endpoint_url</t>

<ul empty="true"><li>
  <t>The URL where events can be retrieved from. This is specified by the
  Transmitter. These URLs MAY be reused across Receivers, but MUST be unique per
  stream for a given Receiver.</t>
</li></ul>

</section>
</section>
</section>
<section anchor="discovery"><name>Transmitter Configuration Discovery</name>

<t>This section defines a mechanism for Receivers to obtain the Transmitter
Configuration Metadata.</t>

<section anchor="discovery-meta"><name>Transmitter Configuration Metadata</name>

<t>Transmitters have metadata describing their configuration:</t>

<t>spec_version</t>

<ul empty="true"><li>
  <t>OPTIONAL. A version identifying the implementer&#39;s draft or final specification
implemented by the Transmitter. This includes the numerical portion of the spec
version as described in the document <xref target="NAMINGCONVENTION"/>. If absent, the
Transmitter is assumed to conform to &quot;1_0-ID1&quot; version of the specification.</t>

  <t>The following is a non-normative example of a Transmitter that implements the
final specification of the Shared Signals Framework 1_0.</t>
</li></ul>

<figure title="Example: spec_version referring to the final 1_0
spec" anchor="figspecversionfinal"><sourcecode type="json"><![CDATA[
   {
        "spec_version": "1_0"
   }
]]></sourcecode></figure>

<t>issuer</t>

<ul empty="true"><li>
  <t>REQUIRED. URL using the https scheme with no query or fragment component
  that the Transmitter asserts as its Issuer Identifier. This MUST be identical
  to the iss claim value in Security Event Tokens issued from this Transmitter.</t>
</li></ul>

<t>jwks_uri</t>

<ul empty="true"><li>
  <t>OPTIONAL. URL of the Transmitter&#39;s JSON Web Key Set <xref target="RFC7517"/> document.
  This contains the signing key(s) the Receiver uses to validate signatures from
  the Transmitter. This value MUST be specified if the Transmitter intends to
  generate signed JWTs. If present, this URL MUST use HTTP over TLS <xref target="RFC9110"/>.</t>
</li></ul>

<t>delivery_methods_supported</t>

<ul empty="true"><li>
  <t>RECOMMENDED. List of supported delivery method URIs.</t>
</li></ul>

<t>configuration_endpoint</t>

<ul empty="true"><li>
  <t>OPTIONAL. The URL of the Configuration Endpoint. If present, this URL MUST use
HTTP over TLS <xref target="RFC9110"/>.</t>
</li></ul>

<t>status_endpoint</t>

<ul empty="true"><li>
  <t>OPTIONAL. The URL of the Status Endpoint. If present, this URL MUST use HTTP
over TLS <xref target="RFC9110"/>.</t>
</li></ul>

<t>add_subject_endpoint</t>

<ul empty="true"><li>
  <t>OPTIONAL. The URL of the Add Subject Endpoint. If present, this URL MUST use
HTTP over TLS <xref target="RFC9110"/>.</t>
</li></ul>

<t>remove_subject_endpoint</t>

<ul empty="true"><li>
  <t>OPTIONAL. The URL of the Remove Subject Endpoint. If present, this URL MUST
use HTTP over TLS <xref target="RFC9110"/>.</t>
</li></ul>

<t>verification_endpoint</t>

<ul empty="true"><li>
  <t>OPTIONAL. The URL of the Verification Endpoint. If present, this URL MUST use
HTTP over TLS <xref target="RFC9110"/>.</t>
</li></ul>

<t>critical_subject_members</t>

<ul empty="true"><li>
  <t>OPTIONAL. An array of member names in a Complex Subject which, if present in
  a Subject Member in an event, MUST be interpreted by a Receiver.</t>
</li></ul>

<t>authorization_schemes</t>

<ul empty="true"><li>
  <t>OPTIONAL. An array of JSON objects that specify the supported
  authorization scheme properties defined in <xref target="authorization-scheme"/>. To enable
  seamless discovery of configurations, the service provider SHOULD, with the
  appropriate security considerations, make the authorization_schemes attribute
  publicly accessible without prior authentication.</t>
</li></ul>

<t>default_subjects</t>

<ul empty="true"><li>
  <t>OPTIONAL. A string indicating the default behavior of newly created streams.
  If present, the value MUST be either &quot;ALL&quot; or &quot;NONE&quot;. If not provided, the
  Transmitter behavior in this regard is unspecified.</t>

  <t><list style="symbols">
    <t>&quot;ALL&quot; indicates that any subjects that are appropriate for the stream are
  added to the stream by default. The Receiver MAY remove subjects from the
  stream via the <spanx style="verb">remove_subject_endpoint</spanx>, causing events for those subjects
  to <em>not</em> be transmitted. The Receiver MAY re-add any subjects removed this
  way via the <spanx style="verb">add_subject_endpoint</spanx>.</t>
    <t>&quot;NONE&quot; indicates that no subjects are added by default. The Receiver MAY add
  subjects to the stream via the <spanx style="verb">add_subject_endpoint</spanx>, causing only events
  for those subjects to be transmitted. The Receiver MAY remove subjects added
  this way via the <spanx style="verb">remove_subject_endpoint</spanx>.</t>
  </list></t>
</li></ul>

<section anchor="authorization-scheme"><name>Authorization scheme</name>

<t>SSF is an HTTP based signals sharing framework and is agnostic to the
authentication and authorization schemes used to secure stream configuration
APIs. It does not provide any SSF-specific authentication and authorization
schemes but relies on the cooperating parties&#39; mutual security considerations.</t>

<t>The <spanx style="verb">authorization_schemes</spanx> key of Transmitter Configuration Metadata provides
authorization information related to the Transmitter&#39;s stream management APIs.
These authorization schemes SHOULD also be used to protect any polling endpoint
(used for Poll-Based SET delivery <xref target="RFC8936"></xref>) hosted by the Transmitter.</t>

<t>spec_urn</t>

<ul empty="true"><li>
  <t>REQUIRED. A URN that describes the specification of the protocol being used.</t>
</li></ul>

<t>The Receiver will call the Transmitter APIs by providing appropriate credentials
as per the <spanx style="verb">spec_urn</spanx>.</t>

<t>The following is a non-normative example of the <spanx style="verb">spec_urn</spanx></t>

<figure title="Example: `spec_urn` specifying the OAuth protocol for
authorization" anchor="figspecurn"><sourcecode type="json"><![CDATA[
   {
        "spec_urn": "urn:ietf:rfc:6749"
   }
]]></sourcecode></figure>

<t>In this case, the Receiver may obtain an access token using the Client
Credentials Grant (Section 4.4 of <xref target="RFC6749"/>), or any other method suitable for the Receiver
and the Transmitter.</t>

</section>
</section>
<section anchor="obtaining-transmitter-configuration-metadata"><name>Obtaining Transmitter Configuration Metadata</name>

<t>Using the Issuer URL as documented by the Transmitter, the Transmitter
Configuration Metadata can be retrieved. Receivers SHOULD ensure that the Issuer
URL comes from a trusted source and uses the <spanx style="verb">https</spanx> scheme.</t>

<t>Transmitters supporting Discovery MUST make a JSON document available at the
path formed by inserting the string &quot;/.well-known/ssf-configuration&quot; into the
Issuer between the host component and the path component, if any. The syntax
and semantics of &quot;.well-known&quot; are defined in <xref target="RFC8615"/>.  &quot;ssf-configuration&quot;
MUST point to a JSON document compliant with this specification, and that
document MUST be returned using the &quot;application/json&quot; content type.</t>

<section anchor="transmitter-configuration-request"><name>Transmitter Configuration Request</name>

<t>A Transmitter Configuration Document MUST be queried using an HTTP &quot;GET&quot; request
at the previously specified path.</t>

<t>The Receiver would make the following request to the Issuer
&quot;https://tr.example.com&quot; to obtain its Transmitter Configuration Metadata, since
the Issuer contains no path component:</t>

<figure title="Example: Transmitter Configuration Request
(without path)" anchor="figdiscoveryrequest"><sourcecode type="http"><![CDATA[
GET /.well-known/ssf-configuration HTTP/1.1
Host: tr.example.com
]]></sourcecode></figure>

<t>If the  Issuer value contains a path component, any terminating &quot;/&quot; MUST be
removed before inserting &quot;/.well-known/ssf-configuration&quot; between the host
component and the path component. The Receiver would make the following request
to the Issuer &quot;https://tr.example.com/issuer1&quot; to obtain its Transmitter
Configuration Metadata, since the Issuer contains a path component:</t>

<figure title="Example: Transmitter Configuration Request
(with path)" anchor="figdiscoveryrequestpath"><sourcecode type="http"><![CDATA[
GET /.well-known/ssf-configuration/issuer1 HTTP/1.1
Host: tr.example.com
]]></sourcecode></figure>

<t>Using path components enables supporting multiple issuers per host. This is
required in some multi-tenant hosting configurations. This use of &quot;.well-known&quot;
is for supporting multiple issuers per host; unlike its use in <xref target="RFC8615"/>, it
does not provide general information about the host.</t>

</section>
<section anchor="backward-compatibility-for-risc-transmitters"><name>Backward Compatibility for RISC Transmitters</name>

<t>Existing RISC Transmitters MAY continue to use the path component
&quot;/risc-configuration&quot; instead of the path component &quot;/ssf-configuration&quot; in the
path for the Transmitter Configuration Metadata. New services supporting the
Shared Signals Framework SHOULD NOT use this location for publishing the
Transmitter Configuration Metadata. For example, the Transmitter Configuration
Metadata for the Transmitter &quot;https://risc-tr.example.com&quot; MAY be obtained by
making the following request:</t>

<figure title="Example: Transmitter Configuration Request for
RISC Transmitters" anchor="figolddiscoveryrequest"><sourcecode type="http"><![CDATA[
GET /.well-known/risc-configuration HTTP/1.1
Host: risc-tr.example.com
]]></sourcecode></figure>

</section>
<section anchor="transmitter-configuration-response"><name>Transmitter Configuration Response</name>

<t>The response is a set of Claims about the Transmitter&#39;s configuration, including
all necessary endpoints and public key location information. A successful
response MUST use the 200 OK HTTP status code and return a JSON object using the
&quot;application/json&quot; content type that contains a set of Claims as its members
that are a subset of the Metadata values defined in <xref target="discovery-meta"/>. Other
Claims MAY also be returned.</t>

<t>Claims that return multiple values are represented as JSON arrays. Claims with
zero elements MUST be omitted from the response.</t>

<t>An error response uses the applicable HTTP status code value.</t>

<t>The following is a non-normative example of a Transmitter Configuration Response</t>

<figure title="Example: Transmitter Configuration Response" anchor="figdiscoveryresponse"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json

{
  "spec_version": "1_0",
  "issuer":
    "https://tr.example.com",
  "jwks_uri":
    "https://tr.example.com/jwks.json",
  "delivery_methods_supported": [
    "urn:ietf:rfc:8935",
    "urn:ietf:rfc:8936"],
  "configuration_endpoint":
    "https://tr.example.com/ssf/mgmt/stream",
  "status_endpoint":
    "https://tr.example.com/ssf/mgmt/status",
  "add_subject_endpoint":
    "https://tr.example.com/ssf/mgmt/subject:add",
  "remove_subject_endpoint":
    "https://tr.example.com/ssf/mgmt/subject:remove",
  "verification_endpoint":
    "https://tr.example.com/ssf/mgmt/verification",
  "critical_subject_members": [ "tenant", "user" ],
  "authorization_schemes":[
      {
        "spec_urn": "urn:ietf:rfc:6749"
      },
      {
        "spec_urn": "urn:ietf:rfc:8705"
      }
    ],
  "default_subjects": "NONE"
}
]]></sourcecode></figure>

</section>
<section anchor="transmitter-configuration-validation"><name>Transmitter Configuration Validation</name>

<t>If any of the validation procedures defined in this specification fail, any
operations requiring the information that failed to correctly validate MUST be
aborted and the information that failed to validate MUST NOT be used.</t>

<t>The &quot;issuer&quot; value returned MUST be identical to the Issuer URL that was
directly used to retrieve the configuration information. This MUST also be
identical to the &quot;iss&quot; Claim value in Security Event Tokens issued from this
Transmitter.</t>

</section>
</section>
</section>
<section anchor="management"><name>Management API for SET Event Streams</name>

<t>An Event Stream is an abstraction for how events are communicated from a
Transmitter to a Receiver. The Event Stream&#39;s configuration, which is jointly
managed by the Transmitter and Receiver, holds information about
what types of events will be sent from the Transmitter, as well as the mechanism
by which the Receiver can expect to receive the events. The Event Stream also
keeps track of what Subjects are of interest to the Receiver, and only events
with those Subjects are transmitted on the stream.</t>

<t>This section defines an HTTP API to be implemented by Event Transmitters
which can be used by Event Receivers to create and delete one or more Event
Streams. The API can also be used to query and update the Event Stream&#39;s
configuration and status, add and remove Subjects, and trigger verification for
those streams.</t>

<t>Unless there exists some other method of establishing trust between a
Transmitter and Receiver, all Stream Management API endpoints MUST use standard
HTTP authentication and authorization schemes, as per <xref target="RFC9110"/>. This
authorization MUST associate a Receiver with one or more stream IDs and &quot;aud&quot;
values, such that only authorized Receivers are able to access or modify the
details of the associated Event Streams.</t>

<figure title="Event Stream Management API" anchor="figintro"><sourcecode type="ascii"><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Stream Updated |            |
|            +---------------->            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></sourcecode></figure>

<t>It is OPTIONAL for Transmitters to implement a Management API, but it is
RECOMMENDED that they implement it, especially the endpoints for querying the
Stream Status and for triggering Verification.</t>

<section anchor="management-api"><name>Event Stream Management</name>

<t>Event Receivers manage how they receive events and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>A Transmitter and Receiver MAY use the same Event Stream for updates about
multiple Subject Principals. The status of the Event Stream MAY be queried
and managed independently for each Subject Principal by Transmitters and
Receivers.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t>Configuration Endpoint</t>

<ul empty="true"><li>
  <t>An endpoint used to create and delete Event Streams, as well as read and
  update an Event Stream&#39;s current configuration.</t>
</li></ul>

<t>Status Endpoint</t>

<ul empty="true"><li>
  <t>An endpoint used to read and update an Event Stream&#39;s current status.</t>
</li></ul>

<t>Add Subject Endpoint</t>

<ul empty="true"><li>
  <t>An endpoint used to add subjects to an Event Stream.</t>
</li></ul>

<t>Remove Subject Endpoint</t>

<ul empty="true"><li>
  <t>An endpoint used to remove subjects from an Event Stream.</t>
</li></ul>

<t>Verification Endpoint</t>

<ul empty="true"><li>
  <t>An endpoint used to request the Event Transmitter to transmit a Verification
  Event over an Event Stream.</t>
</li></ul>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple Event
Receivers, provided that the Event Transmitter has some mechanism through which
they can identify the applicable set of Event Streams for any given request,
e.g. from authentication credentials. The definition of such mechanisms is
outside the scope of this specification.</t>

<section anchor="stream-config"><name>Stream Configuration</name>

<t>An Event Stream&#39;s configuration is a collection of data, provided by both the
Transmitter and the Receiver, that describes the information being sent over
the Event Stream. It is represented as a JSON <xref target="RFC7159"/> object with the
following properties:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, REQUIRED. A string that uniquely identifies the
  stream. A Transmitter MUST generate a unique ID for each of its non-deleted
  streams at the time of stream creation. Transmitters SHOULD use character set
  described in Section 2.3 of <xref target="RFC3986"/> to generate the stream ID.</t>
</li></ul>

<t>iss</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, REQUIRED. A URL using the https scheme with no query
  or fragment component that the Transmitter asserts as its Issuer Identifier.
  This MUST be identical to the &quot;iss&quot; Claim value in Security Event Tokens
  issued from this Transmitter.</t>
</li></ul>

<t>aud</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, REQUIRED. A string or an array of strings containing
  an audience claim as defined in JSON Web Token (JWT)<xref target="RFC7519"/> that
  identifies the Event Receiver(s) for the Event Stream. This property cannot be
  updated. If multiple Receivers are specified then the Transmitter SHOULD know
  that these Receivers are the same entity.</t>
</li></ul>

<t>events_supported</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, OPTIONAL. An array of URIs identifying the set of
  events supported by the Transmitter for this Receiver. If omitted, Event
  Transmitters SHOULD make this set available to the Event Receiver via some
  other means (e.g. publishing it in online documentation).</t>
</li></ul>

<t>events_requested</t>

<ul empty="true"><li>
  <t><strong>Receiver-Supplied</strong>, OPTIONAL. An array of URIs identifying the set of
  events that the Receiver requested. A Receiver SHOULD request only the events
  that it understands and it can act on. This is configurable by the Receiver. A
  Transmitter MUST ignore any array values that it does not understand. This
  array SHOULD NOT be empty.</t>
</li></ul>

<t>events_delivered</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, REQUIRED. An array of URIs identifying the set of
  events that the Transmitter MUST include in the stream. This is a subset (not
  necessarily a proper subset) of the intersection of &quot;events_supported&quot; and
  &quot;events_requested&quot;. A Receiver MUST rely on the values received in this field
  to understand which event types it can expect from the Transmitter.</t>
</li></ul>

<t>delivery</t>

<ul empty="true"><li>
  <t>REQUIRED. A JSON object containing a set of name/value pairs specifying
  configuration parameters for the SET delivery method. The actual delivery
  method is identified by the special key &quot;method&quot; with the value being a URI as
  defined in <xref target="delivery-meta"/>.</t>
</li></ul>

<t>min_verification_interval</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, OPTIONAL. An integer indicating the minimum amount
  of time in seconds that must pass in between verification requests. If an
  Event Receiver submits verification requests more frequently than this, the
  Event Transmitter MAY respond with a 429 status code. An Event Transmitter
  SHOULD NOT respond with a 429 status code if an Event Receiver is not
  exceeding this frequency.</t>
</li></ul>

<t>description</t>

<ul empty="true"><li>
  <t><strong>Receiver-Supplied</strong>, OPTIONAL. A string that describes the properties of the
  stream. This is useful in multi-stream systems to identify the stream for
  human actors. The transmitter MAY truncate the string beyond an allowed max
  length.</t>
</li></ul>

<t>inactivity_timeout</t>

<ul empty="true"><li>
  <t><strong>Transmitter-Supplied</strong>, OPTIONAL. The refreshable inactivity timeout of the
stream in seconds. After the timeout duration passes with no eligible activity
from the Receiver, as defined below, the Transmitter MAY either pause, disable,
or delete the stream. The syntax is the same as that of <spanx style="verb">expires_in</spanx> from
Section A.14 of <xref target="RFC6749"/>.</t>

  <t>The following constitutes eligible Receiver activity. If the Transmitter
observes any of these activities from the Receiver, it MUST restart the
inactivity timeout counter.</t>

  <ul empty="true"><li>
    <t>For streams created with the PUSH <xref target="RFC8935"/> delivery method:</t>

    <t><list style="symbols">
      <t>The Receiver calls any endpoint in the Event Stream Management API that
references the stream (<xref target="management"/>).</t>
    </list></t>

    <t>For streams created with the POLL <xref target="RFC8936"/> delivery method:</t>

    <t><list style="symbols">
      <t>The Receiver polls the Transmitter for events in the stream.</t>
      <t>The Receiver calls any endpoint in the Event Stream Management API that
references the stream (<xref target="management"/>).</t>
    </list></t>
  </li></ul>

  <t>If the Transmitter decides to pause or disable the stream, it MUST send a
Stream Updated Event to the Receiver as described in <xref target="status"/>.</t>
</li></ul>

<section anchor="creating-a-stream"><name>Creating a Stream</name>

<t>In order to communicate events from a Transmitter to a Receiver, a Receiver
MUST first create an Event Stream. An Event Receiver creates a stream by making
an HTTP POST request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a &quot;201 Created&quot; response containing a
JSON <xref target="RFC7159"/> representation of the stream&#39;s configuration in the body. The
Receiver MUST check the response and confirm that the <spanx style="verb">iss</spanx> value matches the
Issuer from which it received the Transmitter Configuration data.</t>

<t>If a stream already exists, and the Transmitter allows multiple streams with the
same Receiver, the Event Transmitter MUST respond with a new stream ID. If the
Transmitter does not allow multiple streams with the same Receiver, it MUST
respond with HTTP status code &quot;409 Conflict&quot;. The Receiver MAY then GET the
existing stream configuration and, if desired, use PATCH or PUT to update or
replace the existing stream configuration.</t>

<t>The HTTP POST request MAY contain the Receiver-Supplied values of the Stream
Configuration (<xref target="stream-config"/>) object:</t>

<t><list style="symbols">
  <t><spanx style="verb">events_requested</spanx></t>
  <t><spanx style="verb">delivery</spanx></t>
  <t><spanx style="verb">description</spanx></t>
</list></t>

<t>If the request does not contain the <spanx style="verb">delivery</spanx> property, then the Transmitter
MUST assume that the <spanx style="verb">method</spanx> is &quot;urn:ietf:rfc:8936&quot; (poll). If the Transmitter
supports Poll-Based Delivery, the Transmitter MUST include a <spanx style="verb">delivery</spanx> property
in the response with this <spanx style="verb">method</spanx> property and an <spanx style="verb">endpoint_url</spanx> property. If
the Transmitter does not support the delivery method, it MAY respond with HTTP
Status Code &quot;400 Bad Request.&quot;</t>

<t>Note that in the case of the poll method, the <spanx style="verb">endpoint_url</spanx> value is supplied
by the Transmitter.</t>

<t>The following is a non-normative example request to create an Event Stream:</t>

<figure title="Example: Create Event Stream Request" anchor="figcreatestreamreq"><sourcecode type="http"><![CDATA[
POST /ssf/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "delivery": {
    "method": "urn:ietf:rfc:8935",
    "endpoint_url": "https://receiver.example.com/events"
  },
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "description" : "Stream for Receiver A using events type_2, type_3, type_4"
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Create Stream Response" anchor="figcreatestreamresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
      "https://receiver.example.com/web",
      "https://receiver.example.com/mobile"
    ],
  "delivery": {
    "method": "urn:ietf:rfc:8935",
    "endpoint_url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "description" : "Stream for Receiver A using events type_2, type_3, type_4"
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Create Stream Errors" anchor="tablecreatestream">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request cannot be parsed</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to create a stream</c>
      <c>409</c>
      <c>if the Transmitter does not support multiple streams per Receiver</c>
</texttable>

<section anchor="validating-a-stream-creation-response"><name>Validating a Stream Creation Response</name>

<t><list style="symbols">
  <t><spanx style="verb">aud</spanx>: the Receiver SHOULD validate the <spanx style="verb">aud</spanx> in the Create Stream Response.
A Transmitter and Receiver MAY agree upon the audience value out of band.
Regardless of how the audience value is agreed upon, the Receiver SHOULD ensure
that it matches what it expects.</t>
</list></t>

</section>
</section>
<section anchor="reading-a-streams-configuration"><name>Reading a Stream&#39;s Configuration</name>

<t>An Event Receiver gets the current configuration of a stream by making an HTTP
GET request to the Configuration Endpoint. On receiving a valid request, the
Event Transmitter responds with a &quot;200 OK&quot; response containing a JSON
<xref target="RFC7159"/> representation of the stream&#39;s configuration in the body. The
Receiver MUST check the response and confirm that the <spanx style="verb">iss</spanx> value matches the
Issuer from which it received the Transmitter Configuration data.</t>

<t>The GET request MAY include the &quot;stream_id&quot; as a query parameter in order to
identify the correct Event Stream. If the &quot;stream_id&quot; parameter is missing,
then the Transmitter MUST return a list of the stream configurations available
to this Receiver. In the event that there are no Event Streams configured, the
Transmitter MUST return an empty list.</t>

<t>The following is a non-normative example request to read an Event Stream&#39;s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><sourcecode type="http"><![CDATA[
GET /ssf/stream?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
      "https://receiver.example.com/web",
      "https://receiver.example.com/mobile"
    ],
  "delivery": {
    "method": "urn:ietf:rfc:8935",
    "endpoint_url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "description" : "Stream for Receiver A using events type_2, type_3, type_4"
}
]]></sourcecode></figure>

<t>The following is a non-normative example request to read an Event Stream&#39;s
configuration, with no &quot;stream_id&quot; indicated:</t>

<figure title="Example: Read Stream Configuration
Request" anchor="figreadconfigreqnostreamid"><sourcecode type="http"><![CDATA[
GET /ssf/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no
&quot;stream_id&quot;:</t>

<figure title="Example: Read Stream Configuration
 Response" anchor="figreadconfigrespnostreamidmanystreams"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[
  {
    "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
    "iss": "https://tr.example.com",
    "aud": [
        "https://receiver.example.com/web",
        "https://receiver.example.com/mobile"
      ],
    "delivery": {
      "method": "urn:ietf:rfc:8935",
      "endpoint_url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  },
  {
    "stream_id": "50b2d39934264897902c0581ba7c21a3",
    "iss": "https://tr.example.com",
    "aud": [
        "https://receiver.example.com/web",
        "https://receiver.example.com/mobile"
      ],
    "delivery": {
      "method": "urn:ietf:rfc:8935",
      "endpoint_url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "description" : "Stream for Receiver A using events type_2, type_3, type_4"
  }
]
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no
&quot;stream_id&quot; when there is only one Event Stream configured:</t>

<figure title="Example: Read Stream Configuration
 Response" anchor="figreadconfigrespnostreamidonestream"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[
  {
    "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
    "iss": "https://tr.example.com",
    "aud": [
        "https://receiver.example.com/web",
        "https://receiver.example.com/mobile"
      ],
    "delivery": {
      "method": "urn:ietf:rfc:8935",
      "endpoint_url": "https://receiver.example.com/events"
    },
    "events_supported": [
      "urn:example:secevent:events:type_1",
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ],
    "events_requested": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3",
      "urn:example:secevent:events:type_4"
    ],
    "events_delivered": [
      "urn:example:secevent:events:type_2",
      "urn:example:secevent:events:type_3"
    ]
  }
]
]]></sourcecode></figure>

<t>The following is a non-normative example response to a request with no
&quot;stream_id&quot; when there are no Event Streams configured:</t>

<figure title="Example: Read Stream Configuration
 Response" anchor="figreadconfigrespnostreamidnostreams"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

[]
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration"><name>Updating a Stream&#39;s Configuration</name>

<t>An Event Receiver updates the current configuration of a stream by making an
HTTP PATCH request to the Configuration Endpoint. The PATCH body contains a
JSON <xref target="RFC7159"/> representation of the stream configuration properties to
change. On receiving a valid request, the Event Transmitter responds with a
&quot;200 OK&quot; response containing a JSON <xref target="RFC7159"/> representation of the entire
updated stream configuration in the body. The Receiver MUST check the response
and confirm that the <spanx style="verb">iss</spanx> value matches the Issuer from which it received the
Transmitter Configuration data.</t>

<t>The stream_id property MUST be present in the request. Other properties
MAY be present in the request. Any Receiver-Supplied property present in the
request MUST be updated by the Transmitter. Any properties missing in the
request MUST NOT be changed by the Transmitter. If <spanx style="verb">events_requested</spanx> property
is included in the request, it SHOULD NOT be an empty array.</t>

<t>Transmitter-Supplied properties besides the stream_id MAY be present,
but they MUST match the expected value. Missing Transmitter-Supplied
properties MUST be ignored by the Transmitter. The <spanx style="verb">events_delivered</spanx> property,
if present, MUST match the Transmitter&#39;s expected value before any updates are
applied.</t>

<t>The following is a non-normative example request to replace an Event Stream&#39;s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><sourcecode type="http"><![CDATA[
PATCH /ssf/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "description" : "Stream for Receiver B using events type_2, type_3, type_4"
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "https://receiver.example.com/web",
    "https://receiver.example.com/mobile"
  ],
  "delivery": {
    "method": "urn:ietf:rfc:8935",
    "endpoint_url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "description" : "Stream for Receiver B using events type_2, type_3, type_4"
}
]]></sourcecode></figure>

<t>Pending conditions or errors are signaled with HTTP status codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the update request has been accepted, but not processed. Receiver MAY try the same request later to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed, a Transmitter-Supplied property is incorrect, or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="replacing-a-streams-configuration"><name>Replacing a Stream&#39;s Configuration</name>

<t>An Event Receiver replaces the current configuration of a stream by making an
HTTP PUT request to the Configuration Endpoint. The PUT body contains a JSON
<xref target="RFC7159"/> representation of the new configuration. On receiving a valid
request, the Event Transmitter responds with a &quot;200 OK&quot; response containing a
JSON <xref target="RFC7159"/> representation of the updated stream configuration in the body.
The Receiver MUST check the response and confirm that the <spanx style="verb">iss</spanx> value matches
the Issuer from which it received the Transmitter Configuration data.</t>

<t>The stream_id and the full set of Receiver-Supplied properties MUST be present
in the PUT body, not only those specifically intended to be changed.
Missing Receiver-Supplied properties MUST be interpreted as requested to be
deleted. Event Receivers MAY read the configuration first, modify the JSON
<xref target="RFC7159"/> representation, then make a replacement request. If
<spanx style="verb">events_requested</spanx> property is included in the request, it SHOULD NOT be an
empty array.</t>

<t>Transmitter-Supplied properties besides the stream_id MAY be present,
but they MUST match the expected value. Missing Transmitter-Supplied
properties MUST be ignored by the Transmitter. The <spanx style="verb">events_delivered</spanx> property,
if present, MUST match the Transmitter&#39;s expected value <em>before</em> any updates are
applied.</t>

<t>The following is a non-normative example request to replace an Event Stream&#39;s
configuration:</t>

<figure title="Example: Replace Stream Configuration Request" anchor="figreplaceconfigreq"><sourcecode type="http"><![CDATA[
PUT /ssf/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "delivery": {
    "method": "urn:ietf:rfc:8935",
    "endpoint_url": "https://receiver.example.com/events"
  },
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "description" : "Stream for Receiver C"
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Replace Stream Configuration Response" anchor="figreplaceconfigresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "iss": "https://tr.example.com",
  "aud": [
    "https://receiver.example.com/web",
    "https://receiver.example.com/mobile"
  ],
  "delivery": {
    "method": "urn:ietf:rfc:8935",
    "endpoint_url": "https://receiver.example.com/events"
  },
  "events_supported": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "events_requested": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3",
    "urn:example:secevent:events:type_4"
  ],
  "events_delivered": [
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "description" : "Stream for Receiver C"
}
]]></sourcecode></figure>

<t>Pending conditions or errors are signaled with HTTP status codes as follows:</t>

<texttable title="Replace Stream Configuration Errors" anchor="tabreplaceconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the replace request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed, a Transmitter-Supplied property is incorrect, or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to replace the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
<section anchor="deleting-a-stream"><name>Deleting a Stream</name>

<t>An Event Receiver deletes a stream by making an HTTP DELETE request to the
Configuration Endpoint. On receiving a request, the Event Transmitter responds
with an empty &quot;204 No Content&quot; response if the configuration was successfully
removed.</t>

<t>The DELETE request MUST include the &quot;stream_id&quot; as a query parameter in order to
identify the correct Event Stream.</t>

<t>The following is a non-normative example request to delete an Event Stream:</t>

<figure title="Example: Delete Stream Request" anchor="figdeletestreamreq"><sourcecode type="http"><![CDATA[
DELETE /ssf/stream?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></sourcecode></figure>

<t>The following is a non-normative example response of a successful request:</t>

<figure title="Example: Delete Stream Response" anchor="figdeletestreamresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Delete Stream Errors">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to delete the stream</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

</section>
</section>
<section anchor="status"><name>Stream Status</name>

<t>Event Streams are managed independently. A Receiver MAY request that events from
a stream be interrupted by Updating the Stream Status
(<xref target="updating-a-streams-status"/>). If a Transmitter decides to enable, pause or
disable updates from a stream independently of an update request from a
Receiver, it MUST send a Stream Updated Event (<xref target="stream-updated-event"/>) to the
Receiver.</t>

<section anchor="reading-a-streams-status"><name>Reading a Stream&#39;s Status</name>

<t>An Event Receiver checks the current status of an Event Stream by making an HTTP
GET request to the stream&#39;s Status Endpoint.</t>

<t>The Stream Status method takes the following parameters:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t>REQUIRED. A string identifying the stream whose status is being queried.</t>
</li></ul>

<t>On receiving a valid request, the Event Transmitter responds with a 200 OK
response containing a JSON <xref target="RFC7159"/> object with the following attributes:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t>REQUIRED. A string identifying the stream whose status is being queried.</t>
</li></ul>

<t>status</t>

<ul empty="true"><li>
  <t>REQUIRED. A string whose value MUST be one of the values described below.</t>
</li></ul>

<t>reason</t>

<ul empty="true"><li>
  <t>An OPTIONAL string whose value SHOULD express why the stream&#39;s status is set
to the current value.</t>
</li></ul>

<t>The allowable &quot;status&quot; values are:</t>

<t>enabled</t>

<ul empty="true"><li>
  <t>The Transmitter MUST transmit events over the stream, according to the
  stream&#39;s configured delivery method.</t>
</li></ul>

<t>paused</t>

<ul empty="true"><li>
  <t>The Transmitter MUST NOT transmit events over the stream. The Transmitter
  SHOULD hold any events it would have transmitted while paused, and SHOULD
  transmit them when the stream&#39;s status becomes &quot;enabled&quot;. The Transmitter
  MAY drop zero or more events that are held when the stream is paused. If
  a Transmitter holds successive events that affect the same Subject Principal,
  then the Transmitter MUST make sure that those events are transmitted in the
  order of time that they were generated OR the Transmitter MUST send only the
  last events that do not require the previous events affecting the same Subject
  Principal to be processed by the Receiver, because the previous events are
  either cancelled by the later events or the previous events are outdated.</t>
</li></ul>

<t>disabled</t>

<ul empty="true"><li>
  <t>The Transmitter MUST NOT transmit events over the stream and will not hold
  any events for later transmission.</t>
</li></ul>

<t>The following is a non-normative example request to check an Event Stream&#39;s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><sourcecode type="http"><![CDATA[
GET /ssf/status?stream_id=f67e39a0a4d34d56b3aa1bc4cff0069f HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer zzzz
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "reason": "SYSTEM_DOWN_FOR_MAINTENANCE"
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Read Stream Status Errors" anchor="tabreadstatus">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream status</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

<t>Examples:</t>

<t><list style="numbers" type="1">
  <t>If a Receiver makes an unauthorized request, then the
Transmitter MUST respond with a 401 error status.</t>
  <t>If a Receiver makes an authorized request, but the Transmitter policy
does not permit the Receiver from obtaining the status, then the Transmitter
MAY respond with a 403 error status.</t>
  <t>If the Receiver requests the status for a stream that does not exist then the
Transmitter MUST respond with a 404 error status.</t>
</list></t>

</section>
<section anchor="updating-a-streams-status"><name>Updating a Stream&#39;s Status</name>

<t>An Event Receiver updates the current status of a stream by making an HTTP POST
request to the Status Endpoint. The POST body contains a JSON <xref target="RFC7159"/> object
with the following fields:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t>REQUIRED. A string identifying the stream whose status is being updated.</t>
</li></ul>

<t>status</t>

<ul empty="true"><li>
  <t>REQUIRED. The new status of the Event Stream.</t>
</li></ul>

<t>reason</t>

<ul empty="true"><li>
  <t>OPTIONAL. A short text description that explains the reason for the change.</t>
</li></ul>

<t>On receiving a valid request, the Event Transmitter responds with a &quot;200 OK&quot;
response containing a JSON <xref target="RFC7159"/> representation of the updated stream
status in the body, using the same fields as described in the request.</t>

<t>The following is a non-normative example request to update an Event Stream&#39;s
status:</t>

<figure title="Example: Update Stream Status Request Without Optional
 Fields" anchor="figupdatestatusreq"><sourcecode type="http"><![CDATA[
POST /ssf/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of an Update Stream Status request with
an optional reason:</t>

<figure title="Example: Update Stream Status Request With Optional
Reason" anchor="figupdatestatuswithreasonreq"><sourcecode type="http"><![CDATA[
POST /ssf/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "reason": "Disabled by administrator action."
}
]]></sourcecode></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Status Response" anchor="figupdatestatusresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "status": "paused",
  "reason": "Disabled by administrator action."
}
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Update Stream Status Errors" anchor="tabupdatestatus">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>202</c>
      <c>if the update request has been accepted, but not processed. Receiver MAY try the same request later in order to get processing result.</c>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream status</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
</texttable>

<t>Examples:</t>

<t><list style="numbers" type="1">
  <t>If a Receiver makes a request to update a stream status, and the Transmitter
is unable to decide whether or not to complete the request, then the
Transmitter MUST respond with a 202 status code.</t>
</list></t>

</section>
</section>
<section anchor="subjects"><name>Subjects</name>

<t>An Event Receiver can indicate to an Event Transmitter whether or not the
Receiver wants to receive events about a particular subject by &quot;adding&quot; or
&quot;removing&quot; that subject to the Event Stream, respectively.</t>

<section anchor="subject-matching"><name>Subject Matching</name>

<t>If a Receiver adds a subject to a stream defined in
<xref target="adding-a-subject-to-a-stream"/>, the Transmitter SHOULD send any events
relating to the subject which have event_types that the Receiver has subscribed
to, as long as the stream status is enabled. In the case of Simple Subjects, two
subjects match if they are exactly identical. For Complex Subjects, two subjects
match if, for all fields in the Complex Subject (i.e. <spanx style="verb">user</spanx>, <spanx style="verb">group</spanx>, <spanx style="verb">device</spanx>,
etc.), at least one of the following statements is true:</t>

<t><list style="numbers" type="1">
  <t>Subject 1&#39;s field is not defined</t>
  <t>Subject 2&#39;s field is not defined</t>
  <t>Subject 1&#39;s field is identical to Subject 2&#39;s field</t>
</list></t>

<t>The following is a non-normative example of subject matching for Complex
Subjects when a Receiver adds a subject that is less restrictive than the
subject being sent by the Transmitter.</t>

<t>The Receiver has added the following subject to their stream:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "format": "complex",
  "tenant": {
    "format": "opaque",
    "id": "example-a38h4792-uw2"
  }
}
]]></sourcecode></figure>

<t>The Transmitter has an event to broadcast with the following subject:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "format": "complex",
  "tenant": {
    "format": "opaque",
    "id": "example-a38h4792-uw2"
  },
  "user": {
    "format": "email",
    "email": "jdoe@example.com"
  }
}
]]></sourcecode></figure>

<t>According to the matching rules described above, the Transmitter SHOULD
broadcast the event over the Receiver&#39;s stream.</t>

<t>The following is a non-normative example of subject matching for Complex
Subjects when a Receiver adds a subject that is more restrictive than the
subject being sent by the Transmitter.</t>

<t>The Receiver has added the following subject to their stream:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "format": "complex",
  "user": {
    "format": "email",
    "email": "jdoe@example.com"
  },
  "device": {
    "format": "ip-addresses",
    "ip-addresses": ["10.29.37.75"]
  }
}
]]></sourcecode></figure>

<t>The Transmitter has an event to broadcast with the following subject:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "format": "complex",
  "user": {
    "format": "email",
    "email": "jdoe@example.com"
  }
}
]]></sourcecode></figure>

<t>According to the matching rules described above, the Transmitter SHOULD
broadcast the event over the Receiver&#39;s stream.</t>

<t>The following is a non-normative example of two Complex Subjects that do not
match.</t>

<t>The Receiver has added the following subject to their stream:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "format": "complex",
  "user": {
    "format": "email",
    "email": "jdoe@example.com"
  },
  "group": {
    "format": "did",
    "url": "did:example:123456"
  }
}
]]></sourcecode></figure>

<t>The Transmitter has an event to broadcast with the following subject:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "format": "complex",
  "user": {
    "format": "email",
    "email": "jdoe@example.com"
  },
  "group": {
    "format": "did",
    "url": "did:example:9999999"
  }
}
]]></sourcecode></figure>

<t>According to the matching rules described above, the Transmitter SHOULD NOT
broadcast the event over the Receiver&#39;s stream.</t>

</section>
<section anchor="adding-a-subject-to-a-stream"><name>Adding a Subject to a Stream</name>

<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a JSON object the
following claims:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t>REQUIRED. A string identifying the stream to which the subject is being added.</t>
</li></ul>

<t>subject</t>

<ul empty="true"><li>
  <t>REQUIRED. A Subject claim identifying the subject to be added.</t>
</li></ul>

<t>verified</t>

<ul empty="true"><li>
  <t>OPTIONAL. A boolean value; when true, it indicates that the Event Receiver
  has verified the Subject claim. When false, it indicates that the Event
  Receiver has not verified the Subject claim. If omitted, Event Transmitters
  SHOULD assume that the subject has been verified.</t>
</li></ul>

<t>On a successful response, the Event Transmitter responds with an empty &quot;200 OK&quot;
response. The Event Transmitter MAY choose to silently ignore the request, for
example if the subject has previously indicated to the Transmitter that they do
not want events to be transmitted to the Event Receiver. In this case, the
Transmitter MAY return an empty &quot;200 OK&quot; response or an appropriate error code.
See Security Considerations (<xref target="management-sec"/>).</t>

<t>The following is a non-normative example request to add a subject to a stream,
where the subject is identified by an Email Subject Identifier.</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><sourcecode type="http"><![CDATA[
POST /ssf/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "subject": {
    "format": "email",
    "email": "example.user@example.com"
  },
  "verified": true
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject, or not allowed to add in general</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the subject is not recognized by the Event Transmitter. The Event Transmitter may choose to stay silent in this second case and respond with &quot;200&quot;</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time</c>
</texttable>

</section>
<section anchor="removing-a-subject"><name>Removing a Subject</name>

<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP POST
request to the Remove Subject Endpoint, containing in the body a JSON object
with the following claims:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t>REQUIRED. A string identifying the stream from which the subject is being
removed.</t>
</li></ul>

<t>subject</t>

<ul empty="true"><li>
  <t>REQUIRED. A Subject claim identifying the subject to be removed.</t>
</li></ul>

<t>On a successful response, the Event Transmitter responds with a &quot;204 No Content&quot;
response.</t>

<t>The following is a non-normative example request where the subject is
identified by a Phone Number Subject Identifier:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><sourcecode type="http"><![CDATA[
POST /ssf/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "subject": {
    "format": "phone",
    "phone_number": "+12065550123"
  }
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject, or not allowed to remove in general</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver, or if the subject is not recognized by the Event Transmitter. The Event Transmitter may choose to stay silent in this second case and respond with &quot;204&quot;</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time</c>
</texttable>

</section>
</section>
<section anchor="verification"><name>Verification</name>

<t>In some cases, the frequency of event transmission on an Event Stream will be
very low, making it difficult for an Event Receiver to tell the difference
between expected behavior and event transmission failure due to a misconfigured
stream. Event Receivers can request that a Verification Event be transmitted
over the Event Stream, allowing the Receiver to confirm that the stream is
configured correctly upon successful receipt of the event. The acknowledgment of
a Verification Event also confirms to the Event Transmitter that end-to-end
delivery is working, including signature verification and encryption.</t>

<t>A Transmitter MAY send a Verification Event at any time, even if one was
not requested by the Event Receiver.</t>

<t>A Transmitter MAY respond to Verification Event requests even if the event is
not present in the <spanx style="verb">events_supported</spanx>, <spanx style="verb">events_requested</spanx> and / or
<spanx style="verb">events_delivered</spanx> fields in the Stream Configuration (<xref target="stream-config"/>).</t>

<section anchor="verification-event"><name>Verification Event</name>

<t>The Verification Event is an SSF event with the event type:
&quot;https://schemas.openid.net/secevent/ssf/event-type/verification&quot;. The event
contains the following attribute:</t>

<t>state</t>

<ul empty="true"><li>
  <t>OPTIONAL An opaque value provided by the Event Receiver when the event is
  triggered.</t>
</li></ul>

<t>As with any SSF event, the Verification Event has a top-level <spanx style="verb">sub_id</spanx> claim:</t>

<t>sub_id</t>

<ul empty="true"><li>
  <t>REQUIRED. The value of the top-level <spanx style="verb">sub_id</spanx> claim in a Verification Event
MUST always be set to have a simple value of type <spanx style="verb">opaque</spanx>. The <spanx style="verb">id</spanx> of the
value MUST be the <spanx style="verb">stream_id</spanx> of the stream being verified.</t>

  <t>Note that the subject that identifies a stream itself is always implicitly
  added to the stream and MAY NOT be removed from the stream.</t>
</li></ul>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET and
validate its claims. In particular, the Event Receiver SHALL confirm that the
value for &quot;state&quot; is as expected. If the value of &quot;state&quot; does not match, an
error response with the &quot;err&quot; field set to &quot;invalid_state&quot; SHOULD be returned
(see Section 2.4 of <xref target="RFC8935"/> or Section 2.4.4 of <xref target="RFC8936"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event Stream that
fails to successfully verify based on the acknowledgement or lack of
acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event"><name>Triggering a Verification Event.</name>

<t>To request that a Verification Event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
<xref target="RFC7159"/> object containing the parameters of the verification request, if
any. On a successful request, the Event Transmitter responds with an empty
&quot;204 No Content&quot; response.</t>

<t>Verification requests have the following properties:</t>

<t>stream_id</t>

<ul empty="true"><li>
  <t>REQUIRED. A string identifying the stream that the Verification Event is being
requested on.</t>
</li></ul>

<t>state</t>

<ul empty="true"><li>
  <t>OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to the
  Event Receiver in the Verification Event&#39;s payload. Event Receivers MAY use
  the value of this parameter to correlate a Verification Event with a
  verification request. If the Verification Event is initiated by the
  Transmitter then this parameter MUST not be set.</t>
</li></ul>

<t>A successful response from a POST to the Verification Endpoint does not indicate
that the Verification Event was transmitted successfully, only that the Event
Transmitter has transmitted the event or will do so at some point in the future.
Event Transmitters MAY transmit the event via an asynchronous process, and
SHOULD publish an SLA for Verification Event transmission times. Event Receivers
MUST NOT depend on the Verification Event being transmitted synchronously or in
any particular order relative to the current queue of events.</t>

<t>Errors are signaled with HTTP status codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwiseinvalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>404</c>
      <c>if there is no Event Stream with the given &quot;stream_id&quot; for this Event Receiver</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a given amount of time; see related &quot;min_verification_interval&quot; in <xref target="stream-config"/></c>
</texttable>

<t>The following is a non-normative example request to trigger a Verification
Event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><sourcecode type="http"><![CDATA[
POST /ssf/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json

{
  "stream_id": "f67e39a0a4d34d56b3aa1bc4cff0069f",
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></sourcecode></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><sourcecode type="http"><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
]]></sourcecode></figure>

<t>And the following is a non-normative example of a Verification Event sent to the
Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": 1493856000,
  "sub_id": {
    "format": "opaque",
    "id": "f67e39a0a4d34d56b3aa1bc4cff0069f"
  },
  "events": {
    "https://schemas.openid.net/secevent/ssf/event-type/verification":{
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="stream-updated-event"><name>Stream Updated Event</name>

<t>A Transmitter MAY change the stream status
without a request from a Receiver. The Transmitter sends an event of type
&quot;https://schemas.openid.net/secevent/ssf/event-type/stream-updated&quot; to indicate
that it has changed the status of the Event Stream.</t>

<t>If a Transmitter decides to change the status of an Event Stream from &quot;enabled&quot;
to either &quot;paused&quot; or &quot;disabled&quot;, then the Transmitter MUST send this event to
the Receiver before stopping the stream.</t>

<t>If the Transmitter changes the status of the stream from either
&quot;paused&quot; or &quot;disabled&quot; to &quot;enabled&quot;, then it MUST send this event to the
Receiver upon re-enabling the stream.</t>

<t>A Transmitter MAY send a Stream Updated event even if the event is not present
in the <spanx style="verb">events_supported</spanx>, <spanx style="verb">events_requested</spanx> and / or <spanx style="verb">events_delivered</spanx> fields
in the Stream Configuration (<xref target="stream-config"/>).</t>

<t>The &quot;stream-updated&quot; event contains the following claims:</t>

<t>status</t>

<ul empty="true"><li>
  <t>REQUIRED. Defines the new status of the stream.</t>
</li></ul>

<t>reason</t>

<ul empty="true"><li>
  <t>OPTIONAL. Provides a short description of why the Transmitter has updated the
  status.</t>
</li></ul>

<t>As with any SSF event, this event has a top-level <spanx style="verb">sub_id</spanx> claim:</t>

<t>sub_id</t>

<ul empty="true"><li>
  <t>REQUIRED. The top-level <spanx style="verb">sub_id</spanx> claim specifies the Stream Id for which the
status has been updated. The value of the <spanx style="verb">sub_id</spanx> field MUST be of format
<spanx style="verb">opaque</spanx>, and its <spanx style="verb">id</spanx> value MUST be the unique ID of the stream.</t>

  <t>Note that the subject that identifies a stream itself is always implicitly
  added to the stream and MAY NOT be removed from the stream.</t>

  <t>Below is a non-normative example of a Stream Updated event.</t>
</li></ul>

<figure title="Example: Stream Updated SET" anchor="figstreamupdatedset"><sourcecode type="json"><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": 1493856000,
  "sub_id": {
    "format": "opaque",
    "id" : "f67e39a0a4d34d56b3aa1bc4cff0069f"
  },
  "events": {
    "https://schemas.openid.net/secevent/ssf/event-type/stream-updated": {
      "status": "paused",
      "reason": "Internal error"
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="management-sec"><name>Security Considerations</name>

<section anchor="management-sec-subject-probing"><name>Subject Probing</name>

<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A &quot;404&quot; response may indicate
to the Event Receiver that the subject does not exist, which may inadvertently
reveal information about the subject (e.g. that a particular individual does or
does not use the Event Transmitter service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a &quot;204&quot; response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="management-sec-information-harvesting"><name>Information Harvesting</name>

<t>SETs may contain personally identifiable information (PII) or other non-public
information about the Event Transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the Event Stream become a vector for
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="management-sec-malicious-subject-removal"><name>Malicious Subject Removal</name>

<t>A malicious party may find it advantageous to remove a particular subject from a
stream, in order to reduce the Event Receiver&#39;s ability to detect malicious
activity related to the subject, inconvenience the subject, or for other
reasons. Consequently it may be in the best interests of the subject for the
Event Transmitter to continue to send events related to the subject for some
time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<section anchor="sub-info-leakage"><name>Subject Information Leakage</name>

<t>Event Transmitters and Receivers SHOULD take precautions to ensure that they do
not leak information about subjects via Subject Identifiers, and choose
appropriate Subject Identifier Types accordingly. Parties SHOULD NOT identify a
subject using a given Subject Identifier Type if doing so will allow the
recipient to correlate different claims about the subject that they are not
known to already have knowledge of. Transmitters and Receivers SHOULD always use
the same Subject Identifier Type and the same claim values to identify a given
subject when communicating with a given party in order to reduce the possibility
of information leakage.</t>

</section>
<section anchor="previously-consented-data"><name>Previously Consented Data</name>

<t>If SSF events contain new values for attributes of Subject Principals that were
previously exchanged between the Transmitter and Receiver, then there are no
additional privacy considerations introduced by providing the updated values in
the SSF events, unless the attribute was exchanged under a one-time consent
obtained from the user.</t>

</section>
<section anchor="new-data"><name>New Data</name>

<t>Data that was not previously exchanged between the Transmitter and the Receiver,
or data whose consent to exchange has expired has the following considerations:</t>

<section anchor="organizational-data"><name>Organizational Data</name>

<t>If a user has previously agreed with a Transmitter that they allow the release
of certain data to third-parties, then the Transmitter MAY send such data in SSF
events without additional consent of the user. Such data MAY include
organizational data about the Subject Principal that was generated by the
Transmitter.</t>

</section>
<section anchor="consentable-data"><name>Consentable Data</name>

<t>If a Transmitter intends to include data in SSF events that is not previously
consented to be released by the user, then the Transmitter MUST obtain consent
to release such data from the user in accordance with the Transmitter&#39;s privacy
policy.</t>

</section>
</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>Subject Identifiers defined in this document will be added to the &quot;Security
Events Subject Identifier Types&quot; registry. This registry is defined in the
Subject Identifiers for Security Event Tokens <xref target="RFC9493"/> specification.</t>

<t>The <spanx style="verb">ssf-configuration</spanx> well-known endpoint is registered in IANA&#39;s Well-Known
URIs registry, as defined by <xref target="RFC8615"/>.</t>

<t>IANA is asked to assign the error code &quot;invalid_state&quot;, as defined in
<xref target="verification-event"/>, to the Security Event Token Error Codes section of the
Security Event Token registry, as defined in Section 7.1 of <xref target="RFC8935"/>. The
following information is provided as required by the registration template:</t>

<t>Error Code</t>

<ul empty="true"><li>
  <t>invalid_state</t>
</li></ul>

<t>Description</t>

<ul empty="true"><li>
  <t>Indicates that a Verification event contained a &quot;state&quot; claim that does not
  match the value expected by the Receiver.</t>
</li></ul>

<t>Change Controller</t>

<ul empty="true"><li>
  <t>OpenID - Shared Signals Working Group</t>
</li></ul>

</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">

<reference anchor="OpenID.Core" target="https://openid.net/specs/openid-connect-core-1_0.html#IDToken">
  <front>
    <title>OpenID Connect Core 1.0 - ID Token</title>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization></organization>
    </author>
    <author initials="M. B." surname="Jones" fullname="Michael B. Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros" fullname="Breno de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore" fullname="Chuck Mortimore">
      <organization></organization>
    </author>
    <date year="2014" month="November"/>
  </front>
</reference>
&OASIS.saml-core-2.0-os;
&RFC2119;
&RFC6749;
&RFC7159;
&RFC7517;
&RFC7519;
&RFC8174;
&RFC8417;
&RFC8615;
&RFC8935;
&RFC8936;
&RFC9110;
&RFC9493;
&RFC4001;
&RFC3986;
<reference anchor="CAEP" target="https://openid.net/specs/openid-caep-1_0.html">
  <front>
    <title>OpenID Continuous Access Evaluation Profile 1.0</title>
    <author initials="T." surname="Cappalli" fullname="Tim Cappalli">
      <organization></organization>
    </author>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization></organization>
    </author>
    <date year="2024" month="June"/>
  </front>
</reference>
<reference anchor="RISC" target="https://openid.net/specs/openid-risc-profile-specification-1_0.html">
  <front>
    <title>OpenID RISC Profile Specification 1.0</title>
    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization></organization>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization></organization>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization></organization>
    </author>
    <author initials="S." surname="Bounev" fullname="Stan Bounev">
      <organization></organization>
    </author>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale">
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
</reference>
<reference anchor="NAMINGCONVENTION" target="https://openid.net/wg/resources/naming-and-contents-of-specifications/">
  <front>
    <title>OpenID Naming and Content of Specifications</title>
    <author initials="O." surname="Foundation" fullname="OpenID Foundation">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>




<?line 2519?>

<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>The authors wish to thank all members of the OpenID Foundation SSF
Working Group who contributed to the development of this
specification.</t>

</section>
<section anchor="notices"><name>Notices</name>

<t>Copyright (c) 2024 The OpenID Foundation.</t>

<t>The OpenID Foundation (OIDF) grants to any Contributor, developer, implementer,
or other interested party a non-exclusive, royalty free, worldwide copyright
license to reproduce, prepare derivative works from, distribute, perform and
display, this Implementers Draft or Final Specification solely for the purposes
of (i) developing specifications, and (ii) implementing Implementers Drafts and
Final Specifications based on such documents, provided that attribution be made
to the OIDF as the source of the material, but that such attribution does not
indicate an endorsement by the OIDF.</t>

<t>The technology described in this specification was made available from
contributions from various sources, including members of the OpenID Foundation
and others. Although the OpenID Foundation has taken steps to help ensure that
the technology is available for distribution, it takes no position regarding the
 validity or scope of any intellectual property or other rights that might be
 claimed to pertain to the implementation or use of the technology described in
 this specification or the extent to which any license under such rights might
 or might not be available; neither does it represent that it has made any
 independent effort to identify any such rights. The OpenID Foundation and the
 contributors to this specification make no (and hereby expressly disclaim any)
 warranties (express, implied, or otherwise), including implied warranties of
 merchantability, non-infringement, fitness for a particular purpose, or title,
 related to this specification, and the entire risk as to implementing this
 specification is assumed by the implementer. The OpenID Intellectual Property
 Rights policy requires contributors to offer a patent promise not to assert
 certain patent claims against other contributors and against implementers. The
 OpenID Foundation invites any interested party to bring to its attention any
 copyrights, patents, patent applications, or other proprietary rights that may
 cover technology that may be required to practice this specification.</t>

</section>
<section anchor="document-history"><name>Document History</name>

<t>[[ To be removed from the final specification ]]</t>

<t>-23</t>

<t><list style="symbols">
  <t>Cleaned up markdown (#91)</t>
  <t>Added language to allow implementations to define their own processing
behavior for SETS (#255)</t>
</list></t>

<t>-20</t>

<t><list style="symbols">
  <t>Clarified that Transmitters may drop events if they aren&#39;t able to deliver
them to the receiver.</t>
  <t>Added examples to demonstrate how &quot;wildcard matching&quot; works in SSF event
complex subjects</t>
  <t>Added an <spanx style="verb">inactivity_timeout</spanx> field to the Transmitter metadata, after which
transmitters may pause, disable or delete inactive streams.</t>
  <t>Clarified that Receivers should validate the <spanx style="verb">aud</spanx> value</t>
  <t>Clarified that Transmitters may include additional fields in SSF events, and
how receivers should interpret them.</t>
  <t>Specified that the poll delivery endpoint should require authorization</t>
  <t>Clarified stream creation behavior for delivery method mismatch and poll
delivery</t>
  <t>Clarified that StreamIDs have to be of the &quot;unreserved characters&quot; character
set from RFC3986</t>
  <t>Clarified the authorization_header requirement for the receiver</t>
  <t>Rearranged the content for easier readability: Eliminated the &quot;Profiles&quot;
section (previous section 10). Created new sections &quot;Events&quot; (new section 4),
and &quot;Event Delivery&quot; (new Section 6). Incorporated text from the erstwhile
&quot;Profiles&quot; section into other sections as appropriate. Fixed references and
titles of examples.</t>
  <t>Added &quot;IP Address&quot; as a subject identifier format</t>
  <t>In Create Stream, specified that description may be included in the response,
and that the <spanx style="verb">endpoint_url</spanx> is specified by the Transmitter in the <spanx style="verb">poll</spanx>
delivery method</t>
  <t>Updated URLs of linked specs and other resources</t>
  <t>Fixed example to have correct format for &quot;reason_admin&quot; and &quot;reason_user&quot;</t>
</list></t>

<t>-03</t>

<t><list style="symbols">
  <t>Removing transmitter supplied fields from stream config PUT and PATCH examples</t>
  <t>Add OPTIONAL/REQUIRED to the fields in the stream configuration</t>
  <t>Add stream_id to the response when getting stream status</t>
  <t>Update subject/sub_id in examples. Fix CAEP example</t>
  <t>Clarify language around sending Stream Updated events</t>
  <t>Add sentence suggesting that Issuer information should be validated by the
Receiver</t>
  <t>Removed cause-time from RISC example</t>
  <t>Fix description of error code for invalid state</t>
  <t>Add SHOULD language about checking the issuer value</t>
  <t>Added language requiring authorization of stream management API</t>
  <t>Added description of <spanx style="verb">txn</spanx> claim</t>
  <t>Added a <spanx style="verb">default_subjects</spanx> field to Transmitter Configuration Metadata
indicating expected subject behavior for new streams</t>
  <t>added txn claims to non-normative SET examples and generic txn callout under
SET Profile section RFC8417</t>
  <t>Editorial: Standardize terms and casing, fix some typos</t>
</list></t>

<t>-02</t>

<t><list style="symbols">
  <t>added spec version to metadata</t>
  <t>Added description as receiver supplied</t>
  <t>added language to make verification and updated events independent of
events_supported</t>
  <t>added top-level sub_id claim. Modified existing language to reflect the use of
the sub_id claim</t>
  <t>updated text to reflect sub_id as a top-level field in verification and stream
updated events</t>
  <t>#46 add stream exists behavior</t>
  <t>update stream exists to 409</t>
  <t>Add &#39;format&#39; to normative examples in CAEP</t>
  <t>Remove &#39;format&#39; from stream config</t>
  <t>Remove subject from stream status (#88)</t>
  <t>Add reason to GET /status response</t>
  <t>Make reason look like an enum in the example to indicate how we expect it to
be used</t>
  <t>Fixes #60 - are subjects required</t>
  <t>Added format field to complex subjects and updated examples (#71)</t>
  <t>Switch stray &#39;204 OK&#39; to read &#39;204 No Content&#39; (#73)</t>
  <t>Change &#39;jwt-id&#39; to &#39;jwt_id&#39; to match style of other subject formats (#63)</t>
  <t>resolving issue #45 added explanatory text to Stream Configuration (#68)</t>
  <t>#28 update delivery method references to URNs (#49)</t>
  <t>Changed jwks_uri from REQUIRED to OPTIONAL (#47)</t>
  <t>Sse to ssf (#43)</t>
  <t>updated SSE to Shared Signals in all files</t>
  <t>changed source format to md</t>
  <t>renamed files to be called sharedsignals instead of SSE. No change to the
content (#41)</t>
  <t>Add stream_id to SSE Framework spec as per Issue 4:
https://github.com/openid/sse/issues/4</t>
  <t>Update README with development instructions and fix error in Makefile</t>
  <t>Added note to PUSH/POLL section about uniqueness requirements for the URLs</t>
  <t>Add explanation about what an Event Stream is</t>
  <t>Change terms to Transmitter-Supplied and Receiver-Supplied</t>
  <t>Pragma is an obsolete HTTP header</t>
  <t>It&#39;s unnecessary to specify the character as UTF-8 in all examples (#10)</t>
  <t>Fix issue #18 by converting saml-assertion-id to saml_assertion_id to
maintain consistent formatting with other subject identifiers (#1)</t>
  <t>updated backward compatibility language</t>
  <t>added section for Transmitter Configuration Metadata RISC compatibility</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="S." surname="Venema" fullname="Steve Venema">
      <organization>ForgeRock</organization>
      <address>
        <email>steve.venema@forgerock.com</email>
      </address>
    </contact>
<t>Steve defined the format field of Complex Subjects</t>

    <contact initials="A." surname="Deshpande" fullname="Apoorva Deshpande">
      <organization>Okta</organization>
      <address>
        <email>apoorva.deshpande@okta.com</email>
      </address>
    </contact>
    <contact initials="S." surname="O'Dell" fullname="Sean O'Dell">
      <organization>The Walt Disney Company</organization>
      <address>
        <email>sean.odentity@disney.com</email>
      </address>
    </contact>
    <contact initials="J." surname="Schreiber" fullname="Jen Schreiber">
      <organization>Workday</organization>
      <address>
        <email>jennifer.winer@workday.com</email>
      </address>
    </contact>
    <contact initials="T." surname="Raibhandare" fullname="Tushar Raibhandare">
      <organization>Google</organization>
      <address>
        <email>traib@google.com</email>
      </address>
    </contact>
    <contact initials="Y." surname="Sarig" fullname="Yair Sarig">
      <organization>Omnissa</organization>
      <address>
        <email>ysarig@omnissa.com</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
r2D8XCk3+VYcrvVKteN+rgti31xGeU8KwXc/LQ+seOcLBqaLNKDj+G3C/L5W
2C2spa1Vmw+LS4ZdtVZqmW+kKNSWFYnyZJN0zmqpP8jsnSRIcSTcy+Hjr7+H
SO1rYgl7UvRdWrz+JYXWy7qReTDo6sBFuzfdeLBDkrRp0VWIKHp7ut9Kr71T
gNONhiSqzhZVnmtXLqUC/jKb+TYHb6Q+KK+/bAGCGwfm5ar25ZLZrzcna/c6
qHnLJQbjlP+Taj+g1xvr7fTS1jCXx27zlQaOr1Tdz1fa1u2dfaXq7r5SRPte
HUF5sR3uSCeO3+wT8IwKdfiVZr8AA8e2TgEn7LgkXxm1DHC7BcAAustX3drQ
RfmVdNeSvhCdjkxz9Pd2Xnb6K+VqBtm/nMJxREqnyVzQbQNMRqXuvNB0jJrh
2aNleqlNApYlSrs1uRYS/XTk2mz6NOdZgi7i42f1o/hNuTBxMd9hM7hb9YU2
ehv+s0n94JcW+zU6d66hbi1Dp19sKfox2irY1YC8ryuJ/doxGcHPC5F1iPzv
TGD9+KCWv4rKgtOoLR9xyan/lMmVn/EDGMitKHqNhmoO9iR6Yr14q+eYybHK
8T0Iaj5ACtpRZa0psKzAlJ9fEk0n1hld6pQ6TUfaSEQfXG8Lo99Gw8fVWE2g
LXm4SZZ+95y+8BUeKYzgFTQAqL/ydQxn1Vy/O9ijeHg51M5axwuBiwJmPA9T
ng+bmup5dbu3JsxKsDqScYxipcWDI56YMRiA7M+OkU3psnWnq/s8i2KHXy4U
uY0kRdr3/C8BdrsPSelMa0lEMEfhyOqF7Q8Xjqs53bNTKyfWFr0+NJPwgZyu
4YbUHiM3tz4kk81iQgzrVDbdXLbsFXZrL4I/J3nwg2PnmF+EYPyVVStROOgw
uDLPAW0AaZac28FSH1tJldiGw9QdTxKKXbgI9ejk+PgxaiTk3CF+TY62sWpH
u8aZ9H1sZE1VVKVMB6Me95W0BGK3GADsKpkFOvuBIog3+TA4ZofrFHUoTNNH
2m7BAlBQCcOA5WFSCkk5Z7WVrrpmApKqoPqZYhhVGemROBfy0eFM+1j4625a
t76lTpjYxQg2DOvDOgWvu1hI5j4OMyuSa4q+2cUtJSxzi1MrQaDN7NRm5xNF
z5NzLnMySCVPv5ZIhJA6eHtEWJzDAV8aRJSFqCaOxpQVocdtJrVQIamnJwyb
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

-->

</rfc>

