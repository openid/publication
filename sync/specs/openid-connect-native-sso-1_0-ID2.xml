<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">
<!--
  NOTE:  This XML file is input used to produce the authoritative copy of an
  OpenID Foundation specification.  The authoritative copy is the HTML output.
  This XML source file is not authoritative.  The statement ipr="none" is
  present only to satisfy the document compilation tool and is not indicative
  of the IPR status of this specification.  The IPR for this specification is
  described in the "Notices" section.  This is a public OpenID Foundation
  document and not a private document, as the private="..." declaration could
  be taken to indicate.
-->
<rfc category="std" docName="openid-connect-native-sso-1_0" ipr="none">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="5" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>

  <front>
    <title abbrev="Mobile App Native SSO">OpenID Connect
    Native SSO for Mobile Apps 1.0 - draft 07</title>

    <author fullname="George F. Fletcher" initials="G.F.F." surname="Fletcher">
      <organization abbrev="Capital One">Capital One</organization>
      <address>
        <email>gffletch@aol.com</email>
      </address>
    </author>

    <date day="16" month="January" year="2025" />

    <workgroup>OpenID Connect Working Group</workgroup>

    <abstract>
      <t>OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
      protocol. It enables Clients to verify the identity of the End-User based
      on the authentication performed by an Authorization Server, as well as to
      obtain basic profile information about the End-User in an interoperable and
      REST-like manner.</t>

      <t>
		  This document describes a mechanism that allows a mobile
		  app to share the identity/authentication obtained by a different mobile
		  app where both apps are written by the same vendor and installed on the
		  same physical device.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">

      <t>
	OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0
	<xref target="RFC6749"/>
	protocol. It enables Clients to verify the identity of the End-User based
	on the authentication performed by an Authorization Server, as well as to
	obtain basic profile information about the End-User in an interoperable and
	REST-like manner.
      </t>
      <t>
		  As the industry moves to a more mobile oriented environment, vendors
		  need a way to share identity across the multiple mobile apps they
		  deploy. While the current OAuth2 best practice allows for SSO across
		  any mobile app by sharing the session cookies in the system browser,
		  this has risks such as a user clearing their system browser of cookies
		  (possibly as requested by a customer care agent) or using private
		  browsing on iOS and Android. On most mobile platforms, mobile apps
		  signed by the same vendor certs can share information via the system
		  "keychain" (Account Manager on Android).
      </t>
		<t>
			The purpose of this specification is to provide a single-sign-on (SSO)
			mechanism across mobile applications installed on the same device
			that addresses the risks highlighted above and that provides
			an equivalent SSO solution to that provided if using a web browser.
		</t>
      <t>
		  This document specifies a new scope, extends the token endpoint and
		  profiles the <xref target="RFC8693">OAuth2 Token
		  Exchange</xref> specification allowing mobile apps to share identity (SSO)
		  between apps produced and signed by the same vendor (i.e. signed with
		  the same vendor certificate).
      </t>

      <section anchor="rnc" title="Requirements Notation and Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>

	<t>
	  In the .txt version of this specification,
	  values are quoted to indicate that they are to be taken literally.
	  When using these values in protocol messages,
	  the quotes MUST NOT be used as part of the value.
	  In the HTML version of this specification,
	  values to be taken literally are indicated by
	  the use of <spanx style="verb">this fixed-width font</spanx>.
	</t>
      </section>

      <section anchor="Terminology" title="Terminology">
        <t>
	  This specification uses the terms
	  "Authorization Server",
	  "Client", "Client Identifier",
	  and "Redirection URI"
	  defined by <xref target="RFC6749">OAuth 2.0</xref>,
	  the term "User Agent" defined by <xref target="RFC7230">RFC 7230</xref>,
			the term "native app" defined by <xref target="RFC8252">RFC 8252</xref>
	  and the terms defined by
	  <xref target="OpenID.Core">OpenID Connect Core 1.0</xref>.
	</t>
	<t>
	  This specification also defines the following terms:
	  <list style="hanging">

	    <t hangText="Device Secret">
	      <vspace/>
	      Opaque value to the client, issued by the Authorization
			Server, that uniquely identifies the device instance
			and provides credentials for the device.
	    </t>

	    <t hangText="Session ID">
	      <vspace/>
	      Identifier for a user's authentication session.
	    </t>

	  </list>
	</t>
      </section>
    </section>

    <section anchor="AbstractFlow" title="Abstract Flow">
		<figure>
			<artwork><![CDATA[
+----------+     +----------+      +-----------+      +------------+
|  Native  |     |  Native  |      |  System   |      |            |
|  App     |     |  App     |      |  Browser  |      |    AS      |
|  #1      |     |  #2      |      |           |      |            |
+----+-----+     +----+-----+      +-----+-----+      +-----+------+
     |                |                  |                  |
     | [1] Start OpenID Connect AuthN    |                  |
     +----------------+----------------> |                  |
     |                |                  | [2] /authorize   |
     |                |                  +----------------> |
     |                |                  |                  |
     |                |                  |   [3] authenticate
     |                |                  | <----------------|
     |                |                  |                  |
     |                |                  | [4] user creds   |
     |                |                  +----------------> |
     |                |                  |                  |
     |                |                  |  [5] callback    |
     |                |                  | <----------------+
     |  [6] callback with code           |                  |
     | <--------------+------------------+                  |
     |                |                  |                  |
     |  [7] exchange code for tokens     |                  |
     +----------------+-----------------------------------> |
     |                |                  |                  |
     |     [8] tokens (including device_secret)             |
     | <--------------+------------------+------------------+
     |                |                  |                  |
     |                |                  |                  |
     |                |                  |                  |
     +                +                  +                  +

			]]></artwork>
		</figure>
		<t>Steps [1] - [8] are the standard OpenID Connect authorization_code
			flow with the following extensions. In step 2, the
			<spanx style="verb">device_sso</spanx>
			scope is specified signifying that the client is requesting a
			<spanx style="verb">device_secret</spanx> to be returned when
			the code is exchanged for tokens.</t>
		<t>After step 8, Native App #1 stores the device_secret and id_token
		   in the shared device storage accessible only to Native App #2.</t>
		<t>Native App #2 uses the stored data from the shared device storage
		   to obtain tokens for the user thus enabling the app to access
		   the user's resources (i.e. SSO)</t>
		<figure>
			<artwork><![CDATA[
+----------+     +----------+      +-----------+      +------------+
|  Native  |     |  Native  |      |  System   |      |            |
|  App     |     |  App     |      |  Browser  |      |    AS      |
|  #1      |     |  #2      |      |           |      |            |
+----+-----+     +----+-----+      +-----+-----+      +-----+------+
     |                |                  |                  |
     |                |                  |                  |
     |                | [9] token exchange                  |
     |                +------------------+----------------> |
     |                |                  |                  |
     |                |                  |                  |
     |                |    [10] refresh, access, [device_secret]
     |                | <----------------+------------------|
     |                |                  |                  |
     |                |                  |                  |
     |                |                  |                  |
     +                +                  +                  +

			]]></artwork>
		</figure>
		<t>Step [9] invokes the /token endpoint with the token exchange profile
			passing the id_token obtained from the shared device storage, the
			client_id and the device secret.</t>
		<t>Step [10] returns the SSO generated refresh and access tokens for
			Native App #2.</t>
	</section>

	  <section anchor="AuthZExtensions" title="Native App Authorization Extensions">
      <t>
		  The following sections describe the extensions required to the standard OpenID
		  Connect Authentication flow which will enable a second mobile app to share the
		  authentication of the first mobile app where both mobile applications are
		  signed by the same vendor certificates.
      </t>
		  <section anchor="AuthZReq" title="Authorization Request">
			  <t>This specification defines a new scope value that is used to convey
				  to the Authorization Server that when the code is exchanged for a
				  token, a new <spanx style="verb">device_secret</spanx> will be
				  returned in addition to the other tokens identified as part of the
				  authorization request.</t>
			  <t>The new scope value is defined as <spanx style="verb">device_sso</spanx>.
				  When this scope is present on the authorization request, and the
				  code is exchanged for tokens, a new device_secret will be returned.</t>
		  </section>
		  <section anchor="DeviceSecret" title="Device Secret">
			  <t>The device secret contains relevant data to the device and the
				  current users authenticated with the device. The device secret
				  is completely opaque to the client and as such the AS MUST
          adequately protect the value such as using a JWE if the AS
          is not maintaining state on the backend.</t>
			  <t>In the context of this extension the device secret may be shared
				  between mobile apps that can obtain the value via the shared
				  security mechanism (e.g. keychain on iOS). If a mobile app
				  requests a device secret via the <spanx style="verb">device_sso</spanx>
				  scope and a <spanx style="verb">device_secret</spanx> exists, then
				  the client MUST provide the <spanx style="verb">device_secret</spanx>
				  on the request to the /token endpoint to exchange
				  code for tokens. The client SHOULD provide the
				  <spanx style="verb">device_secret</spanx> to the /token endpoint
				  during refresh token requests so that the AS may rotate the
          device_secret as necessary.</t>
			  <t>The exact construction of the <spanx style="verb">device_secret</spanx>
				  is out of scope for this specification.</t>
		  </section>
		  <section anchor="TokenReq" title="Token Request">
			  <t>The native app interacts with the token endpoint in order to retrieve the
				  <spanx style="verb">device_secret</spanx> and other tokens. This
			      specification applies to the <spanx style="verb">authorization_code</spanx>
			      and <spanx style="verb">refresh_token</spanx> grant types. Support for other
			      grant types is out of scope for this specification.</t>
			  <t>This specification defines the following additional
				  parameter to the /token endpoint for the <spanx style="verb">authorization_code</spanx>
				  and <spanx style="verb">refresh_token</spanx> grant types:
				  <list style="hanging">

					  <t hangText="device_secret">
						  <vspace/>
						  OPTIONAL. This token SHOULD be provided if the client requested
						  the <spanx style="verb">device_sso</spanx> scope and the client
						  already has a <spanx style="verb">device_secret</spanx>
						  available.
					  </t>
				  </list>
			  </t>
			  <t>
				  In the case of the <spanx style="verb">authorization_code</spanx> grant, the
				  standard process of associating the scopes from the authorization request with
				  the <spanx style="verb">authorization_code</spanx> applies. If
				  <spanx style="verb">device_sso</spanx> is included in the set of requested scopes
				  the Authorization Service MUST return the <spanx style="verb">device_secret</spanx>.
			  </t>
			  <t>
				  In the case of the <spanx style="verb">refresh_token</spanx> grant, the Authorization
				  Server must determine from the optional <spanx style="verb">scope</spanx> parameter or
				  the scopes originally associated with the refresh token if the
				  <spanx style="verb">device_sso</spanx> scope is part of the request. If so, the
				  Authorization Server MUST return the <spanx style="verb">device_secret</spanx>.
			  </t>
		  </section>
		  <section anchor="TokenRsp" title="Token Response">
			  <t>
				  In processing the Token Request, the Authorization Server must determine whether
				  to include a <spanx style="verb">device_secret</spanx> in the response. If a
				  <spanx style="verb">device_secret</spanx> is provided as part of the token request,
				  and the <spanx style="verb">device_secret</spanx> is invalid, then the AS must
				  process the request as if no <spanx style="verb">device_secret</spanx> was specified.
				  Additionally, in the response from the token endpoint, the <spanx style="verb">device_secret</spanx>
				  and the <spanx style="verb">id_token</spanx> MUST both be issued or neither issued.
			  </t>
			  <t>
				  The following sections describe additional claims for the <spanx style="verb">id_token</spanx>
				  and when processing specific grant types.
			  </t>
			  <section anchor="idclaims" title="ID Token Claims">
			  <t>
				  This specification defines additional requirements for the <spanx style="verb">id_token</spanx> issued
			      in conjunction with the <spanx style="verb">device_secret</spanx>. These requirements create a
			      strong binding between the <spanx style="verb">id_token</spanx> representing the logged in
			      user and the <spanx style="verb">device_secret</spanx> representing the user's device and session.
				  <list style="numbers">
					  <t>Add a <spanx style="verb">ds_hash</spanx> claim to the id_token to represent a function of
						  the device_secret.
						  <list style="hanging">
							  <t hangText="ds_hash">
								  <vspace/>
								  REQUIRED. The ds_hash value provides a binding between
								  the id_token and the issued device_secret. The exact
								  binding between the ds_hash and device_secret is not
								  specified by this profile. As this binding is managed
								  solely by the Authorization Server, the AS can choose
								  how to protect the relationship between the id_token
								  and device_secret.
							  </t>
						  </list>
					  </t>
					  <t>Add a session id to the id_token that represents the user's
						  current authentication session.
						  <list style="hanging">
							  <t hangText="sid">
								  <vspace/>
								  REQUIRED. A string that uniquely identifies this user's
								  authentication session. This value can be used in
								  logout flows as well as the flow this spec is describing.
								  For mobile apps where there is no explicit browser
								  authentication this value SHOULD represent the
								  underlying session associated with the refresh_token.
							  </t>
						  </list>
					  </t>
				  </list>
			  </t>
			  <t>Note that the implementation of this spec and the specification of the
				  <spanx style="verb">ds_hash</spanx> and <spanx style="verb">sid</spanx>
				  value MUST NOT leak any data that would provide a
				  security advantage to an attacker who gains access to the id_token.</t>
			  </section>
			  <section anchor="AuthCode" title="Authorization Code Grant">
				  <t>
					  If the authorization request includes the <spanx style="verb">device_sso</spanx>
					  scope, then the Authorization Server MUST issue a <spanx style="verb">device_secret</spanx>
					  and an <spanx style="verb">id_token</spanx> with the additional claims
					  defined above.
				  </t>
			  </section>
			  <section anchor="Refresh" title="Refresh Token Grant">
				  <t>
					  The Authorization Server MUST issue a <spanx style="verb">device_secret</spanx> if
					  the scope parameter or default scopes include a scope of
					  <spanx style="verb">device_sso</spanx> and no existing
					  or valid <spanx style="verb">device_secret</spanx> is provided.
				  </t>
				  <t>
					  If an existing <spanx style="verb">device_secret</spanx> is provided as part of the
					  token request and is still valid, the Authorization Server MAY return a new
					  <spanx style="verb">device_secret</spanx> but doing so is not RECOMMENDED.
				  </t>
				  <t>
					  If the Authorization Server issues a new <spanx style="verb">device_secret</spanx> as
					  part of the token response, then the AS MUST also issue an updated
					  <spanx style="verb">id_token</spanx> with the required claims.
				  </t>
			  </section>
		  </section>
    </section>

	  <section anchor="NativeSSOTX" title="Token Exchange Profile for Native SSO">
		  <t>This section profiles the
			  <xref target="RFC8693">OAuth2 Token Exchange</xref> spec and
			  describes the processing rules used to exchange a previous authentication
			  for new refresh and access tokens requested by a mobile app created by
			  the same vendor as the first mobile app and both apps signed by the
			  same developer certificate.</t>
		  <section anchor="TXProfile" title="OAuth2 Token Exchange Profile">
			  <t>
				  The Authorization Server requires the <spanx style="verb">client_id</spanx> of
				  the requesting OAuth client. The <spanx style="verb">client_id</spanx> value can be
				  obtained from the parameter defined by <xref target="RFC6749">OAuth 2.0</xref> or via
				  client authentication methods that identify the <spanx style="verb">client_id</spanx>.
				  Confidential clients MUST use client authentication with this profile.
			  </t>
			  <t><xref target="RFC6749">OAuth 2.0</xref> defines:
				  <list style="hanging">
					  <t hangText="client_id">
						  <vspace/>
						  OPTIONAL. The client_id value of the requesting OAuth client. This parameter
						  is REQUIRED if the client is a <spanx style="verb">public</spanx> client.
					  </t>
				  </list>
			  </t>
			  <t>Additionally, this profile defines the use of the following token exchange parameters:
				  <list style="hanging">
					  <t hangText="grant_type">
						  <vspace/>
						  REQUIRED. The value MUST be urn:ietf:params:oauth:grant-type:token-exchange
					  </t>
					  <t hangText="audience">
						  <vspace/>
						  REQUIRED. This parameter defines the logical purview of the returned tokens.
						  For the purposes of this profile, this value MUST be the issuer URI for
						  the OpenID Provider that issued the id_token used in this profile.
					  </t>
					  <t hangText="subject_token">
						  <vspace/>
						  REQUIRED. This parameter MUST contain the id_token obtained by the first
						  native app. The id_token is used in the same manner as id_token_hint to
						  identify the user to SSO into the invoking native app.
					  </t>
					  <t hangText="subject_token_type">
						  <vspace/>
						  REQUIRED. This parameter MUST contain the
						  value: urn:ietf:params:oauth:token-type:id_token
					  </t>
					  <t hangText="actor_token">
						  <vspace/>
						  REQUIRED. This value defines the actor making the request which in this
						  case is the device_secret issued to the device of the native
						  application making the request. The device_secret MUST be presented per
						  the definition of the urn:openid:params:token-type:device-secret
						  token identifier described below.
					  </t>
					  <t hangText="actor_token_type">
						  <vspace/>
						  REQUIRED. This value MUST be: urn:openid:params:token-type:device-secret
					  </t>
					  <t hangText="scope">
						  <vspace/>
						  OPTIONAL. The scopes required by the requesting native application. When present,
						  it MUST include the <spanx style="verb">openid</spanx> scope value as one of the
						  provided values.
					  </t>
					  <t hangText="requested_token_type">
						  <vspace/>
						  OPTIONAL. The desired token(s) to be returned. If no requested_token_type
                          is defined, it is up to the AS to return the appropriate tokens for the
                          requesting client. The full set of possible requested_token_type value
                          is out of scope for this specification.
					  </t>
				  </list>
			  </t>
			  <t>This profile also defines the following token type identifier:
				  <list style="hanging">
				  <t hangText="urn:openid:params:token-type:device-secret">
					  <vspace/>
					  This token type identifier is used to describe the device_secret specified
					  in the actor_token parameter.
				  </t>
				  </list>
			  </t>
		  </section>
		  <section anchor="TXReq" title="Token Exchange Request">
			  <t>When a mobile app wants to request native SSO (i.e. obtain refresh and access
				  tokens for an already signed in user) it makes a standard OAuth2 /token
				  endpoint request following the profile for Token Exchange defined above.</t>
        <t>The following is a non-normative example</t>
			  <figure><artwork><![CDATA[
    POST /token HTTP/1.1
    Host: as.example.com
    ...
    client_id=cid_235saw4r4
    &grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken-exchange
    &audience=https%3A%3F%3Flogin.example.net&subject_token=<id_token>
    &subject_token_type=urn%3Aietf%3Aparams%3Aoauth%3Atoken-type%3Aid-token
    &actor_token=95twdf3w4y6wvftw35634t
    &actor_token_type=urn%3Aopenid%3Aparams%3Atoken-type%3Adevice-secret
              ]]></artwork></figure>
			  <t>
				  The <spanx style="verb">client_id</spanx> in this request is sent via the
				  <spanx style="verb">client_id</spanx> parameter. The
				  <spanx style="verb">client_id</spanx> may also be provided via standard
				  client authentication methods.
			  </t>
		  </section>
		  <section anchor="TXRules" title="Native SSO Processing Rules">
			  <t>When the authorization server receives a request at the token endpoint
				  conforming to this profile it MUST perform the following checks before
				  issuing any tokens:
				  <list style="numbers">
					  <t>Validate the device_secret to ensure the token is still valid. The
						  format of this secret is defined by the Authorization server and
						  is out of scope for this specification.</t>
					  <t>Verify the id_token for integrity protection by validating the
					     signature of the id_token JWT.</t>
					  <t>Verify the binding between the id_token and the device_secret
						  by validating the <spanx style="verb">ds_hash</spanx> value obtained
						  from the <spanx style="verb">id_token</spanx> matches the
						  <spanx style="verb">device_secret</spanx> provided in the
						  <spanx style="verb">actor_token</spanx> parameter.
					  </t>
					  <t>Verify that the session id in the id_token (sid claim) is still
						  valid. If the session is no longer valid, the AS MUST return an
						  error of invalid_grant. Note that in the case of a refresh_tokens
              issued with an offline_scope the 'sid' value SHOULD represent the
              offline "session" such that if the original refresh_token is revoked
              the 'ds_hash' value in the id_token is no longer valid.
            </t>
					  <t>Validate that the client requesting native SSO is authorized to
						  do so. The AS SHOULD maintain a list of client_ids that can share
						  user authentications. For example, the AS MAY take the 'aud'
						  claim from the id_token and the client_id from the token request
						  and ensures that both client_ids are allowed to share user
						  authentications.</t>
					  <t>The AS SHOULD verify that the scopes requested by the client in
						  the token request (either default scopes or explicitly specified
						  in the optional scope parameter) do NOT require explicit user
						  consent. If any requested scopes require explicit user consent
						  the AS SHOULD fail the request and return an error of
						  <spanx style="verb">interaction_required</spanx>.</t>
				  </list>
			  </t>
			  <t>Based on the AS definition of the device_secret, the AS may perform
				  additional checks to ensure the security of the request. Provided the
				  above criteria is met, the AS will issue a normal Token Response
				  object containing a refresh_token, access_token and id_token issued
				  to the client_id of the mobile app making the request. The session
				  associated with the new refresh_token SHOULD be the same as that
				  used to verify the validity of the SSO exchange. If that session
				  expires, all refresh_tokens associated with it MUST be invalidated.</t>
		  </section>
		  <section anchor="TXRsp" title="Token Exchange Response">
			  <t>The Token Exchange response for this profile has the following characteristics:
				  <list style="hanging">
					  <t hangText="access_token">
						  <vspace/>
						  REQUIRED. This response field contains the access token issued to
						  the mobile client identified by the client_id sent in the
						  Authorization header.
					  </t>
					  <t hangText="issued_token_type">
						  <vspace/>
						  REQUIRED. This value of this parameter MUST be:
						  urn:ietf:params:oauth:token-type:access_token
					  </t>
					  <t hangText="token_type">
						  <vspace/>
						  REQUIRED. The value of this parameter MUST be
						  <spanx style="verb">bearer</spanx>.
					  </t>
					  <t hangText="expires_in">
						  <vspace/>
						  RECOMMENDED. Identifies when the access_token expires.
					  </t>
					  <t hangText="scope">
						  <vspace/>
						  OPTIONAL. Follows the token exchange spec definition.
					  </t>
					  <t hangText="refresh_token">
						  <vspace/>
						  OPTIONAL. By default the AS should return a refresh_token that
                          the mobile app can use to obtain additional access_tokens when
                          the access_token expires.
					  </t>
					  <t hangText="id_token">
						  <vspace/>
						  OPTIONAL. By default the AS should return an id_token that provides
                          the mobile app with an identity assertion about the user.
					  </t>
                      <t hangText="device_secret">
						  <vspace/>
						  OPTIONAL. The AS MAY return an updated
						  device_secret in the response.
					  </t>
				  </list>
			  </t>
			  <t>
				  In the case that the AS requires the user to interact with the AS directly, for example to
				  obtain the user's consent for a particular requested scope value, the AS MUST return the
				  OpenID Connect defined error of <spanx style="verb">interaction_required</spanx>. This
				  instructs the client to start an authorization request with the AS via the standard web
				  based flows, as described in <xref target="AuthZReq"/>.
			  </t>
			  <t>In the case of any errors, the AS MUST return a valid OAuth2 Error response
				  as described in Section 2.2.2 of the Token Exchange spec.</t>
        <t>The following is a non-normative example</t>
			  <figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store

    {
      "access_token":"2YotnFZFEjr1zCsicMWpAA",
      "issued_token_type": "urn:ietf:params:oauth:token-type:access_token",
      "token_type":"Bearer",
      "expires_in":3600,
      "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
      "id_token":"<id_token>",
      "device_secret":"casdfgarfgasdfg"
    }
              ]]></artwork></figure>
		  </section>
	  </section>

	  <section anchor="discovery" title="Discovery Metadata">
		  <t>
			  This specification extends the OpenID Connect Discovery Metadata
			  <xref target="OpenID.Discovery">Section 3</xref> and defines the following:

			  <list style="hanging">

				  <t hangText="native_sso_supported">
					  <vspace/>
					  OPTIONAL. A boolean value of <spanx style="verb">true</spanx> identifying that the AS
					  supports this OpenID Connect specification.
				  </t>
			  </list>
		  </t>
		  <t>
			  This metadata parameter is OPTIONAL in the context of the OpenID Provider
			  not supporting the Native SSO for Mobile Apps specification. If omitted,
			  the Relying Party SHOULD assume that this specification is not
			  supported. The OpenID Provider MAY provide this metadata parameter even
			  if it doesn't support the Native SSO for Mobile Apps specification by
			  including the <spanx style="verb">native_sso_support</spanx> parameter with a
			  value of <spanx style="verb">false</spanx>.
		  </t>
	  </section>

    <section anchor="Security" title="Security Considerations">
      <section anchor="dsp" title="Device Secret Protection">
		  <t>
		  Sufficient care must be made to protect the <spanx style="verb">device_secret</spanx>.
		  The device secret SHOULD be encrypted by the Authorization Service and periodically
		  refreshed via the mechanisms described in this specification.
		  </t>
		  </section>
		<section anchor="cds" title="Cross-Device SSO">
			<t>
				If it is possible to move correctly bound <spanx style="verb">device_secret</spanx>
				and <spanx style="verb">id_token</spanx> to a separate device, that device can obtain
				the user's authentication state on the new device. An implementation of this
				specification SHOULD use best efforts to bind the device_secret to the device instance
				to prevent exfiltration of the <spanx style="verb">device_secret</spanx> and
				<spanx style="verb">id_token</spanx> from the device.
			</t>
		</section>
        <section anchor="idt" title="id_token usage">
			<t>
			Use of the id_token in this specification takes some liberties with id_token validation.
			For instance, the <spanx style="verb">aud</spanx> claim normally identifies the client
			receiving the id_token and not the authorization server that issued the id_token.
			Additionally, the id_token may have expired at the time of use designated by this specification.
			</t>
		</section>
		<section anchor="sso" title="User Identity across SSO events">
			<t>
				This specification does not ensure that the user (human) who logs into mobile app 1
				is the same user who is SSO'd into mobile app 2. This is equivalent to web based
				SSO where once the browser instance is logged in, the SSO event to a new endpoint
				assumes the user identity is the same. For this specification, if the destination
				mobile app requires a user identity check due to risk or some other reason, how that
				mobile app verifies the user is out of scope for this specification.
			</t>
		</section>
    </section>

	  <section anchor="IANA" title="IANA Considerations">

		  <section anchor="OAuthParams" title="OAuth Parameters Registry">

			  <t>
				  This specification registers the following parameter in the IANA
				  "OAuth Parameters" registry <xref target="IANA.OAuth.Parameters"/>
				  established by <xref target="RFC6749">RFC 6749</xref>.
			  </t>

			  <section anchor='ParametersContents' title='Registry Contents'>
				  <t> <?rfc subcompact="yes"?>
					  <list style="symbols">
						  <t>Parameter name: <spanx style="verb">device_secret</spanx></t>

						  <t>Parameter usage location: Authorization Response,
							  Access Token Request, Access Token Response</t>

						  <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

						  <t>Specification document(s): <xref target="TokenReq"/> of this document</t>

						  <t>Related information: None</t>
					  </list>
				  </t>

			  </section>
			  <?rfc subcompact="no"?>
		  </section>

		  <section anchor="ASMetadataRegistry" title="OAuth Authorization Server Metadata Registry">
			  <t>
				  This specification registers the following metadata name in the
				  IANA "OAuth Authorization Server Metadata" registry <xref target="IANA.OAuth.Parameters"/>
				  established by <xref target="RFC8414"/>.
			  </t>

			  <section anchor='MetadataContents' title='Registry Contents'>
				  <t>
					  <?rfc subcompact="yes"?>
					  <list style='symbols'>
						  <t>
							  Metadata Name: <spanx style="verb">native_sso_supported</spanx>
						  </t>
						  <t>
							  Metadata Description:
							  A boolean value of True identifying that the OpenID Provider
							  supports this specification.
						  </t>
						  <t>
							  Change Controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net
						  </t>
						  <t>
							  Specification Document(s): <xref target="discovery"/> of this document
						  </t>
					  </list>
				  </t>
			  </section>
			  <?rfc subcompact="no"?>

		  </section>

	  </section>
  </middle>

  <back>
    <references title="Normative References">
		<?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119"?>
		<?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749"?>
        <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230"?>
		<?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252"?>
		<?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414"?>
		<?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8693"?>

      <reference anchor="OpenID.Core" target="https://openid.net/specs/openid-connect-core-1_0.html">
	<front>
	  <title>OpenID Connect Core 1.0 incorporating errata set 2</title>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NAT.Consulting (was at NRI)">NAT.Consulting</organization>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Yubico (was at Ping Identity)">Yubico</organization>
	  </author>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Self-Issued Consulting (was at Microsoft)">Self-Issued Consulting</organization>
	  </author>

	  <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
	    <organization abbrev="Google">Google</organization>
	  </author>

	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Disney (was at Salesforce)">Disney</organization>
	  </author>

	  <date day="15" month="December" year="2023"/>
	</front>
      </reference>

      <reference anchor="OpenID.Discovery" target="https://openid.net/specs/openid-connect-discovery-1_0.html">
	<front>
	  <title>OpenID Connect Discovery 1.0 incorporating errata set 2</title>
	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NAT.Consulting (was at NRI)">NAT.Consulting</organization>
	  </author>
	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Yubico (was at Ping Identity)">Yubico</organization>
	  </author>
	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization abbrev="Self-Issued Consulting (was at Microsoft)">Self-Issued Consulting</organization>
	  </author>
	  <author fullname="Edmund Jay" initials="E." surname="Jay">
	    <organization abbrev="Illumila">Illumila</organization>
	  </author>
	  <date day="15" month="December" year="2023"/>
	</front>
      </reference>

      <reference anchor="IANA.OAuth.Parameters" target="http://www.iana.org/assignments/oauth-parameters">
        <front>
          <title>OAuth Parameters</title>
          <author>
            <organization>IANA</organization>
          </author>
	  <date/>
        </front>
      </reference>

    </references>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
	The OpenID Community would like to thank the following people for
	their contributions to this specification:
      </t>
      <t>
        <list style="empty">
			<t>Filip Skokan</t>
			<t>Joseph Heenan</t>
			<t>Nat Sakimura</t>
			<t>Naveen CM</t>
            <t>Nov Matake</t>
			<t>Vivek Shankar</t>
			<t>Vladimir Dzhuvinov</t>
        </list>
      </t>
    </section>

    <section anchor="Notices" title="Notices">
      <t>Copyright (c) 2025 The OpenID Foundation.</t>
      <t>
	The OpenID Foundation (OIDF) grants to any Contributor, developer,
	implementer, or other interested party a non-exclusive, royalty free,
	worldwide copyright license to reproduce, prepare derivative works from,
	distribute, perform and display, this Implementers Draft or
	Final Specification solely for the purposes of (i) developing
	specifications, and (ii) implementing Implementers Drafts and
	Final Specifications based on such documents, provided that attribution
	be made to the OIDF as the source of the material, but that such attribution
	does not indicate an endorsement by the OIDF.
      </t>
      <t>
	The technology described in this specification was
	made available from contributions from various sources,
	including members of the OpenID Foundation and others.
	Although the OpenID Foundation has taken steps to help ensure
	that the technology is available for distribution, it takes
	no position regarding the validity or scope of any intellectual
	property or other rights that might be claimed to pertain to
	the implementation or use of the technology described in
	this specification or the extent to which any license under
	such rights might or might not be available; neither does it
	represent that it has made any independent effort to identify
	any such rights.  The OpenID Foundation and the contributors
	to this specification make no (and hereby expressly disclaim any)
	warranties (express, implied, or otherwise), including implied
	warranties of merchantability, non-infringement, fitness for
	a particular purpose, or title, related to this specification,
	and the entire risk as to implementing this specification is
	assumed by the implementer.  The OpenID Intellectual
	Property Rights policy requires contributors to offer
	a patent promise not to assert certain patent claims against
	other contributors and against implementers.  The OpenID Foundation invites
	any interested party to bring to its attention any copyrights,
	patents, patent applications, or other proprietary rights
	that may cover technology that may be required to practice
	this specification.
      </t>
    </section>

    <section anchor="History" title="Document History">
      <t>[[ To be removed from the final specification ]]</t>

		<t>
			-07
			<list style="symbols">
				<t>
					Updated the draft version and tweaked some language based on updates from
					Vladimir Dzhuvinov. Added clarity around the use of the device_sso scope value, fixed
					a typo and added clarity for how the OP signals the app that user interaction is
					required.
				</t>
				<t>
					Changed the urn:x-oath:params:* constants to urn:openid:params:* strings.
					This is a normative change.
				</t>
				<t>
					Refactored section 3.3 and 3.4 to address feedback from issues
					#2172, #2170, #2169, #2168. Clarifies processing of scopes and token
					responses depending on the specific OAuth grant.
				</t>
				<t>
					Made some miscellaneous editor changes.
				</t>
			</list>
		</t>

		<t>
	-06
	<list style="symbols">
	  <t>
	    Updated the draft version and tweaked some language based on updates from
	    Vivek Shankar.
	  </t>
	  <t>
	    Added Notices section.
	  </t>
	</list>
      </t>

      <t>
	-05
	<list style="symbols">
	  <t>
	    Updated the draft version and tweaked some language based on updates from
	    Naveen CM.
	  </t>
	</list>
      </t>

      <t>
	-04
	<list style="symbols">
	  <t>
	    Normative change to verify the id_token plus other edits based on feedback
	    from Joseph Heenan.
	  </t>
	  <t>
	    Also updated Security Considerations section and general cleanup.
	  </t>
	</list>
      </t>

      <t>
	-03
	<list style="symbols">
	  <t>
	    Applied updates from the community.
	  </t>
	  <t>
	    Removed non-relevant IANA claims section.
	  </t>
	</list>
      </t>

      <t>
	-00
	<list style="symbols">
	  <t>
	    Initial Draft.
	  </t>

	</list>
      </t>

    </section>
  </back>
</rfc>
