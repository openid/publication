<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.26 (Ruby 3.1.6) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="none" docName="authorization-api-1_0" category="std" consensus="true" submissionType="IETF" xml:lang="en">
  <front>
    <title abbrev="azapi">Authorization API 1.0 â€“ draft 03</title>

    <author initials="O." surname="Gazitt" fullname="Omri Gazitt" role="editor">
      <organization>Aserto</organization>
      <address>
        <email>omri@aserto.com</email>
      </address>
    </author>
    <author initials="D." surname="Brossard" fullname="David Brossard" role="editor">
      <organization>Axiomatics</organization>
      <address>
        <email>david.brossard@axiomatics.com</email>
      </address>
    </author>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale" role="editor">
      <organization>SGNL</organization>
      <address>
        <email>atul@sgnl.ai</email>
      </address>
    </author>

    <date year="2025" month="March" day="18"/>

    
    <workgroup>OpenID AuthZEN</workgroup>
    <keyword>Authorization</keyword> <keyword>Access Management</keyword> <keyword>XACML</keyword> <keyword>OPA</keyword> <keyword>Topaz</keyword> <keyword>Cedar</keyword> <keyword>PDP</keyword> <keyword>PEP</keyword> <keyword>ALFA</keyword>

    <abstract>


<?line 71?>

<t>The Authorization API enables Policy Decision Points (PDPs) and Policy Enforcement Points (PEPs) to communicate authorization requests and decisions to each other without requiring knowledge of each other's inner workings. The Authorization API is served by the PDP and is called by the PEP. The Authorization API includes an Evaluation endpoint, which provides specific access decisions. Other endpoints may be added in the future for other scenarios, including searching for subjects, resources or actions.</t>



    </abstract>



  </front>

  <middle>


<?line 75?>

<section anchor="introduction"><name>Introduction</name>
<t>Computational services often implement access control within their components by separating Policy Decision Points (PDPs) from Policy Enforcement Points (PEPs). PDPs and PEPs are defined in XACML (<xref target="XACML"/>) and NIST's ABAC SP 800-162. Communication between PDPs and PEPs follows similar patterns across different software and services that require or provide authorization information. The Authorization API described in this document enables different providers to offer PDP and PEP capabilities without having to bind themselves to one particular implementation of a PDP or PEP.</t>

</section>
<section anchor="model"><name>Model</name>
<t>The Authorization API is a transport-agnostic API published by the PDP, to which the PEP acts as a client. Possible bindings of this specification, such as HTTPS or gRPC, are described in Transport (<xref target="transport"/>).</t>

<t>Authorization for the Authorization API itself is out of scope for this document, since authorization for APIs is well-documented elsewhere. For example, the Authorization API's HTTPS binding MAY support authorization using an <spanx style="verb">Authorization</spanx> header, using a <spanx style="verb">basic</spanx> or <spanx style="verb">bearer</spanx> token. Support for OAuth 2.0 (<xref target="RFC6749"/>) is RECOMMENDED.</t>

</section>
<section anchor="features"><name>Features</name>
<t>The core feature of the Authorization API is the Access Evaluation API, which enables a PEP to find out if a specific request can be permitted to access a specific resource. The following are non-normative examples:</t>

<t><list style="symbols">
  <t>Can Alice view document #123?</t>
  <t>Can Alice view document #123 at 16:30 on Tuesday, June 11, 2024?</t>
  <t>Can a manager print?</t>
</list></t>

</section>
<section anchor="api-version"><name>API Version</name>
<t>This document describes the API version 1.0. Any updates to this API through subsequent revisions of this document or other documents MAY augment this API, but MUST NOT modify the API described here. Augmentation MAY include additional API methods or additional parameters to existing API methods, additional authorization mechanisms, or additional optional headers in API requests. All API methods for version 1.0 MUST be immediately preceded by the relative URL path <spanx style="verb">/v1/</spanx>.</t>

</section>
<section anchor="information-model"><name>Information Model</name>
<t>The information model for requests and responses include the following entities: Subject, Action, Resource, Context, and Decision. These are all defined below.</t>

<section anchor="subject"><name>Subject</name>
<t>A Subject is the user or robotic principal about whom the Authorization API is being invoked. The Subject may be requesting access at the time the Authorization API is invoked.</t>

<t>A Subject is a JSON (<xref target="RFC8259"/>) object that contains two REQUIRED keys, <spanx style="verb">type</spanx> and <spanx style="verb">id</spanx>, which have a value typed <spanx style="verb">string</spanx>, and an OPTIONAL key, <spanx style="verb">properties</spanx>, with a value of a JSON object.</t>

<dl>
  <dt><spanx style="verb">type</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value that specifies the type of the Subject.</t>
  </dd>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value containing the unique identifier of the Subject, scoped to the <spanx style="verb">type</spanx>.</t>
  </dd>
  <dt><spanx style="verb">properties</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A JSON object containing any number of key-value pairs, which can be used to express additional properties of a Subject.</t>
  </dd>
</dl>

<t>The following is a non-normative example of a Subject:</t>

<figure title="Example Subject" anchor="subject-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com"
}
]]></sourcecode></figure>

<section anchor="subject-properties"><name>Subject Properties</name>
<t>Many authorization systems are stateless, and expect the client (PEP) to pass in any properties or attributes that are expected to be used in the evaluation of the authorization policy. To satisfy this requirement, Subjects MAY include zero or more additional attributes as key-value pairs, under the <spanx style="verb">properties</spanx> object.</t>

<t>An attribute can be single-valued or multi-valued. It can be a primitive type (string, boolean, number) or a complex type such as a JSON object or JSON array.</t>

<t>The following is a non-normative example of a Subject which adds a string-valued <spanx style="verb">department</spanx> property:</t>

<figure title="Example Subject with Additional Property" anchor="subject-department-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "properties": {
    "department": "Sales"
  }
}
]]></sourcecode></figure>

<t>To increase interoperability, a few common properties are specified below:</t>

<section anchor="subject-ip-address"><name>IP Address</name>
<t>The IP Address of the Subject, identified by an <spanx style="verb">ip_address</spanx> field, whose value is a textual representation of an IP Address, as defined in <spanx style="verb">Textual Conventions for Internet Network Addresses</spanx> <xref target="RFC4001"/>.</t>

<t>The following is a non-normative example of a subject which adds the <spanx style="verb">ip_address</spanx> property:</t>

<figure title="Example Subject with IP Address" anchor="subject-ip-address-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "properties": {
    "department": "Sales",
    "ip_address": "172.217.22.14"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="subject-device-id"><name>Device ID</name>
<t>The Device Identifier of the Subject, identified by a <spanx style="verb">device_id</spanx> field, whose value is a string representation of the device identifier.</t>

<t>The following is a non-normative example of a subject which adds the <spanx style="verb">device_id</spanx> property:</t>

<figure title="Example Subject with Device ID" anchor="subject-device-id-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "properties": {
    "department": "Sales",
    "ip_address": "172.217.22.14",
    "device_id": "8:65:ee:17:7e:0b"
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="resource"><name>Resource</name>
<t>A Resource is the target of an access request. It is a JSON (<xref target="RFC8259"/>) object that is constructed similar to a Subject entity. It has the follow keys:</t>

<dl>
  <dt><spanx style="verb">type</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value that specifies the type of the Resource.</t>
  </dd>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value containing the unique identifier of the Resource, scoped to the <spanx style="verb">type</spanx>.</t>
  </dd>
  <dt><spanx style="verb">properties</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A JSON object containing any number of key-value pairs, which can be used to express additional properties of a Resource.</t>
  </dd>
</dl>

<section anchor="examples-non-normative"><name>Examples (non-normative)</name>

<t>The following is a non-normative example of a Resource with a <spanx style="verb">type</spanx> and a simple <spanx style="verb">id</spanx>:</t>

<figure title="Example Resource" anchor="resource-example"><sourcecode type="json"><![CDATA[
{
  "type": "book",
  "id": "123"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of a Resource containing a <spanx style="verb">library_record</spanx> property, that is itself a JSON object:</t>

<figure title="Example Resource with Additional Property" anchor="resource-example-structured"><sourcecode type="json"><![CDATA[
{
  "type": "book",
  "id": "123",
  "properties": {
    "library_record":{
      "title": "AuthZEN in Action",
      "isbn": "978-0593383322"
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="action"><name>Action</name>
<t>An Action is the type of access that the requester intends to perform.</t>

<t>Action is a JSON (<xref target="RFC8259"/>) object that contains a REQUIRED <spanx style="verb">name</spanx> key with a <spanx style="verb">string</spanx> value, and an OPTIONAL <spanx style="verb">properties</spanx> key with a JSON object value.</t>

<dl>
  <dt><spanx style="verb">name</spanx>:</dt>
  <dd>
    <t>REQUIRED. The name of the Action.</t>
  </dd>
  <dt><spanx style="verb">properties</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A JSON object containing any number of key-value pairs, which can be used to express additional properties of an Action.</t>
  </dd>
</dl>

<t>The following is a non-normative example of an action:</t>

<figure title="Example Action" anchor="action-example"><sourcecode type="json"><![CDATA[
{
  "name": "can_read"
}
]]></sourcecode></figure>

</section>
<section anchor="context"><name>Context</name>
<t>The Context object is a set of attributes that represent environmental or contextual data about the request such as time of day. It is a JSON (<xref target="RFC8259"/>) object.</t>

<t>The following is a non-normative example of a Context:</t>

<figure title="Example Context" anchor="context-example"><sourcecode type="json"><![CDATA[
{
  "time": "1985-10-26T01:22-07:00"
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="access-evaluation-api"><name>Access Evaluation API</name>

<t>The Access Evaluation API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for executing a single access evaluation.</t>

<section anchor="access-evaluation-request"><name>The Access Evaluation API Request</name>
<t>The Access Evaluation request is a 4-tuple constructed of the four previously defined entities:</t>

<dl>
  <dt><spanx style="verb">subject</spanx>:</dt>
  <dd>
    <t>REQUIRED. The subject (or principal) of type Subject</t>
  </dd>
  <dt><spanx style="verb">action</spanx>:</dt>
  <dd>
    <t>REQUIRED. The action (or verb) of type Action.</t>
  </dd>
  <dt><spanx style="verb">resource</spanx>:</dt>
  <dd>
    <t>REQUIRED. The resource of type Resource.</t>
  </dd>
  <dt><spanx style="verb">context</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The context (or environment) of type Context.</t>
  </dd>
</dl>

<section anchor="example-non-normative"><name>Example (non-normative)</name>

<figure title="Example Request" anchor="request-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "action": {
    "name": "can_read",
    "properties": {
      "method": "GET"
    }
  },
  "context": {
    "time": "1985-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="access-evaluation-response"><name>The Access Evaluation API Response</name>
<t>The simplest form of a response is simply a boolean representing a Decision, indicated by a <spanx style="verb">"decision"</spanx> field.</t>

<dl>
  <dt><spanx style="verb">decision</spanx>:</dt>
  <dd>
    <t>REQUIRED. A boolean value that specifies whether the Decision is to allow or deny the operation.</t>
  </dd>
</dl>

<t>In this specification, assuming the evaluation was successful, there are only 2 possible responses:</t>

<t><list style="symbols">
  <t><spanx style="verb">true</spanx>: The access request is permitted to go forward.</t>
  <t><spanx style="verb">false</spanx>: The access request is denied and MUST NOT be permitted to go forward.</t>
</list></t>

<t>The response object MUST contain this boolean-valued Decision key.</t>

<section anchor="decision"><name>Access Evaluation Decision</name>
<t>The following is a non-normative example of a simple Decision:</t>

<figure title="Example Decision" anchor="decision-example"><sourcecode type="json"><![CDATA[
{
  "decision": true
}
]]></sourcecode></figure>

</section>
<section anchor="additional-context-in-a-response"><name>Additional Context in a Response</name>
<t>In addition to a <spanx style="verb">"decision"</spanx>, a response may contain a <spanx style="verb">"context"</spanx> field which can be any JSON object.  This context can convey additional information that can be used by the PEP as part of the decision evaluation process. Examples include:</t>

<t><list style="symbols">
  <t>XACML's notion of "advice" and "obligations"</t>
  <t>Hints for rendering UI state</t>
  <t>Instructions for step-up authentication</t>
</list></t>

</section>
<section anchor="example-context"><name>Example Context</name>
<t>An implementation MAY follow a structured approach to <spanx style="verb">"context"</spanx>, in which it presents the reasons that an authorization request failed.</t>

<t><list style="symbols">
  <t>A list of identifiers representing the items (policies, graph nodes, tuples) that were used in the decision-making process.</t>
  <t>A list of reasons as to why access is permitted or denied.</t>
</list></t>

<section anchor="reasons"><name>Reasons</name>
<t>Reasons MAY be provided by the PDP.</t>

<section anchor="reason-field"><name>Reason Field</name>
<t>A Reason Field is a JSON object that has keys and values of type <spanx style="verb">string</spanx>. The following are non-normative examples of Reason Field objects:</t>

<figure title="Example Reason" anchor="reason-example"><sourcecode type="json"><![CDATA[
{
  "en": "location restriction violation"
}
]]></sourcecode></figure>

</section>
<section anchor="reason-object"><name>Reason Object</name>
<t>A Reason Object specifies a particular reason. It is a JSON object that has the following fields:</t>

<dl>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A string value that specifies the reason within the scope of a particular response.</t>
  </dd>
  <dt><spanx style="verb">reason_admin</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The reason, which MUST NOT be shared with the user, but useful for administrative purposes that indicates why the access was denied. The value of this field is a Reason Field object (<xref target="reason-field"/>).</t>
  </dd>
  <dt><spanx style="verb">reason_user</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The reason, which MAY be shared with the user that indicates why the access was denied. The value of this field is a Reason Field object (<xref target="reason-field"/>).</t>
  </dd>
</dl>

<t>The following is a non-normative example of a Reason Object:</t>

<figure title="Example of a Reason Object" anchor="example-reason-object"><sourcecode type="json"><![CDATA[
{
  "id": "0",
  "reason_admin": {
    "en": "Request failed policy C076E82F"
  },
  "reason_user": {
    "en-403": "Insufficient privileges. Contact your administrator",
    "es-403": "Privilegios insuficientes. PÃ³ngase en contacto con su administrador"
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="sample-response-with-additional-context-non-normative"><name>Sample Response with additional context (non-normative)</name>

<figure title="Example Response with Context" anchor="response-with-context-example"><sourcecode type="json"><![CDATA[
{
  "decision": true,
  "context": {
    "id": "0",
    "reason_admin": {
      "en": "Request failed policy C076E82F"
    },
    "reason_user": {
      "en-403": "Insufficient privileges. Contact your administrator",
      "es-403": "Privilegios insuficientes. PÃ³ngase en contacto con su administrador"
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="access-evaluations-api"><name>Access Evaluations API</name>

<t>The Access Evaluations API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for evaluating multiple access evaluations within the scope of a single message exchange (also known as "boxcarring" requests).</t>

<section anchor="access-evaluations-request"><name>The Access Evaluations API Request</name>

<t>The Access Evaluation API Request builds on the information model presented in <xref target="information-model"/> and the 4-tuple defined in the Access Evaluation Request (<xref target="access-evaluation-request"/>).</t>

<t>To send multiple access evaluation requests in a single message, the caller MAY add an <spanx style="verb">evaluations</spanx> key to the request. The <spanx style="verb">evaluations</spanx> key is an array which contains a list of JSON objects, each typed as the 4-tuple as defined in the Access Evaluation Request (<xref target="access-evaluation-request"/>), and specifying a discrete request.</t>

<t>If an <spanx style="verb">evaluations</spanx> array is NOT present, the Access Evaluations Request behaves in a backwards-compatible manner with the (single) Access Evaluation API Request (<xref target="access-evaluation-request"/>).</t>

<t>If an <spanx style="verb">evaluations</spanx> array IS present and contains one or more objects, these form distinct requests that the PDP will evaluate. These requests are independent from each other, and may be executed sequentially or in parallel, left to the discretion of each implementation.</t>

<t>If the <spanx style="verb">evaluations</spanx> array IS present and contains one or more objects, the top-level <spanx style="verb">subject</spanx>, <spanx style="verb">action</spanx>, <spanx style="verb">resource</spanx>, and <spanx style="verb">context</spanx> keys (4-tuple) in the request object MAY be omitted. However, if one or more of these values is present, they provide default values for their respective fields in the evaluation requests. This behavior is described in <xref target="default-values"/>.</t>

<t>The following is a non-normative example for specifying three requests, with no default values:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      "subject": {
        "type": "user",
        "id": "alice@acmecorp.com"
      },
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      },
      "context":{
        "time": "2024-05-31T15:22-07:00"
      }
    },
    {
      "subject": {
        "type": "user",
        "id": "alice@acmecorp.com"
      },
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      },
      "context":{
        "time": "2024-05-31T15:22-07:00"
      }
    },
    {
      "subject": {
        "type": "user",
        "id": "alice@acmecorp.com"
      },
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      },
      "context":{
        "time": "2024-05-31T15:22-07:00"
      }
    }
  ]
}
]]></sourcecode></figure>

<section anchor="default-values"><name>Default values</name>

<t>While the example above provides the most flexibility in specifying distinct values in each request for every evaluation, it is common for boxcarred requests to share one or more values of the 4-tuple. For example, evaluations MAY all refer to a single subject, and/or have the same contextual (environmental) attributes.</t>

<t>Default values offer a more compact syntax that avoids over-duplication of request data.</t>

<t>If any of the top-level <spanx style="verb">subject</spanx>, <spanx style="verb">action</spanx>, <spanx style="verb">resource</spanx>, and <spanx style="verb">context</spanx> keys are provided, the value of the top-level key is treated as the default value for the 4-tuples specified in the <spanx style="verb">evaluations</spanx> array. If a top-level key is specified in the 4-tuples present in the <spanx style="verb">evaluations</spanx> array then the value of that will take precedence over these default values.</t>

<t>The following is a non-normative example for specifying three requests that refer to a single subject and context:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "context":{
    "time": "2024-05-31T15:22-07:00"
  },
  "evaluations": [
    {
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      }
    },
    {
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      }
    },
    {
      "action": {
        "name": "can_read"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>The following is a non-normative example for specifying three requests that refer to a single <spanx style="verb">subject</spanx> and <spanx style="verb">context</spanx>, with a default value for <spanx style="verb">action</spanx>, that is overridden by the third request:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "context":{
    "time": "2024-05-31T15:22-07:00"
  },
  "action": {
    "name": "can_read"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      }
    },
    {
      "action": {
        "name": "can_edit"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
<section anchor="evaluations-options"><name>Evaluations options</name>

<t>The <spanx style="verb">evaluations</spanx> request payload includes an OPTIONAL <spanx style="verb">options</spanx> key, with a JSON value containing a set of key-value pairs.</t>

<t>This provides a general-purpose mechanism for providing caller-supplied metadata on how the request is to be executed.</t>

<t>One such option conrtols <em>evaluation semantics</em>, and is described in <xref target="evaluations-semantics"/>.</t>

<t>A non-normative example of the <spanx style="verb">options</spanx> field is shown below:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [...],
  "options": {
    "evaluation_semantics": "execute_all",
    "another_option": "value"
  }
}
]]></sourcecode></figure>

<section anchor="evaluations-semantics"><name>Evaluations semantics</name>

<t>By default, every request in the <spanx style="verb">evaluations</spanx> array is executed and a response returned in the same array order. This is the most common use-case for boxcarring multiple evaluation requests in a single payload.</t>

<t>With that said, three evaluation semantics are supported:</t>

<t><list style="numbers" type="1">
  <t><em>Execute all of the requests (potentially in parallel), return all of the results.</em> Any failure can be denoted by <spanx style="verb">decision: false</spanx> and MAY provide a reason code in the context.</t>
  <t><em>Deny on first denial (or failure).</em> This semantic could be desired if a PEP wants to issue a few requests in a particular order, with any denial (error, or <spanx style="verb">decision: false</spanx>) "short-circuiting" the evaluations call and returning on the first denial. This essentially works like the <spanx style="verb">&amp;&amp;</spanx> operator in programming languages.</t>
  <t><em>Permit on first permit.</em> This is the converse "short-circuiting" semantic, working like the <spanx style="verb">||</spanx> operator in programming languages.</t>
</list></t>

<t>To select the desired evaluations semantic, a caller can pass in <spanx style="verb">options.evaluations_semantic</spanx> with exactly one of the following values:</t>

<t><list style="symbols">
  <t><spanx style="verb">execute_all</spanx></t>
  <t><spanx style="verb">deny_on_first_deny</spanx></t>
  <t><spanx style="verb">permit_on_first_permit</spanx></t>
</list></t>

<t><spanx style="verb">execute_all</spanx> is the default semantic, so an <spanx style="verb">evaluations</spanx> request without the <spanx style="verb">options.evaluations_semantic</spanx> flag will execute using this semantic.</t>

<section anchor="example-evaluate-read-action-for-three-documents-using-all-three-semantics"><name>Example: Evaluate <spanx style="verb">read</spanx> action for three documents using all three semantics</name>

<t>Execute all requests:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@example.com"
  },
  "action": {
    "name": "read"
  },
  "options": {
    "evaluations_semantic": "execute_all"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "1"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "2"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "3"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Response:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      decision: true
    },
    {
      decision: false
    },
    {
      decision: true
    }
  ]
}
]]></sourcecode></figure>

<t>Deny on first deny:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@example.com"
  },
  "action": {
    "name": "read"
  },
  "options": {
    "evaluations_semantic": "deny_on_first_deny"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "1"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "2"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "3"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Response:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      decision: true
    },
    {
      decision: false,
      context: {
        "id": "200",
        "reason": "deny_on_first_deny"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Permit on first permit:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@example.com"
  },
  "action": {
    "name": "read"
  },
  "options": {
    "evaluations_semantic": "permit_on_first_permit"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "1"
      },
    },
    {
      "resource": {
        "type": "document",
        "id": "2"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "3"
      }
    }
  ]
}
]]></sourcecode></figure>

<t>Response:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      decision: true
    }
  ]
}
]]></sourcecode></figure>

</section>
</section>
</section>
</section>
<section anchor="access-evaluations-response"><name>Access Evaluations API Response</name>

<t>Like the request format, the Access Evaluations Response format for an Access Evaluations Request adds an <spanx style="verb">evaluations</spanx> array that lists the decisions in the same order they were provided in the <spanx style="verb">evaluations</spanx> array in the request. Each value of the evaluations array is typed as an Access Evaluation Response (<xref target="access-evaluation-response"/>).</t>

<t>In case the <spanx style="verb">evaluations</spanx> array is present, it is RECOMMENDED that the <spanx style="verb">decision</spanx> key of the response will be omitted. If present, it can be ignored by the caller.</t>

<t>The following is a non-normative example of a Access Evaluations Response to an Access Evaluations Request containing three evaluation objects:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      "decision": true
    },
    {
      "decision": false,
      "context": {
        "reason": "resource not found"
      }
    },
    {
      "decision": false,
      "context": {
        "reason": "Subject is a viewer of the resource"
      }
    }
  ]
}
]]></sourcecode></figure>

<section anchor="errors"><name>Errors</name>

<t>There are two types of errors, and they are handled differently:
1. Transport-level errors, or errors that pertain to the entire payload.
2. Errors in individual evaluations.</t>

<t>The first type of error is handled at the transport level. For example, for the HTTP binding, the 4XX and 5XX codes indicate a general error that pertains to the entire payload, as described in Transport (<xref target="transport"/>).</t>

<t>The second type of error is handled at the payload level. Decisions default to <em>closed</em> (i.e. <spanx style="verb">false</spanx>), but the <spanx style="verb">context</spanx> field can include errors that are specific to that request.</t>

<t>The following is a non-normative example of a response to an Access Evaluations Request containing three evaluation objects, two of them demonstrating how errors can be returned for two of the evaluation requests:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "evaluations": [
    {
      "decision": true
    },
    {
      "decision": false,
      "context": {
        "error": {
          "status": 404,
          "message": "Resource not found"
        }
      }
    },
    {
      "decision": false,
      "context": {
        "reason": "Subject is a viewer of the resource"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="subject-search-api"><name>Subject Search API</name>

<t>The Subject Search API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for returning all of the subjects that match the search criteria.</t>

<t>The Subject Search API is based on the Access Evaluation information model, but omits the Subject ID.</t>

<section anchor="subject-search-request"><name>The Subject Search API Request</name>

<t>The Subject Search request is a 3-tuple constructed of three previously defined entities:</t>

<dl>
  <dt><spanx style="verb">subject</spanx>:</dt>
  <dd>
    <t>REQUIRED. The subject (or principal) of type Subject.  NOTE that the Subject type is REQUIRED but the Subject ID can be omitted, and if present, is IGNORED.</t>
  </dd>
  <dt><spanx style="verb">action</spanx>:</dt>
  <dd>
    <t>REQUIRED. The action (or verb) of type Action.</t>
  </dd>
  <dt><spanx style="verb">resource</spanx>:</dt>
  <dd>
    <t>REQUIRED. The resource of type Resource.</t>
  </dd>
  <dt><spanx style="verb">context</spanx>:</dt>
  <dd>
    <t>OPTIONAL. Contextual data about the request.</t>
  </dd>
  <dt><spanx style="verb">page</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A page token for paged requests.</t>
  </dd>
</dl>

<section anchor="example-non-normative-1"><name>Example (non-normative)</name>

<t>The following payload defines a request for the subjects of type <spanx style="verb">user</spanx> that can perform the <spanx style="verb">can_read</spanx> action on the resource of type <spanx style="verb">account</spanx> and ID <spanx style="verb">123</spanx>.</t>

<figure title="Example Request" anchor="subject-search-request-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user"
  },
  "action": {
    "name": "can_read",
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "context": {
    "time": "2024-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="subject-search-response"><name>The Subject Search API Response</name>

<t>The response is a paged array of Subjects.</t>

<figure><sourcecode type="json"><![CDATA[
{
  "results": [
    {
      "type": "user",
      "id": "alice@acmecorp.com"
    },
    {
      "type": "user",
      "id": "bob@acmecorp.com"
    }
  ],
  "page": {
    "next_token": ""
  }
}
]]></sourcecode></figure>

<section anchor="paged-requests"><name>Paged requests</name>

<t>A response that needs to be split across page boundaries returns a non-empty <spanx style="verb">page.next_token</spanx>.</t>

<section anchor="example"><name>Example</name>

<figure><sourcecode type="json"><![CDATA[
{
  "results": [
    {
      "type": "user",
      "id": "alice@acmecorp.com"
    },
    {
      "type": "user",
      "id": "bob@acmecorp.com"
    }
  ],
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

<t>To retrieve the next page, provide <spanx style="verb">page.next_token</spanx> in the next request:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user"
  },
  "action": {
    "name": "can_read",
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "context": {
    "time": "2024-10-26T01:22-07:00"
  },
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

<t>Note: page size is implementation-dependent.</t>

</section>
</section>
</section>
</section>
<section anchor="resource-search-api"><name>Resource Search API</name>

<t>The Resource Search API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for returning all of the resources that match the search criteria.</t>

<t>The Resource Search API is based on the Access Evaluation information model, but omits the Resource ID.</t>

<section anchor="resource-search-request"><name>The Resource Search API Request</name>

<t>The Resource Search request is a 3-tuple constructed of three previously defined entities:</t>

<dl>
  <dt><spanx style="verb">subject</spanx>:</dt>
  <dd>
    <t>REQUIRED. The subject (or principal) of type Subject.</t>
  </dd>
  <dt><spanx style="verb">action</spanx>:</dt>
  <dd>
    <t>REQUIRED. The action (or verb) of type Action.</t>
  </dd>
  <dt><spanx style="verb">resource</spanx>:</dt>
  <dd>
    <t>REQUIRED. The resource of type Resource. NOTE that the Resource type is REQUIRED but the Resource ID is omitted, and if present, is IGNORED.</t>
  </dd>
  <dt><spanx style="verb">context</spanx>:</dt>
  <dd>
    <t>OPTIONAL. Contextual data about the request.</t>
  </dd>
  <dt><spanx style="verb">page</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A page token for paged requests.</t>
  </dd>
</dl>

<section anchor="example-non-normative-2"><name>Example (non-normative)</name>

<t>The following payload defines a request for the resources of type <spanx style="verb">account</spanx> on which the subject of type <spanx style="verb">user</spanx> and ID <spanx style="verb">alice@acmecorp.com</spanx> can perform the <spanx style="verb">can_read</spanx> action.</t>

<figure title="Example Request" anchor="resource-search-request-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "action": {
    "name": "can_read",
  },
  "resource": {
    "type": "account"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="resource-search-response"><name>The Resource Search API Response</name>

<t>The response is a paged array of Resources.</t>

<figure><sourcecode type="json"><![CDATA[
{
  "results": [
    {
      "type": "account",
      "id": "123"
    },
    {
      "type": "account",
      "id": "456"
    }
  ],
  "page": {
    "next_token": ""
  }
}
]]></sourcecode></figure>

<section anchor="paged-requests-1"><name>Paged requests</name>

<t>A response that needs to be split across page boundaries returns a non-empty <spanx style="verb">page.next_token</spanx>.</t>

<section anchor="example-1"><name>Example</name>

<figure><sourcecode type="json"><![CDATA[
{
  "results": [
    {
      "type": "account",
      "id": "123"
    },
    {
      "type": "account",
      "id": "456"
    }
  ],
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

<t>To retrieve the next page, provide <spanx style="verb">page.next_token</spanx> in the next request:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "action": {
    "name": "can_read",
  },
  "resource": {
    "type": "account"
  },
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

<t>Note: page size is implementation-dependent.</t>

</section>
</section>
</section>
</section>
<section anchor="action-search-api"><name>Action Search API</name>

<t>The Action Search API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for returning all of the actions that match the search criteria.</t>

<t>The Action Search API is based on the Access Evaluation information model.</t>

<section anchor="action-search-request"><name>The Action Search API Request</name>

<t>The Action Search request is a 3-tuple constructed of three previously defined entities:</t>

<dl>
  <dt><spanx style="verb">subject</spanx>:</dt>
  <dd>
    <t>REQUIRED. The subject (or principal) of type Subject.</t>
  </dd>
  <dt><spanx style="verb">resource</spanx>:</dt>
  <dd>
    <t>REQUIRED. The resource of type Resource.</t>
  </dd>
  <dt><spanx style="verb">context</spanx>:</dt>
  <dd>
    <t>OPTIONAL. Contextual data about the request.</t>
  </dd>
  <dt><spanx style="verb">page</spanx>:</dt>
  <dd>
    <t>OPTIONAL. A page token for paged requests.</t>
  </dd>
</dl>

<section anchor="example-non-normative-3"><name>Example (non-normative)</name>

<t>The following payload defines a request for the actions that the subject of type user and ID may perform on the resource of type account and ID 123 at 01:22 AM.</t>

<figure title="Example Request" anchor="action-search-request-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "123"
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "context": {
    "time": "2024-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="action-search-response"><name>The Action Search API Response</name>

<t>The response is a paged array of Actions.</t>

<figure title="Example Response" anchor="action-search-response-example"><sourcecode type="json"><![CDATA[
{
  "results": [
    {
      "name": "can_read"
    },
    {
      "name": "can_write"
    }
  ],
  "page": {
    "next_token": ""
  }
}
]]></sourcecode></figure>

<section anchor="paged-requests-2"><name>Paged requests</name>

<t>A response that needs to be split across page boundaries returns a non-empty <spanx style="verb">page.next_token</spanx>.</t>

<section anchor="example-2"><name>Example</name>

<figure title="Example Paged Response" anchor="action-search-response-paged-example"><sourcecode type="json"><![CDATA[
{
  "results": [
    {
      "name": "can_read"
    },
    {
      "name": "can_write"
    }
  ],
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

<t>To retrieve the next page, provide <spanx style="verb">page.next_token</spanx> in the next request:</t>

<figure title="Example Paged Request" anchor="action-search-request-paged-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": "123"
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "context": {
    "time": "2024-10-26T01:22-07:00"
  },
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

<t>Note: page size is implementation-dependent.</t>

</section>
</section>
</section>
</section>
<section anchor="transport"><name>Transport</name>

<t>This specification defines an HTTPS binding which MUST be implemented by a compliant PDP.</t>

<t>Additional transport bindings (e.g. gRPC) MAY be defined in the future in the form of profiles, and MAY be implemented by a PDP.</t>

<section anchor="https-binding"><name>HTTPS Binding</name>

<section anchor="https-access-evaluation-request"><name>HTTPS Access Evaluation Request</name>
<t>The Access Evaluation Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluation Request, as defined in <xref target="access-evaluation-request"/>.</t>

<t>The following is a non-normative example of the HTTPS binding of the Access Evaluation Request:</t>

<figure title="Example of an HTTPS Access Evaluation Request" anchor="example-access-evaluation-request"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluation HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "resource": {
    "type": "todo",
    "id": "1",
  },
  "action": {
    "name": "can_read"
  },
  "context": {
    "time": "1985-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="https-access-evaluation-response"><name>HTTPS Access Evaluation Response</name>
<t>The success response to an Access Evaluation Request is an Access Evaluation Response. It is an HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluation Response, as defined in <xref target="access-evaluation-response"/>.</t>

<t>Following is a non-normative example of an HTTPS Access Evaluation Response:</t>

<figure title="Example of an HTTP Access Evaluation Response" anchor="example-access-evaluation-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "decision": true
}
]]></sourcecode></figure>

</section>
<section anchor="https-access-evaluations-request"><name>HTTPS Access Evaluations Request</name>
<t>The Access Evaluations Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluations Request, as defined in <xref target="access-evaluations-request"/>.</t>

<t>The following is a non-normative example of a the HTTPS binding of the Access Evaluations Request:</t>

<figure title="Example of an HTTPS Access Evaluations Request" anchor="example-access-evaluations-request"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluations HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "context":{
    "time": "2024-05-31T15:22-07:00"
  },
  "action": {
    "name": "can_read"
  },
  "evaluations": [
    {
      "resource": {
        "type": "document",
        "id": "boxcarring.md"
      }
    },
    {
      "resource": {
        "type": "document",
        "id": "subject-search.md"
      }
    },
    {
      "action": {
        "name": "can_edit"
      },
      "resource": {
        "type": "document",
        "id": "resource-search.md"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
<section anchor="https-access-evaluations-response"><name>HTTPS Access Evaluations Response</name>
<t>The success response to an Access Evaluations Request is an Access Evaluations Response. It is a HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluations Response, as defined in <xref target="access-evaluations-response"/>.</t>

<t>The following is a non-normative example of an HTTPS Access Evaluations Response:</t>

<figure title="Example of an HTTPS Access Evaluations Response" anchor="example-access-evaluations-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "evaluations": [
    {
      "decision": true
    },
    {
      "decision": false,
      "context": {
        "error": {
          "status": 404,
          "message": "Resource not found"
        }
      }
    },
    {
      "decision": false,
      "context": {
        "reason": "Subject is a viewer of the resource"
      }
    }
  ]
}
]]></sourcecode></figure>

</section>
<section anchor="https-subject-search-request"><name>HTTPS Subject Search Request</name>
<t>The Subject Search Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Subject Search Request, as defined in <xref target="subject-search-request"/>.</t>

<t>The following is a non-normative example of the HTTPS binding of the Subject Search Request:</t>

<figure title="Example of an HTTPS Subject Search Request" anchor="example-subject-search-request"><sourcecode type="http"><![CDATA[
POST /access/v1/search/subject HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user"
  },
  "action": {
    "name": "can_read"
  },
  "resource": {
    "type": "account",
    "id": "123",
  }
}
]]></sourcecode></figure>

</section>
<section anchor="https-subject-search-response"><name>HTTPS Subject Search Response</name>
<t>The success response to a Subject Search Request is a Subject Search Response. It is an HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Subject Search Response, as defined in <xref target="subject-search-response"/>.</t>

<t>The following is a non-normative example of an HTTPS Subject Search Response:</t>

<figure title="Example of an HTTPS Subject Search Response" anchor="example-subject-search-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "results": [
    {
      "type": "user",
      "id": "alice@acmecorp.com"
    },
    {
      "type": "user",
      "id": "bob@acmecorp.com"
    }
  ],
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="https-resource-search-request"><name>HTTPS Resource Search Request</name>
<t>The Resource Search Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Resource Search Request, as defined in <xref target="resource-search-request"/>.</t>

<t>The following is a non-normative example of the HTTPS binding of the Resource Search Request:</t>

<figure title="Example of an HTTPS Resource Search Request" anchor="example-resource-search-request"><sourcecode type="http"><![CDATA[
POST /access/v1/resource/search HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "action": {
    "name": "can_read"
  },
  "resource": {
    "type": "account"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="https-resource-search-response"><name>HTTPS Resource Search Response</name>
<t>The success response to a Resource Search Request is a Resource Search Response. It is an HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Resource Search Response, as defined in <xref target="resource-search-response"/>.</t>

<t>The following is a non-normative example of an HTTPS Resource Search Response:</t>

<figure title="Example of an HTTPS Resource Search Response" anchor="example-resource-search-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "results": [
    {
      "type": "account",
      "id": "123"
    },
    {
      "type": "account",
      "id": "456"
    }
  ],
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="https-action-search-request"><name>HTTPS Action Search Request</name>
<t>The Action Search Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Action Search Request, as defined in <xref target="action-search-request"/>.</t>

<t>The following is a non-normative example of the HTTPS binding of the Action Search Request:</t>

<figure title="Example of an HTTPS Action Search Request" anchor="example-action-search-request"><sourcecode type="http"><![CDATA[
POST /access/v1/search/action HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "context": {
    "time": "2024-10-26T01:22-07:00"
  },
}
]]></sourcecode></figure>

</section>
<section anchor="https-action-search-response"><name>HTTPS Action Search Response</name>
<t>The success response to an Action Search Request is an Action Search Response. It is an HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Action Search Response, as defined in <xref target="action-search-response"/>.</t>

<t>The following is a non-normative example of an HTTPS Action Search Response:</t>

<figure title="Example of an HTTPS Action Search Response" anchor="example-action-search-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "results": [
    {
      "name": "can_read"
    },
    {
      "name": "can_write"
    }
  ],
  "page": {
    "next_token": "alsehrq3495u8"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="error-responses"><name>Error Responses</name>
<t>The following error responses are common to all methods of the Authorization API. The error response is indicated by an HTTPS status code (<xref section="15" sectionFormat="of" target="RFC9110"/>) that indicates error.</t>

<t>The following errors are indicated by the status codes defined below:</t>

<texttable title="HTTPS Error status codes" anchor="_table-error-status-codes">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>HTTPS Body Content</ttcol>
      <c>400</c>
      <c>Bad Request</c>
      <c>An error message string</c>
      <c>401</c>
      <c>Unauthorized</c>
      <c>An error message string</c>
      <c>403</c>
      <c>Forbidden</c>
      <c>An error message string</c>
      <c>500</c>
      <c>Internal error</c>
      <c>An error message string</c>
</texttable>

<t>Note: HTTPS errors are returned by the PDP to indicate an error condition relating to the request or its processing, and are unrelated to the outcome of an authorization decision, which is always returned with a <spanx style="verb">200</spanx> status code and a response payload.</t>

<t>To make this concrete:</t>

<t><list style="symbols">
  <t>a <spanx style="verb">401</spanx> HTTPS status code indicates that the caller (policy enforcement point) did not properly authenticate to the PDP - for example, by omitting a required <spanx style="verb">Authorization</spanx> header, or using an invalid access token.</t>
  <t>the PDP indicates to the caller that the authorization request is denied by sending a response with a <spanx style="verb">200</spanx> HTTPS status code, along with a payload of <spanx style="verb">{ "decision": false }</spanx>.</t>
</list></t>

</section>
<section anchor="request-identification"><name>Request Identification</name>
<t>All requests to the API MAY have request identifiers to uniquely identify them. The API client (PEP) is responsible for generating the request identifier. If present, the request identifier SHALL be provided using the HTTPS Header <spanx style="verb">X-Request-ID</spanx>. The value of this header is an arbitrary string. The following non-normative example describes this header:</t>

<figure title="Example HTTPS request with a Request Id Header" anchor="request-id-example"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluation HTTP/1.1
Authorization: Bearer mF_9.B5f-4.1JqM
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716
]]></sourcecode></figure>

</section>
<section anchor="request-identification-in-a-response"><name>Request Identification in a Response</name>
<t>A PDP responding to an Authorization API request that contains an <spanx style="verb">X-Request-ID</spanx> header MUST include a request identifier in the response. The request identifier is specified in the HTTPS Response header: <spanx style="verb">X-Request-ID</spanx>. If the PEP specified a request identifier in the request, the PDP MUST include the same identifier in the response to that request.</t>

<t>The following is a non-normative example of an HTTPS Response with this header:</t>

<figure title="Example HTTPS response with a Request Id Header" anchor="example-response-request-id"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This specification does not introduce any new identifiers that would require registration with IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>

<section anchor="communication-integrity-and-confidentiality"><name>Communication Integrity and Confidentiality</name>

<t>In the ABAC architecture, the PEP-PDP connection is the most sensitive one and needs to be secured to guarantee:</t>

<t><list style="symbols">
  <t>Integrity</t>
  <t>Confidentiality</t>
</list></t>

<t>As a result, the connection between the PEP and the PDP MUST be secured using the most adequate means given the choice of transport (e.g. TLS for HTTP REST).</t>

</section>
<section anchor="policy-confidentiality-and-sender-authentication"><name>Policy Confidentiality and Sender Authentication</name>

<t>Additionally, the PDP SHOULD authenticate the calling PEP. There are several ways authentication can be established. These ways are out of scope of this specification. They MAY include:</t>

<t><list style="symbols">
  <t>Mutual TLS</t>
  <t>OAuth-based authentication</t>
  <t>API key</t>
</list></t>

<t>The choice and strength of either mechanism is not in scope.</t>

<t>Authenticating the PEP allows the PDP to avoid common attacks (such as DoS - see below) and/or reveal its internal policies. A malicious actor could craft a large number of requests to try and understand what policies the PDP is configured with. Requesting a client (PEP) be authenticated mitigates that risk.</t>

</section>
<section anchor="trust"><name>Trust</name>

<t>In ABAC, there is occasionally conversations around the trust between PEP and PDP: how can the PDP trust the PEP to send the right values in? This is a misplaced concern. The PDP must trust the PEP as ultimately, the PEP is the one responsible for enforcing the decision the PDP produces.</t>

</section>
<section anchor="availability-denial-of-service"><name>Availability &amp; Denial of Service</name>

<t>The PDP SHOULD apply reasonable protections to avoid common attacks tied to request payload size, the number of requests, invalid JSON, nested JSON attacks, or memory consumption. Rate limiting is one such way to address such issues.</t>

</section>
</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">





<reference anchor="RFC4001">
<front>
<title>Textual Conventions for Internet Network Addresses</title>
<author fullname="M. Daniele" initials="M." surname="Daniele"><organization/></author>
<author fullname="B. Haberman" initials="B." surname="Haberman"><organization/></author>
<author fullname="S. Routhier" initials="S." surname="Routhier"><organization/></author>
<author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"><organization/></author>
<date month="February" year="2005"/>
<abstract><t>This MIB module defines textual conventions to represent commonly used Internet network layer addressing information.  The intent is that these textual conventions will be imported and used in MIB modules that would otherwise define their own representations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="4001"/>
<seriesInfo name="DOI" value="10.17487/RFC4001"/>
</reference>



<reference anchor="RFC6749">
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author fullname="D. Hardt" initials="D." role="editor" surname="Hardt"><organization/></author>
<date month="October" year="2012"/>
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6749"/>
<seriesInfo name="DOI" value="10.17487/RFC6749"/>
</reference>



<reference anchor="RFC8259">
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author fullname="T. Bray" initials="T." role="editor" surname="Bray"><organization/></author>
<date month="December" year="2017"/>
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name="STD" value="90"/>
<seriesInfo name="RFC" value="8259"/>
<seriesInfo name="DOI" value="10.17487/RFC8259"/>
</reference>



<reference anchor="RFC9110">
<front>
<title>HTTP Semantics</title>
<author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"><organization/></author>
<author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"><organization/></author>
<author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"><organization/></author>
<date month="June" year="2022"/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name="STD" value="97"/>
<seriesInfo name="RFC" value="9110"/>
<seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>


<reference anchor="XACML" target="https://www.oasis-open.org/committees/xacml/repository/cs-xacml-specification-1.1.pdf">
  <front>
    <title>eXtensible Access Control Markup Language (XACML) Version 1.1</title>
    <author initials="S." surname="Godik" fullname="Simon Godik" role="editor">
      <organization>Overxeer</organization>
    </author>
    <author initials="T. M." surname="(Ed.)" fullname="Tim Moses (Ed.)" role="editor">
      <organization>Entrust</organization>
    </author>
    <date year="2006"/>
  </front>
</reference>


    </references>




<?line 1540?>

<section anchor="terminology"><name>Terminology</name>
<dl>
  <dt>Subject:</dt>
  <dd>
    <t>The user or robotic principal about whom the Authorization API call is being made.</t>
  </dd>
  <dt>Resource:</dt>
  <dd>
    <t>The target of the request; the resource about which the Authorization API is being made.</t>
  </dd>
  <dt>Action:</dt>
  <dd>
    <t>The operation the Subject has attempted on the Resource in an Authorization API call.</t>
  </dd>
  <dt>Context:</dt>
  <dd>
    <t>The environmental or contextual attributes for this request.</t>
  </dd>
  <dt>Decision:</dt>
  <dd>
    <t>The value of the evaluation decision made by the PDP: <spanx style="verb">true</spanx> for "allow", <spanx style="verb">false</spanx> for "deny".</t>
  </dd>
  <dt>PDP:</dt>
  <dd>
    <t>Policy Decision Point. The component or system that provides authorization decisions over the network interface defined here as the Authorization API.</t>
  </dd>
  <dt>PEP:</dt>
  <dd>
    <t>Policy Enforcement Point. The component or system that requests decisions from the PDP and enforces access to specific requests based on the decisions obtained from the PDP.</t>
  </dd>
</dl>

</section>
<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>This template uses extracts from templates written by
<contact fullname="Pekka Savola"/>, <contact fullname="Elwyn Davies"/> and
<contact fullname="Henrik Levkowetz"/>.</t>

</section>
<section anchor="document-history"><name>Document History</name>

<t>[[ To be removed from the final specification ]]</t>

<t><list style="symbols">
  <t>00 - Initial version.</t>
  <t>01 - Refactored the optional fields of Subject, Action, and Resource into a <spanx style="verb">properties</spanx> sub-object, making it easier to design meaningful JSON-schema and protobuf contracts for the API. Also changed the <spanx style="verb">evaluations</spanx> field from an object to an array, to preserve ordering semantics.</t>
  <t>02 - Added the evaluations API.</t>
</list></t>

</section>
<section anchor="Notices"><name>Notices</name>
<t>Copyright (c) 2025 The OpenID Foundation.</t>

<t>The OpenID Foundation (OIDF) grants to any Contributor, developer, implementer,
or other interested party a non-exclusive, royalty free, worldwide copyright license to
reproduce, prepare derivative works from, distribute, perform and display, this
Implementers Draft, Final Specification, or Final Specification Incorporating Errata
Corrections solely for the purposes of (i) developing specifications, and (ii)
implementing Implementers Drafts, Final Specifications, and Final Specification
Incorporating Errata Corrections based on such documents, provided that attribution
be made to the OIDF as the source of the material, but that such attribution does not
indicate an endorsement by the OIDF.</t>

<t>The technology described in this specification was made available from contributions
from various sources, including members of the OpenID Foundation and others.
Although the OpenID Foundation has taken steps to help ensure that the technology
is available for distribution, it takes no position regarding the validity or scope of any
intellectual property or other rights that might be claimed to pertain to the
implementation or use of the technology described in this specification or the extent
to which any license under such rights might or might not be available; neither does it
represent that it has made any independent effort to identify any such rights. The
OpenID Foundation and the contributors to this specification make no (and hereby
expressly disclaim any) warranties (express, implied, or otherwise), including implied
warranties of merchantability, non-infringement, fitness for a particular purpose, or
title, related to this specification, and the entire risk as to implementing this
specification is assumed by the implementer. The OpenID Intellectual Property
Rights policy (found at openid.net) requires contributors to offer a patent promise not
to assert certain patent claims against other contributors and against implementers.
OpenID invites any interested party to bring to its attention any copyrights, patents,
patent applications, or other proprietary rights that may cover technology that may be
required to practice this specification.</t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="M." surname="Jordan" fullname="Marc Jordan">
      <organization>SGNL</organization>
      <address>
        <email>marc@sgnl.ai</email>
      </address>
    </contact>
    <contact initials="E." surname="Gustavson" fullname="Erik Gustavson">
      <organization>SGNL</organization>
      <address>
        <email>erik@sgnl.ai</email>
      </address>
    </contact>
    <contact initials="A." surname="Babeanu" fullname="Alex Babeanu">
      <organization>3Edges</organization>
      <address>
        <email>alex@3edges.com</email>
      </address>
    </contact>
    <contact initials="D." surname="Hyland" fullname="David Hyland">
      <organization>ID Partners</organization>
      <address>
        <email>dave@idpartners.com.au</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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

-->

</rfc>

