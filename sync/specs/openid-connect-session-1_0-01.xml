<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="exp" docName="openid-connect-session-1_0" ipr="trust200902">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="3" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="no" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>

  <front>
    <title abbrev="Abbreviated-Title">OpenID Connect Session Management 1.0 - draft 01</title>

    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization abbrev="NRI">Nomura Research Institute,
      Ltd.</organization>

      <address>
        <email>n-sakimura@nri.co.jp</email>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Protiviti">Protiviti
      Government Services</organization>

      <address>
        <email>jbradley@mac.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization abbrev="">Google</organization>

      <address>
        <email>breno@google.com</email>
      </address>
    </author>

    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
      <organization abbrev="Salesforce">Salesforce</organization>

      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>

    <author fullname="Edmund Jay" initials="E." surname="Jay">
      <organization abbrev="MGI1">MGI1</organization>

      <address>
        <email>ejay@mgi1.com</email>
      </address>
    </author>

    <date day="6" month="July" year="2011" />

    <abstract>
      <t>This document describes how to manage sessions for OpenID
      Connect.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>Sessions are used to keep track of information and interactions for
      users across multiple pages. This creates a sense of continuity,
      customization, and a more pleasant experience for the users. Visitors to
      an OpenID relying party site accessing protected resources will be asked
      for authentication and authorization. Upon user authorization, the user
      will be granted access to the requested resources. The site may perform
      other background tasks for the user using the same authenticated
      session. This allows the user to have a simplified experience without
      being asked for authorization each time and may even allow the user to
      go off-line while the tasks are being performed. This specification
      describes how OpenID Connect sessions can be created, used, and
      terminated.</t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t>In addition to the terminology defined in the <xref
      target="OpenID.Core">OpenID Connect Core 1.0</xref> specification, the following terms
      are defined:<list style="hanging">
          <t hangText="Client">An application obtaining authorization and
          making protected resource requests.</t>

          <t hangText="End-user">A human resource owner.</t>

          <t hangText="Client Identifier">A unique identifier that the client
          uses to identify itself to the OP.</t>

          <t hangText="Identifier">An Identifier is either an "http" or "https"
          URI, (commonly referred to as a "URL" within this document), or an
          account URI. This document defines various kinds of Identifiers,
          designed for use in different contexts.</t>

          <t hangText="ID Token">An opaque token that contains claims about an
          authenticated user.</t>

          <t hangText="ID Token">A JWS signed claim that attest to the
          identity of the user, intended audience, and the issuer of the
          claim. The signed claim uses compact serialization.</t>
        </list></t>
    </section>

    <section title="Session Management">
      <t>The OpenID Connect Core supports life-cycle session management and
      synchronization for third parties that support authentication with the
      authorization server. In addition, session management for fourth parties
      such as desktop, native or mobile applications that utilizes
      authorization server credentials at fourth party web sites are also
      supported.</t>

      <section title="Creating Sessions">
        <t>To create a session, the client sends an authorization request to
        the authorization server with <spanx style="verb">id_token</spanx> as
        one of the <spanx style="verb">response_type</spanx> values. </t>

        <t>If the <spanx style="verb">response_type</spanx> includes the value
        <spanx style="verb">code</spanx>, then an <xref target="IDToken">ID
        token</xref> is returned in the response of the Token Endpoint when
        the Access Token is retrieved. </t>

        <t>If the <spanx style="verb">response_type</spanx> includes the value
        <spanx style="verb">token</spanx>, then an ID token is returned as a
        fragment parameter in the <spanx style="verb">redirect_uri</spanx>
        specified in the request. </t>

        <t>In either case, an ID Token will also be returned along with the
        access token when submitting a refresh token to the token access
        endpoint if the initial authorization request included <spanx
        style="verb">id_token</spanx> in the <spanx style="verb">response_type</spanx>
        parameter.</t>

        <t>The ID Token serves as a key to an authenticated user session and
        contains claims for the user.</t>

        <section anchor="IDToken" title="ID Token">
          <t>This specification defines ID Token as a JWS signed claim that
          minimally attests the following claims:</t>

          <t><list style="hanging">
              <t hangText="issuer">REQUIRED. The unique identifier of the
              issuer of the claims</t>

              <t hangText="client_id">REQUIRED. The unique identifier of the
              client.</t>

              <t hangText="user_id">REQUIRED. A locally unique and never
              reassigned identifier for the user, which is intended to be
              consumed by the Client. e.g. "24400320" or
              "AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4". It MUST NOT exceed
              255 ASCII characters in length.</t>

              <t hangText="audience">REQUIRED. The <xref
              target="JWT">JWT</xref> aud (audience) claim.</t>

              <t hangText="exp">REQUIRED. The <xref target="JWT">JWT</xref>
              exp (expiration time) claim.</t>

              <t hangText="pape">OPTIONAL. (TBD) If we want this token to be
              short, we probably want to define a shorter equivalent of
              PAPE.</t>

              <t hangText="nonce">OPTIONAL. If the authorization request
              includes a nonce request value, then this value is REQUIRED and
              its value is set to the same value as the request value.</t>
            </list></t>

          <t>The ID Token MAY contain other claims. The ID Token can be used
          to access session information from an authenticated session or to
          pass a session to other applications.</t>

          <t>The ID Token MAY be redefined by other OpenID session related
          specifications.</t>
        </section>

        <section anchor="auth_req" title="Authorization Request">
          <t>Section 4.1.1 and 4.2.1 of <xref target="OAuth.2.0">OAuth
          2.0</xref> defines OAuth Authorization Request parameters. In this
          specification, the values to the parameters are defined as
          follows.</t>

          <t><list style="hanging">
              <t hangText="response_type">A space delimited, case
              sensitive list of string values (Pending OAuth 2.0 changes). This
              specification extends the OpenID core <spanx style="verb">response_type</spanx>
              values to include <spanx style="verb">id_token</spanx> . The
              value MUST include <spanx style="verb">id_token</spanx> for
              requesting an ID Token from a session.</t>
            </list>In addition, this specification defines the following
          extension parameters.</t>

          <t><list style="hanging">
              <t hangText="nonce">OPTIONAL. A random, unique string. The nonce
              value is returned in the ID token.</t>

              <t hangText="id_token_audience">OPTIONAL. The identifier of the
              target audience for an ID token.</t>
            </list></t>

          <figure>
            <preamble>Following is a non-normative example when they are sent
            in the query parameters serialization:</preamble>

            <artwork><![CDATA[GET /authorize?scope=openid&response_type=token%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
Host: server.example.com]]></artwork>
          </figure>
        </section>

        <section title="Token Endpoint">
          <t>The Token Endpoint MUST return an ID Token if <spanx
          style="verb">id_token</spanx> is included in the <spanx
          style="verb">response_type</spanx> parameter of the authorization
          request.</t>

          <section anchor="access_token_response"
                   title="Access Token Response">
            <t>After receiving and verifying a valid and authorized Access
            Token Request from the client, the Authorization Server returns a
            Positive Assertion that includes an Access Token. The parameters
            in the successful response are defined in Section 4.2.2 of <xref
            target="OAuth.2.0">OAuth 2.0</xref> .</t>

            <t>In addition, this specification defines the following
            additional return parameters:</t>

            <t><list style="hanging">
                <t hangText="id_token">REQUIRED if it was requested in the
                authorization request. It may be a <xref
                target="JWS">JWS</xref> of the <xref target="IDToken">ID
                token</xref> described below.</t>
              </list></t>

            <figure>
              <preamble>Following is a non-normative example:</preamble>

              <artwork><![CDATA[{
    "access_token": "SlAV32hkKG",
    "token_type": "JWT",
    "refresh_token": "8xLOxBtZp8",
    "expires_in": 3600,
    "id_token":"jwtheader.jwtpayload.jwtcrypto"
}]]></artwork>
            </figure>

            <t>As in the <xref target="OAuth.2.0">OAuth 2.0</xref>, Clients
            SHOULD ignore unrecognized response parameters.</t>
          </section>
        </section>

        <section title="Implicit (User-Agent) Flow">
          <t>User-agents can use the OAuth implicit grant flow by including
          <spanx style="verb">token</spanx> and <spanx style="verb">id_token</spanx>
          in the <spanx style="verb">response_type</spanx> of the
          authorization request to get an ID Token.</t>

          <t><list style="numbers">
              <t>The user-agent makes an authorization request to the
              authorization endpoint.</t>

              <t>The authorization server authenticates the user</t>

              <t>The authorization server returns an access and ID token.</t>

              <t>The user-agent and client servlet can then use the session
              management endpoints by presenting the ID token to the
              endpoints.</t>
            </list></t>

          <t><figure>
              <artwork><![CDATA[                                 +----------------------------------+ 
+----------+                     |                                  | 
|          |                     |      +----------------------+    | 
|          |                     |      |    Authorization     |    | 
|          |                     |      |         server       |    | 
|user-agent|                     |      +----------------------+    | 
|          |                     |      |   +---------------+  |    | 
|          |>----(1)-------------|------|-->| Authorization |  |    | 
|          |<----(3)-------------|------|--<| Endpoint  (2) |  |    | 
+----------+                     |      |   +---------------+  |    | 
    ^                 +----------|------|--<| Check_Session |  |    | 
    |                 | +--------|------|-->| EndPoint      |  |    | 
    |                 | |        |      |   +---------------+  |    | 
    v                 | |        |      +----------------------+    | 
+----------+       (4)| |        |                                  | 
|          |          | |        |                                  | 
|client    |<---------+ |        |      +----------------------+    | 
|servlet   |>-----------+        |      |     Profile API/     |    | 
|          |                     |      |     UserInfo Endpoint|    | 
|          |                     |      |                      |    | 
|          |>--------------------|----->|                      |    | 
|          |<--------------------|-----<|                      |    | 
|          |                     |      |                      |    | 
|          |                     |      |                      |    | 
+----------+                     |      +----------------------+    | 
                                 |                                  | 
                                 |                                  | 
                                 +----------------------------------+ 
]]></artwork>
            </figure></t>

          <t><figure>
              <artwork><![CDATA[                             +-----------------------------+
                             |                             |
                             |      Authorization          |
                             |         Server              |
+-------------+              |                             |
|             |              |     +--------------------+  |
| User-Agent  |              |     |  Refresh Session   |  |
|             |    (4)       |     |    Endpoint        |  |
|             |>-------------|---->|                    |  |
|             |<-------------|----<|                    |  |
|             |              |     |                    |  |
|             |              |     +--------------------+  |
|             |    (4)       |     |  End Session       |  |
|             |>-------------|---->|    Endpoint        |  |
|             |<-------------|----<|                    |  |
|             |              |     |                    |  |
|             |              |     +--------------------+  |
+-------------+              +-----------------------------+
]]></artwork>
            </figure></t>

          <section anchor="implicit_req" title="Implicit Flow Request">
            <t>The authorization request parameter values are constrained as
            follows.</t>

            <t><list style="hanging">
                <t hangText="response_type">A space delimited, case
                sensitive list of string values (Pending OAuth 2.0 changes).
                The value MUST include <spanx style="verb">token</spanx> and
                <spanx style="verb">id_token</spanx> and to request an access
                and ID Token from the session.</t>
              </list></t>

            <figure>
              <preamble>Following is a non-normative example of a request
              using query parameters serialization:</preamble>

              <artwork><![CDATA[GET /authorize?scope=openid&response_type=token%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
Host: server.example.com]]></artwork>
            </figure>

          </section>

          <section title="Implicit Flow Response">
            <t>When the <spanx style="verb">response_type</spanx> in the
            request includes <spanx style="verb">token</spanx>, the
            Authorization Response MUST return the parameters defined in
            section 4.2.2 of <xref target="OAuth.2.0">OAuth 2.0</xref>.</t>

            <t>In addition, when <spanx style="verb">response_type</spanx>
            includes <spanx style="verb">id_token</spanx>, an ID Token MUST be
            returned in the response.</t>

            <t><figure>
                <preamble>Following is a non-normative example of a
                response:</preamble>

                <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://client.example.com/cb?token=i1WsRn1uB1&id_token=jwt_header.jwt_payload.jwt_crypto]]></artwork>
              </figure></t>
          </section>
        </section>

        <section title="Authorization Code (Web Server) Flow">
          <t>Web server clients can use the OAuth authorization code flow by
          including <spanx style="verb">code</spanx> and <spanx style="verb">id_token</spanx>
          in the <spanx style="verb">response_type</spanx> parameter of the
          authorization request to obtain an ID token. The ID Token is
          returned along with the access token after the client submits the
          authorization code to the access token endpoint.</t>

          <t><list style="numbers">
              <t>The user-agent makes an authorization request to the
              authorization endpoint.</t>

              <t>The authorization server authenticates the user</t>

              <t>The authorization server returns an authorization code.</t>

              <t>The client sends authorization code to the token access
              endpoint.</t>

              <t>The authorization server verifies the authorization token and
              returns an access and ID token</t>

              <t>The user-agent and client servlet can then use the session
              management endpoints by presenting the ID token to the
              endpoints.</t>
            </list></t>

          <t><figure>
              <artwork><![CDATA[                                 +----------------------------------+
+----------+                     |                                  |
|          |                     |      +----------------------+    |
|          |                     |      |    Authorization     |    |
|          |                     |      |         server       |    |
|user-agent|                     |      +----------------------+    |
|          |                     |      |   +---------------+  |    |
|          |>-----(1)------------|------|-->| Authorization |  |    |
|          |<-----(3)------------|------|--<| Endpoint (2)  |  |    |
+----------+                     |      |   +---------------+  |    |
    ^                 +----------|------|--<| Access Token  |  |    |
    |                 | +--------|------|-->| EndPoint      |  |    |
    |                 | |        |      |   +---------------+  |    |
    v                 | |        |      |   | Session       |  |    |
+----------+          | |        |      |   | Management    |  |    |
|          |          | |        |      |   | Endpoints     |  +    |
|client    |<-----(4)-+ |        |      |   +---------------+  |    |
|servlet   |>-----(5)---+        |      +----------------------+    |
|          |                     |                                  |
|          |                     |      +----------------------+    |
|          |                     |      |     Profile API/     |    |
|          |                     |      |     UserInfo Endpoint|    |
|          |<--------------------|-----<|                      |    |
|          |>--------------------|----->|                      |    |
+----------+                     |      +----------------------+    |
                                 |                                  |
                                 |                                  |
                                 +----------------------------------+
]]></artwork>
            </figure></t>

          <section anchor="auth_code_req"
                   title="Authorization Code Flow Request">
            <t>The authorization request parameter values are constrained as
            follows.</t>

            <t><list style="hanging">
                <t hangText="response_type">A space delimited, case
                sensitive list of string values (Pending OAuth 2.0 changes).
                The value MUST include <spanx style="verb">code</spanx> and
                <spanx style="verb">id_token</spanx> and to request an access
                and ID Token from the session.</t>
              </list></t>

            <figure>
              <preamble>Following is a non-normative example of a request
              using query parameters serialization:</preamble>

              <artwork><![CDATA[GET /authorize?scope=openid&response_type=code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
Host: server.example.com]]></artwork>
            </figure>

          </section>

          <section title="Authorization Code Flow Response">
            <t>When the <spanx style="verb">response_type</spanx> in the
            request includes <spanx style="verb">code</spanx>, the
            Authorization Response MUST return the parameters defined in
            section 4.1.2 of <xref target="OAuth.2.0">OAuth 2.0</xref>.</t>

            <t>In addition, when <spanx style="verb">response_type</spanx>
            includes <spanx style="verb">id_token</spanx>, the ID token is
            retrieved from the token access endpoint.</t>

            <t><figure>
                <preamble>Following is a non-normative example of a
                response:</preamble>

                <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=i1WsRn1uB1]]></artwork>
              </figure></t>
          </section>

          <section title="Token Access Request">
            <t>The client uses the authorization code to make a request to the
            token access endpoint to retrieve an access and ID token.</t>

            <t>The request format is defined in section 4.1.3 of the <xref
            target="OAuth.2.0">OAuth 2.0</xref> specification.</t>

            <t><figure>
                <preamble>Following is a non-normative example of a token
                access endpoint request:</preamble>

                <artwork><![CDATA[POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&client_id=s6BhdRkqt3&
code=i1WsRn1uB1&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb


]]></artwork>
              </figure></t>
          </section>

          <section title="Token Access Response">
            <t>The access and ID token is returned in the response.</t>

            <t>The request format is defined in section 4.1.4 of the <xref
            target="OAuth.2.0">OAuth 2.0</xref> specification.</t>

            <t><figure>
                <preamble>Following is a non-normative example of a token
                access endpoint response:</preamble>

                <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
{
  "access_token":"SlAV32hkKG",
  "token_type":"JWT",
  "expires_in":3600,
  "refresh_token":"8xLOxBtZp8",
  "id_token":"jwt_header.jwt_payload.jwt_crypto"
}]]></artwork>
              </figure></t>
          </section>
        </section>

        <section title="4th Party Native Applications">
          <t>Fourth party native applications involve four parties: 1) the
          user, 2) the native (desktop) application, 3) the authorization
          server, and 4) the client servlet web application. The native
          application uses protected resources from a client servlet but it
          integrates with authentication services from the authorization
          server directly. The native application directs the user to perform
          authentication at the authorization server to obtain access and ID
          tokens. The tokens can then be used to access protected resources at
          the web servlet client. The process of obtaining an ID Token for the
          native application is very similar to that of using the code
          authorization (web server) flow method. However, the target audience
          of the ID Token is not the native application, but that of the
          client servlet. The client needs to indicate the target audience for
          the ID Token by setting the <spanx style="verb">id_token_audience</spanx>
          parameter in the authorization request to that of the identifier of
          the client servlet.</t>

          <figure>
            <artwork><![CDATA[                                     +-----------------------------+
+----------------+                   |                             |
|                |                   |   Authorization             |
|   Native App   |                   |      Server                 |
|                |                   |                             |
|                |                   |      +--------------------+ |
|                |>------------------|----->| Authorization      | |
|                |<------------------|-----<|   Endpoint         | |
|                |                   |      |                    | |
|                |                   |      |                    | |
|                |                   |      +--------------------+ |
|                |                   |      | Access Token       | |
|                |>------------------|----->|   Endpoint         | |
|                |<------------------|-----<|                    | |
|                |                   |      |                    | |
|                |                   |      +--------------------+ |
|                |>------------------|----->| Session Mgmt       | |
|                |<------------------|-----<|   Endpoints        | |
|                |                   |      |                    | |
+----------------+                   |      |                    | |
        ^                            |      |                    | |
        |                            |      +--------------------+ |
        v                            |                             |
+----------------+                   |                             |
| Client         |                   +-----------------------------+
| Servlet        |                                                  
|                |                                                  
+----------------+                                                  
]]></artwork>
          </figure>

          <t>When accessing protected resources at the client servlet, the
          native application sends the ID Token as an Auth HTTP header in the
          request. The client servlet can check the validity of the ID Token
          by verifying the cryptographic information or by sending the token
          to the check session token endpoint.</t>

          <t><figure>
              <artwork><![CDATA[GET /resource1
Auth: idtoken_jwt_header.idtoken_jwt_payload.idtoken_jwtcrypto
Host: servlet.example.com

]]></artwork>
            </figure></t>

          <section title="Browser Load">
            <t>Some native applications may wish to start an authenticated
            browser session for the same user. The native application starts a
            browser with the location of the client servlet and passing an ID
            Token as a query parameter. The client servlet immediately
            initiates a request to the refresh session endpoint with the ID
            Token. The user may need to reauthenticate at the authorization
            server. The client servlet then gets an ID Token that is session
            synchronized with the authorization server.</t>

            <t><figure>
                <artwork><![CDATA[                                                                    
                                        +--------------------------+
+------------+      +-----------+       |                          |
|            |      |           |       |   Authorization Server   |
| Native App |>---->|User-Agent |       |                          |
|            |      |           |       |    +------------------+  |
|            |      |           |>------|--->| Session Refresh  |  |
|            |      |           |<------|---<|    Endpoint      |  |
+------------+      +-----------+       |    |                  |  |
      ^                   ^             |    +------------------+  |
      |                   |             |                          |
      v                   v             |                          |
+--------------------------------+      |                          |
|                                |      |                          |
|       Client Servlet           |      |                          |
|                                |      |                          |
+--------------------------------+      +--------------------------+



GET
/refesh_token?state=bar&redirect_uri=https://foo.com/oauth2callback&id_token=$id_token // never uses immediate mode here, to allow login
Host: www.example.com

Response:

HTTP/1.1 302 Found
Location: https://foo.com/oauth2callback?state=bar&session=$new_id_token


]]></artwork>
              </figure></t>
          </section>
        </section>
      </section>

      <section title="Session Management Endpoints">
        <t>To manage a session, the client sends a request to the session
        management endpoints at the authorization server. The session
        management endpoints at the authorization server are:</t>

        <t><list style="hanging">
            <t hangText="Refresh Session">Refreshes an expired ID Token</t>

            <t hangText="Check Session">Get a plain text JSON structure from a
            ID Token</t>

            <t hangText="End Session">Ends a session</t>
          </list></t>

        <section title="Refresh Session">
          <t>To refresh an ID Token that has expired, the client sends a
          request to the Refresh Session endpoint with an ID Token. A new ID
          Token is returned in JWS format.</t>

          <t>Request Parameters:<list style="hanging">
              <t hangText="id_token">REQUIRED. A previously issued ID Token
              from an authorization request. The ID Token MAY be expired.</t>

              <t hangText="state">REQUIRED. An opaque value used by the Client
              to maintain state between the request and callback. If provided,
              the Authorization Server MUST include this value when
              redirecting the user-agent back to the Client. Clients are
              strongly advised to use this variable to relate the request and
              response.</t>

              <t hangText="redirect_uri">REQUIRED. An absolute URI to which
              the authorization server will redirect the user-agent to with
              the new ID Token.</t>
            </list></t>

          <t>Response:</t>

          <t>The response is a new ID Token. In a typical HTTP binding, an
          HTTP 302 redirect to the specified redirect_uri in the request with
          a new ID Token.</t>

          <t><list style="hanging">
              <t hangText="id_token">A new ID Token</t>
            </list></t>

          <t>The following is a non-normative session refresh request:</t>

          <t><figure width="">
              <artwork><![CDATA[Request:

GET /op/refresh_session?id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6
ImNsaWVudC5leGFtcGxlLmNvbSJ9.eyJpc3N1ZXIiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbXBs
ZS5jb20iLCJjbGllbnRfaWQiOiJjbGllbnQuZXhhbXBsZS5jb20iLCJhdWRpZW5jZSI6ImNsa
WVudC5leGFtcGxlLmNvbSIsImlkIjoidXNlcl8yMzQyMzQiLCJleHAiOjEzMDM4NTI4ODB9.a
JwagC6501Da-zK-X8Az9B-Y625aSEfxVuBpFEDjOxQ
&state=bar&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fidtoken_cb
Host: server.example.com

Response:

HTTP/1.1 302 OK
Location: http://client.example.com/idtoken_cb#id_token=eyJ0eXAiOiJKV1QiLCJh
bGciOiJIUzI1NiIsImtpZCI6ImNsaWVudC5leGFtcGxlLmNvbSJ9.eyJpc3N1ZXIiOiJodHRwO
lwvXC9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJjbGllbnRfaWQiOiJjbGllbnQuZXhhbXBsZS5jb20
iLCJhdWRpZW5jZSI6ImNsaWVudC5leGFtcGxlLmNvbSIsImlkIjoidXNlcl8yMzQyMzQiLCJle
HAiOjEzMDM4NTI4ODB9.aJwagC6501Da-zK-X8Az9B-Y625aSEfxVuBpFEDjOxQ&state=bar&
expires_in=3600
]]></artwork>
            </figure></t>
        </section>

        <section title="Check Session">
          <t>For clients that are not capable of dealing with JWS signed ID
          Tokens, they can send the ID Token to the Check Session endpoint. It
          will validate the ID Token and return a plain text JSON structure of
          the ID Token.</t>

          <t>Request Parameters:<list style="hanging">
              <t hangText="id_token">REQUIRED. A previously issued ID
              Token</t>
            </list></t>

          <t>Response:</t>

          <t>The response body is a plain text JSON structure of the claims in
          the ID token.</t>

          <t>If the ID token is a <xref target="JWS">JWS</xref>, then it is
          the base64url decoded payload of the signed ID Token. In a typical
          HTTP binding, the response is a HTTP 200 response code with the
          content-type header set to "application/json".</t>

          <t>The following is a non-normative example of a check session
          request:</t>

          <t><figure>
              <artwork><![CDATA[Request:
POST /op/check_session?id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6
ImNsaWVudC5leGFtcGxlLmNvbSJ9.eyJpc3N1ZXIiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbXBs
ZS5jb20iLCJjbGllbnRfaWQiOiJjbGllbnQuZXhhbXBsZS5jb20iLCJhdWRpZW5jZSI6ImNsa
WVudC5leGFtcGxlLmNvbSIsImlkIjoidXNlcl8yMzQyMzQiLCJleHAiOjEzMDM4NTI4ODB9.a
JwagC6501Da-zK-X8Az9B-Y625aSEfxVuBpFEDjOxQ

Response:
HTTP/1.1 200 OK
Content-Type: application/json

{
  "issuer":"http://server.example.com",
  "client_id","http://client.example.com",
  "audience", "http://client.example.com",
  "user_id":"user_328723",
  "exp":1303852880
}

]]></artwork>
            </figure></t>
        </section>

        <section title="End Session">
          <t>To end the session, the client sends an ID Token to the End
          Session endpoint. Upon receiving the request, the authorization
          server performs the logout flow for the user and then redirects the
          user-agent to the specified redirect_uri.</t>

          <t>Request Parameters:<list style="hanging">
              <t hangText="id_token">REQUIRED. A previously issued ID
              Token</t>

              <t hangText="state">REQUIRED. An opaque value used by the Client
              to maintain state between the request and callback. If provided,
              the Authorization Server MUST include this value when
              redirecting the user-agent back to the Client. Clients are
              strongly advised to use this variable to relate the request and
              response.</t>

              <t hangText="redirect_uri">REQUIRED. An absolute URI to which
              the authorization server will redirect the user-agent.</t>
            </list></t>

          <t>Response:</t>

          <t>The response is dependent on the particular binding. In HTTP
          binding, the response is a HTTP 302 redirect response to the
          redirect_uri specified in the request.</t>

          <t>The following is a non-normative session refresh request:</t>

          <t><figure>
              <artwork><![CDATA[Request:

GET /op/end_session?id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6
ImNsaWVudC5leGFtcGxlLmNvbSJ9.eyJpc3N1ZXIiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbX
BsZS5jb20iLCJjbGllbnRfaWQiOiJjbGllbnQuZXhhbXBsZS5jb20iLCJhdWRpZW5jZSI6I
mNsaWVudC5leGFtcGxlLmNvbSIsImlkIjoidXNlcl8yMzQyMzQiLCJleHAiOjEzMDM4NTI4
ODB9.aJwagC6501Da-zK-X8Az9B-Y625aSEfxVuBpFEDjOxQ
&state=bar
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fendtoken_cb
Host: server.example.com

...
   Authorization server performs logout flow
...

Response:

HTTP/1.1 302 OK
Location: http://client.example.com/endtoken_cb?state=bar
]]></artwork>
            </figure></t>
        </section>
      </section>

      <section title="Session Synchronization">
        <t>An ID Token is usually bound to a user's sign in session at the
        authorization server, but in some cases, such as offline access by a
        web server or native application, it may not be. ID Tokens obtained in
        the following scenarios are bound to a user's signed-in state at the
        authorization server:</t>

        <t><list style="symbols">
            <t>Redeeming a code for an access and ID Token by way of indirect
            communication through the browser</t>

            <t>Obtaining an access and ID Token in the authorization response
            through the browser</t>

            <t>Obtaining an ID Token at the refresh session endpoint by
            submitting a previously issued ID Token</t>
          </list>ID Tokens obtained in the above manner are session
        synchronized.</t>

        <t>If an ID Token is obtained by submitting a refresh token at the
        access token endpoint, then the resulting ID Token is not bound to a
        user's sign in state at the authorization server. The client may be in
        offline mode or the user has logged out from the authorization server.
        If a session bound ID Token is desired, the client should obtain a new
        ID Token by sending a request to the refresh session endpoint.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t></t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119"?>

      <reference anchor="OpenID.Core">
        <front>
          <title>OpenID Connect Core 1.0</title>

          <author fullname="David Recordon" initials="D." surname="Recordon">
            <organization abbrev="">Facebook</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft Corporation</organization>
          </author>

          <author fullname="Edmund" initials="E." surname="Jay">
            <organization abbrev="">MGI1</organization>
          </author>

          <date day="6" month="July" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-core-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="JWT">
        <front>
          <title>JSON Web Token</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft Corporation</organization>
          </author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="pgs">rotivity Government
            Service</organization>
          </author>

          <author fullname="Yaron Goland" initials="Y." surname="Goland">
            <organization abbrev="msft">Microsoft</organization>
          </author>

          <author fullname="John Panzer" initials="J." surname="Panzer">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="nri">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="Paul Tarjan" initials="P." surname="Tarjan">
            <organization abbrev="fb">Facebook</organization>
          </author>

          <date day="30" month="March" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-jones-json-web-token"
                type="HTML" />
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signatures</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft Corporation</organization>
          </author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="pgs">rotivity Government
            Service</organization>
          </author>

          <author fullname="Yaron Goland" initials="Y." surname="Goland">
            <organization abbrev="msft">Microsoft</organization>
          </author>

          <author fullname="John Panzer" initials="J." surname="Panzer">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="nri">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="Paul Tarjan" initials="P." surname="Tarjan">
            <organization abbrev="fb">Facebook</organization>
          </author>

          <date day="29" month="April" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-jones-json-web-signature"
                type="HTML" />
      </reference>

      <reference anchor="OAuth.2.0">
        <front>
          <title>OAuth 2.0 Authorization Protocol</title>

          <author fullname="Eran Hammer-Lahav" initials="E." role="editor"
                  surname="Hammer-Lahav">
            <organization abbrev="">Yahoo</organization>
          </author>

          <author fullname="David Recordon" initials="D." surname="Recordon">
            <organization abbrev="">Facebook</organization>
          </author>

          <author fullname="Dick Hardt" initials="D." surname="Hardt">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <date day="19" month="May" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2"
                type="HTML" />
      </reference>

    </references>

    <!-- <references title="Informative References"> -->
    <!-- </references> -->

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t></t>
    </section>

    <section title="Document History">
      <t>
        [[ To be removed from the final specification ]]
      </t>
      <t>
	-01
	<list style='symbols'>
	  <t>
	    Consistency and cleanup pass, including removing unused references.
	  </t>
	</list>
      </t>
      <t>
	-00
	<list style='symbols'>
          <t>
	    Split from core when all optional features were removed.
	  </t>
	</list>
      </t>
    </section>

  </back>
</rfc>
