<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.18 (Ruby 3.1.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="none" docName="authorization-api-1_0" category="std" consensus="true" submissionType="IETF" xml:lang="en">
  <front>
    <title abbrev="azapi">Authorization API 1.0 â€“ draft 00</title>

    <author initials="O." surname="Gazitt" fullname="Omri Gazitt" role="editor">
      <organization>Aserto</organization>
      <address>
        <email>omri@aserto.com</email>
      </address>
    </author>
    <author initials="D." surname="Brossard" fullname="David Brossard" role="editor">
      <organization>Axiomatics</organization>
      <address>
        <email>david.brossard@axiomatics.com</email>
      </address>
    </author>
    <author initials="A." surname="Tulshibagwale" fullname="Atul Tulshibagwale" role="editor">
      <organization>SGNL</organization>
      <address>
        <email>atul@sgnl.ai</email>
      </address>
    </author>

    <date year="2024" month="August" day="14"/>

    
    <workgroup>OpenID AuthZEN</workgroup>
    <keyword>Authorization</keyword> <keyword>Access Management</keyword> <keyword>XACML</keyword> <keyword>OPA</keyword> <keyword>Topaz</keyword> <keyword>Cedar</keyword> <keyword>PDP</keyword> <keyword>PEP</keyword> <keyword>ALFA</keyword>

    <abstract>


<?line 88?>

<t>The Authorization API enables Policy Decision Points (PDPs) and Policy Enforcement Points (PEPs) to communicate authorization requests and decisions to each other without requiring knowledge of each other's inner workings. The Authorization API is served by the PDP and is called by the PEP. The Authorization API includes an Evaluation endpoint, which provides specific access decisions. Other endpoints may be added in the future for other scenarios, including searching for subjects or resources.</t>



    </abstract>



  </front>

  <middle>


<?line 92?>

<section anchor="introduction"><name>Introduction</name>
<t>Computational services often implement access control within their components by separating Policy Decision Points (PDPs) from Policy Enforcement Points (PEPs). PDPs and PEPs are defined in XACML (<xref target="XACML"/>) and NIST's ABAC SP 800-162 (<xref target="ABAC"/>). Communication between PDPs and PEPs follows similar patterns across different software and services that require or provide authorization information. The Authorization API described in this document enables different providers to offer PDP and PEP capabilities without having to bind themselves to one particular implementation of a PDP or PEP.</t>

</section>
<section anchor="model"><name>Model</name>
<t>The Authorization API is a transport-agnostic API published by the PDP, to which the PEP acts as a client. Possible bindings of this specification, such as HTTPS or gRPC, are described in Transport (<xref target="transport"/>).</t>

<t>Authorization for the Authorization API itself is out of scope for this document, since authorization for APIs is well-documented elsewhere. For example, the Authorization API's HTTPS binding MAY support authorization using an <spanx style="verb">Authorization</spanx> header, using a <spanx style="verb">basic</spanx> or <spanx style="verb">bearer</spanx> token. Support for OAuth 2.0 (<xref target="RFC6749"/>) is RECOMMENDED.</t>

</section>
<section anchor="features"><name>Features</name>
<t>The core feature of the Authorization API is the Access Evaluation API, which enables a PEP to find out if a specific request can be permitted to access a specific resource. The following are non-normative examples:</t>

<t><list style="symbols">
  <t>Can Alice view document #123?</t>
  <t>Can Alice view document #123 at 16:30 on Tuesday, June 11, 2024?</t>
  <t>Can a manager print?</t>
</list></t>

</section>
<section anchor="api-version"><name>API Version</name>
<t>This document describes the API version 1. Any updates to this API through subsequent revisions of this document or other documents MAY augment this API, but MUST NOT modify the API described here. Augmentation MAY include additional API methods or additional parameters to existing API methods, additional authorization mechanisms, or additional optional headers in API requests. All API methods for version 1 MUST be immediately preceded by the relative URL path <spanx style="verb">/v1/</spanx>.</t>

</section>
<section anchor="information-model"><name>Information Model</name>
<t>The information model for requests and responses include the following entities: Subject, Action, Resource, Context, and Decision. These are all defined below.</t>

<section anchor="subject"><name>Subject</name>
<t>A Subject is the user or robotic principal about whom the Authorization API is being invoked. The Subject may be requesting access at the time the Authorization API is invoked.</t>

<t>A Subject is a JSON (<xref target="RFC8259"/>) object that contains any number of key-value pair attributes. However, there are a minimal number of fields that are required in order to properly resolve a Subject.</t>

<dl>
  <dt><spanx style="verb">type</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value that specifies the type of the Subject.</t>
  </dd>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. The unique identifier of the Subject, scoped to the <spanx style="verb">type</spanx>.</t>
  </dd>
</dl>

<t>A Subject MAY contain zero or more additional key-value pairs.</t>

<t>The following is a non-normative example of a subject:</t>

<figure title="Example Subject" anchor="subject-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com"
}
]]></sourcecode></figure>

<section anchor="subject-identifier"><name>Subject Identifier</name>
<t>The <spanx style="verb">id</spanx> field of a Subject MAY be any valid JSON value. It MAY be a string, or it MAY be a structured identifier. For example, it MAY follow the format specified by the <spanx style="verb">Subject Identifiers for Security Event Tokens</spanx> specification <xref target="RFC9493"/>.</t>

<t>The following is a non-normative example of a Subject Identifier as a simple string:</t>

<figure title="Example of Simple Subject Identifier" anchor="subject-identifier-example-simple"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of a Subject Identifier in the <xref target="RFC9493"/> Email Identifier Format:</t>

<figure title="Example Subject Identifier as RFC9493 Subject" anchor="subject-identifier-example-rfc9493"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": {
    "format" : "email",
    "email": "alice@acmecorp.com"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="subject-type"><name>Subject Type</name>
<t>Since <xref target="RFC9493"/> only concerns itself with the <em>format</em> of the identifier and not its <em>type</em>, every Subject MUST also include a string-valued <spanx style="verb">type</spanx> field, which identifies the type of Subject.</t>

<t>The following is a non-normative example of a Subject of type <spanx style="verb">group</spanx> with a Subject Identifier as a simple string:</t>

<figure title="Example Group Subject Type" anchor="subject-type-group-example"><sourcecode type="json"><![CDATA[
{
  "type": "group",
  "id": "engineering@acmecorp.com"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of a Subject of type <spanx style="verb">group</spanx> with a Subject Identifier in the <xref target="RFC9493"/> Email Identifier Format:</t>

<figure title="Example Subject Type in RFC9493 Format" anchor="subject-type-example-rfc-9493"><sourcecode type="json"><![CDATA[
{
  "type": "group",
  "id": {
    "format" : "email",
    "email": "engineering@acmecorp.com"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="subject-attributes"><name>Subject Attributes</name>
<t>Many authorization systems are stateless, and expect the client (PEP) to pass in any attributes that are expected to be used in the evaluation of the authorization policy. To satisfy this requirement, Subjects MAY include zero or more additional attributes as key-value pairs.</t>

<t>An attribute can be single-valued or multi-valued. It can be a primitive type (string, boolean, number) or a complex type such as a JSON object or JSON array.</t>

<t>The following is a non-normative example of a Subject which adds a string-valued <spanx style="verb">department</spanx> attribute:</t>

<figure title="Example Subject with Additional Attribute" anchor="subject-department-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "department": "Sales"
}
]]></sourcecode></figure>

<t>To increase interoperability, a few common attributes are specified below:</t>

<section anchor="subject-ip-address"><name>IP Address</name>
<t>The IP Address of the Subject, identified by an <spanx style="verb">ip_address</spanx> field, whose value is a textual representation of an IP Address, as defined in <spanx style="verb">Textual Conventions for Internet Network Addresses</spanx> <xref target="RFC4001"/>.</t>

<t>The following is a non-normative example of a subject which adds the <spanx style="verb">ip_address</spanx> attribute:</t>

<figure title="Example Subject with IP Address" anchor="subject-ip-address-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "department": "Sales",
  "ip_address": "172.217.22.14"
}
]]></sourcecode></figure>

</section>
<section anchor="subject-device-id"><name>Device ID</name>
<t>The Device Identifier of the Subject, identified by a <spanx style="verb">device_id</spanx> field, whose value is a string representation of the device identifier.</t>

<t>The following is a non-normative example of a subject which adds the <spanx style="verb">device_id</spanx> attribute:</t>

<figure title="Example Subject with Device ID" anchor="subject-device-id-example"><sourcecode type="json"><![CDATA[
{
  "type": "user",
  "id": "alice@acmecorp.com",
  "department": "Sales",
  "ip_address": "172.217.22.14",
  "device_id": "8:65:ee:17:7e:0b"
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="resource"><name>Resource</name>
<t>A Resource is the target of an access request. It is a JSON (<xref target="RFC8259"/>) object that is constructed similar to a Subject entity.</t>

<dl>
  <dt><spanx style="verb">type</spanx>:</dt>
  <dd>
    <t>REQUIRED. A <spanx style="verb">string</spanx> value that specifies the type of the Resource.</t>
  </dd>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. The unique identifier of the Resource, scoped to the <spanx style="verb">type</spanx>. The value MAY be any valid JSON value, including a simple string. It also MAY follow the format specified by the <spanx style="verb">Subject Identifiers for Security Event Tokens</spanx> specification <xref target="RFC9493"/>.</t>
  </dd>
</dl>

<section anchor="examples-non-normative"><name>Examples (non-normative)</name>

<t>The following is a non-normative example of a Resource with a <spanx style="verb">type</spanx> and a simple <spanx style="verb">id</spanx>:</t>

<figure title="Example Resource" anchor="resource-example"><sourcecode type="json"><![CDATA[
{
  "type": "book",
  "id": "123"
}
]]></sourcecode></figure>

<t>The following is a non-normative example of a Resource containing a Subject Identifier in the Opaque Identifier Format, with additional structured attributes:</t>

<figure title="Example Resource with Subject Identifier and Additional Attributes" anchor="resource-example-structured"><sourcecode type="json"><![CDATA[
{
  "type": "book",
  "id": {
    "format": "opaque",
    "value": "123"
  },
  "library_record":{
    "title": "AuthZEN in Action",
    "isbn": "978-0593383322"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="action"><name>Action</name>
<t>An Action is the type of access that the requester intends to perform.</t>

<t>Action is a JSON (<xref target="RFC8259"/>) object that contains at least a <spanx style="verb">name</spanx> field.</t>

<dl>
  <dt><spanx style="verb">name</spanx>:</dt>
  <dd>
    <t>REQUIRED. The name of the Action.</t>
  </dd>
</dl>

<t>The following is a non-normative example of an action:</t>

<figure title="Example Action" anchor="action-example"><sourcecode type="json"><![CDATA[
{
  "name": "can_read"
}
]]></sourcecode></figure>

<section anchor="common-action-values"><name>Common Action Values</name>
<t>Since many services follow a Create-Read-Update-Delete convention, a set of common Actions are defined. That said, an Action may be specific to the application being accessed or shared across applications but not listed in the common Actions below.</t>

<t>The following common Actions are defined:</t>

<t><list style="symbols">
  <t><spanx style="verb">can_access</spanx>: A generic Action that could mean any type of access. This is useful if the policy or application is not interested in different decisions for different types of Actions.</t>
  <t><spanx style="verb">can_create</spanx>: The Action to create a new entity, which MAY be defined by the <spanx style="verb">resource</spanx> field in the request.</t>
  <t><spanx style="verb">can_read</spanx>: The Action to read the content. Based on the Resource being accessed, this could mean a list functionality or reading an individual Resource's contents.</t>
  <t><spanx style="verb">can_update</spanx>: The Action to update the content of an existing Resource. This represents a partial update or an entire replacement of an entity that MAY be identified by the Resource in the request.</t>
  <t><spanx style="verb">can_delete</spanx>: The Action to delete a Resource. The specific entity MAY be identified by the Resource in the request.</t>
</list></t>

<t>PDP Policies MAY incorporate common Action names to provide different decisions based on the Action.</t>

</section>
</section>
<section anchor="context"><name>Context</name>
<t>The Context object is a set of attributes that represent environmental or contextual data about the request such as time of day. It is a JSON (<xref target="RFC8259"/>) object.</t>

<t>The following is a non-normative example of a Context:</t>

<figure title="Example Context" anchor="context-example"><sourcecode type="json"><![CDATA[
{
  "time": "1985-10-26T01:22-07:00"
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="access-evaluation-api"><name>Access Evaluation API</name>

<t>The Access Evaluation API defines the message exchange pattern between a client (PEP) and an authorization service (PDP) for executing a single access evaluation.</t>

<section anchor="access-evaluation-request"><name>The Access Evaluation API Request</name>
<t>The Access Evaluation request is a 4-tuple constructed of the four previously defined entities:</t>

<dl>
  <dt><spanx style="verb">subject</spanx>:</dt>
  <dd>
    <t>REQUIRED. The subject (or principal) of type Subject</t>
  </dd>
  <dt><spanx style="verb">action</spanx>:</dt>
  <dd>
    <t>REQUIRED. The action (or verb) of type Action.</t>
  </dd>
  <dt><spanx style="verb">resource</spanx>:</dt>
  <dd>
    <t>REQUIRED. The resource of type Resource.</t>
  </dd>
  <dt><spanx style="verb">context</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The context (or environment) of type Context.</t>
  </dd>
</dl>

<section anchor="example-non-normative"><name>Example (non-normative)</name>

<figure title="Example Request" anchor="request-example"><sourcecode type="json"><![CDATA[
{
  "subject": {
    "type": "user",
    "id": {
      "format": "iss_sub",
      "iss": "https://issuer.example.com/",
      "sub": "145234573"
    }
  },
  "resource": {
    "type": "account",
    "id": "123"
  },
  "action": {
    "name": "can_read",
    "method": "GET"
  },
  "context": {
    "time": "1985-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
</section>
<section anchor="access-evaluation-response"><name>The Access Evaluation API Response</name>
<t>The simplest form of a response is simply a boolean representing a Decision, indicated by a <spanx style="verb">"decision"</spanx> field.</t>

<dl>
  <dt><spanx style="verb">decision</spanx>:</dt>
  <dd>
    <t>REQUIRED. A boolean value that specifies whether the Decision is to allow or deny the operation.</t>
  </dd>
</dl>

<t>In this specification, assuming the evaluation was successful, there are only 2 possible responses:</t>

<t><list style="symbols">
  <t><spanx style="verb">true</spanx>: The access request is permitted to go forward.</t>
  <t><spanx style="verb">false</spanx>: The access request is denied and MUST NOT be permitted to go forward.</t>
</list></t>

<t>The response object MUST contain this boolean-valued Decision key.</t>

<section anchor="decision"><name>Access Evaluation Decision</name>
<t>The following is a non-normative example of a simple Decision:</t>

<figure title="Example Decision" anchor="decision-example"><sourcecode type="json"><![CDATA[
{
  "decision": true
}
]]></sourcecode></figure>

</section>
<section anchor="additional-context-in-a-response"><name>Additional Context in a Response</name>
<t>In addition to a <spanx style="verb">"decision"</spanx>, a response may contain a <spanx style="verb">"context"</spanx> field which can be any JSON object.  This context can convey additional information that can be used by the PEP as part of the decision evaluation process. Examples include:</t>

<t><list style="symbols">
  <t>XACML's notion of "advice" and "obligations"</t>
  <t>Hints for rendering UI state</t>
  <t>Instructions for step-up authentication</t>
</list></t>

</section>
<section anchor="example-context"><name>Example Context</name>
<t>An implementation MAY follow a structured approach to <spanx style="verb">"context"</spanx>, in which it presents the reasons that an authorization request failed.</t>

<t><list style="symbols">
  <t>A list of identifiers representing the items (policies, graph nodes, tuples) that were used in the decision-making process.</t>
  <t>A list of reasons as to why access is permitted or denied.</t>
</list></t>

<section anchor="reasons"><name>Reasons</name>
<t>Reasons MAY be provided by the PDP.</t>

<section anchor="reason-field"><name>Reason Field</name>
<t>A Reason Field is a JSON object that has keys and values of type <spanx style="verb">string</spanx>. The following are non-normative examples of Reason Field objects:</t>

<figure title="Example Reason" anchor="reason-example"><sourcecode type="json"><![CDATA[
{
  "en": "location restriction violation"
}
]]></sourcecode></figure>

</section>
<section anchor="reason-object"><name>Reason Object</name>
<t>A Reason Object specifies a particular reason. It is a JSON object that has the following fields:</t>

<dl>
  <dt><spanx style="verb">id</spanx>:</dt>
  <dd>
    <t>REQUIRED. A string value that specifies the reason within the scope of a particular response.</t>
  </dd>
  <dt><spanx style="verb">reason_admin</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The reason, which MUST NOT be shared with the user, but useful for administrative purposes that indicates why the access was denied. The value of this field is a Reason Field object (<xref target="reason-field"/>).</t>
  </dd>
  <dt><spanx style="verb">reason_user</spanx>:</dt>
  <dd>
    <t>OPTIONAL. The reason, which MAY be shared with the user that indicates why the access was denied. The value of this field is a Reason Field object (<xref target="reason-field"/>).</t>
  </dd>
</dl>

<t>The following is a non-normative example of a Reason Object:</t>

<figure title="Example of a Reason Object" anchor="example-reason-object"><sourcecode type="json"><![CDATA[
{
  "id": "0",
  "reason_admin": {
    "en": "Request failed policy C076E82F"
  },
  "reason_user": {
    "en-403": "Insufficient privileges. Contact your administrator",
    "es-403": "Privilegios insuficientes. PÃ³ngase en contacto con su administrador"
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="sample-response-with-additional-context-non-normative"><name>Sample Response with additional context (non-normative)</name>

<figure title="Example Response with Context" anchor="response-with-context-example"><sourcecode type="json"><![CDATA[
{
  "decision": true,
  "context": {
    "id": "0",
    "reason_admin": {
      "en": "Request failed policy C076E82F"
    },
    "reason_user": {
      "en-403": "Insufficient privileges. Contact your administrator",
      "es-403": "Privilegios insuficientes. PÃ³ngase en contacto con su administrador"
    }
  }
}
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="transport"><name>Transport</name>

<t>This specification defines an HTTPS binding which MUST be implemented by a compliant PDP.</t>

<t>Additional transport bindings (e.g. gRPC) MAY be defined in the future in the form of profiles, and MAY be implemented by a PDP.</t>

<section anchor="https-binding"><name>HTTPS Binding</name>

<section anchor="https-access-evaluation-request"><name>HTTPS Access Evaluation Request</name>
<t>The Access Evaluation Request is an HTTPS request with <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluation Request, as defined in <xref target="access-evaluation-request"/>.</t>

<t>The following is a non-normative example of the HTTPS binding of the Access Evaluation Request:</t>

<figure title="Example of an HTTPS Access Evaluation Request" anchor="example-access-evaluation-request"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluation HTTP/1.1
Host: pdp.mycompany.com
Authorization: Bearer <myoauthtoken>
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "subject": {
    "type": "user",
    "id": "alice@acmecorp.com"
  },
  "resource": {
    "type": "todo",
    "id": "1",
  },
  "action": {
    "name": "can_read"
  },
  "context": {
    "time": "1985-10-26T01:22-07:00"
  }
}
]]></sourcecode></figure>

</section>
<section anchor="access-evaluation-https-response"><name>Access Evaluation HTTPS Response</name>
<t>The success response to an Access Evaluation Request is an Access Evaluation Response. It is an HTTPS response with a <spanx style="verb">status</spanx> code of <spanx style="verb">200</spanx>, and <spanx style="verb">content-type</spanx> of <spanx style="verb">application/json</spanx>. Its body is a JSON object that contains the Access Evaluation Response, as defined in <xref target="access-evaluation-response"/>.</t>

<t>Following is a non-normative example of an HTTPS Access Evaluation Response:</t>

<figure title="Example of an HTTPS Access Evaluation Response" anchor="example-access-evaluation-response"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716

{
  "decision": true
}
]]></sourcecode></figure>

</section>
<section anchor="error-responses"><name>Error Responses</name>
<t>The following error responses are common to all methods of the Authorization API. The error response is indicated by an HTTPS status code (<xref section="15" sectionFormat="of" target="RFC9110"/>) that indicates error.</t>

<t>The following errors are indicated by the status codes defined below:</t>

<texttable title="HTTPS Error status codes" anchor="_table-error-status-codes">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>HTTPS Body Content</ttcol>
      <c>400</c>
      <c>Bad Request</c>
      <c>An error message string</c>
      <c>401</c>
      <c>Unauthorized</c>
      <c>An error message string</c>
      <c>403</c>
      <c>Forbidden</c>
      <c>An error message string</c>
      <c>500</c>
      <c>Internal error</c>
      <c>An error message string</c>
</texttable>

<t>Note: HTTPS errors are returned by the PDP to indicate an error condition relating to the request or its processing, and are unrelated to the outcome of an authorization decision, which is always returned with a <spanx style="verb">200</spanx> status code and a response payload.</t>

<t>To make this concrete:
* a <spanx style="verb">401</spanx> HTTPS status code indicates that the caller (policy enforcement point) did not properly authenticate to the PDP - for example, by omitting a required <spanx style="verb">Authorization</spanx> header, or using an invalid access token.
* the PDP indicates to the caller that the authorization request is denied by sending a response with a <spanx style="verb">200</spanx> HTTPS status code, along with a payload of <spanx style="verb">{ "decision": false }</spanx>.</t>

</section>
<section anchor="request-identification"><name>Request Identification</name>
<t>All requests to the API MAY have request identifiers to uniquely identify them. The API client (PEP) is responsible for generating the request identifier. If present, the request identifier SHALL be provided using the HTTPS Header <spanx style="verb">X-Request-ID</spanx>. The value of this header is an arbitrary string. The following non-normative example describes this header:</t>

<figure title="Example HTTPS request with a Request Id Header" anchor="request-id-example"><sourcecode type="http"><![CDATA[
POST /access/v1/evaluation HTTP/1.1
Authorization: Bearer mF_9.B5f-4.1JqM
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716
]]></sourcecode></figure>

</section>
<section anchor="request-identification-in-a-response"><name>Request Identification in a Response</name>
<t>A PDP responding to an Authorization API request that contains an <spanx style="verb">X-Request-ID</spanx> header MUST include a request identifier in the response. The request identifier is specified in the HTTPS Response header: <spanx style="verb">X-Request-ID</spanx>. If the PEP specified a request identifier in the request, the PDP MUST include the same identifier in the response to that request.</t>

<t>The following is a non-normative example of an HTTPS Response with this header:</t>

<figure title="Example HTTPS response with a Request Id Header" anchor="example-response-request-id"><sourcecode type="http"><![CDATA[
HTTP/1.1 OK
Content-type: application/json
X-Request-ID: bfe9eb29-ab87-4ca3-be83-a1d5d8305716
]]></sourcecode></figure>

</section>
</section>
</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This specification does not introduce any new identifiers that would require registration with IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>

<section anchor="communication-integrity-and-confidentiality"><name>Communication Integrity and Confidentiality</name>

<t>In the ABAC architecture, the PEP-PDP connection is the most sensitive one and needs to be secured to guarantee:</t>

<t><list style="symbols">
  <t>Integrity</t>
  <t>Confidentiality</t>
</list></t>

<t>As a result, the connection between the PEP and the PDP MUST be secured using the most adequate means given the choice of transport (e.g. TLS for HTTP REST).</t>

</section>
<section anchor="policy-confidentiality-and-sender-authentication"><name>Policy Confidentiality and Sender Authentication</name>

<t>Additionally, the PDP SHOULD authenticate the calling PEP. There are several ways authentication can be established. These ways are out of scope of this specification. They MAY include:</t>

<t><list style="symbols">
  <t>Mutual TLS</t>
  <t>OAuth-based authentication</t>
  <t>API key</t>
</list></t>

<t>The choice and strength of either mechanism is not in scope.</t>

<t>Authenticating the PEP allows the PDP to avoid common attacks (such as DoS - see below) and/or reveal its internal policies. A malicious actor could craft a large number of requests to try and understand what policies the PDP is configured with. Requesting a client (PEP) be authenticated mitigates that risk.</t>

</section>
<section anchor="trust"><name>Trust</name>

<t>In ABAC, there is occasionally conversations around the trust between PEP and PDP: how can the PDP trust the PEP to send the right values in? This is a misplaced concern. The PDP must trust the PEP as ultimately, the PEP is the one responsible for enforcing the decision the PDP produces.</t>

</section>
<section anchor="availability-denial-of-service"><name>Availability &amp; Denial of Service</name>

<t>The PDP SHOULD apply reasonable protections to avoid common attacks tied to request payload size, the number of requests, invalid JSON, nested JSON attacks, or memory consumption. Rate limiting is one such way to address such issues.</t>

</section>
</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">





<reference anchor="RFC4001">
<front>
<title>Textual Conventions for Internet Network Addresses</title>
<author fullname="M. Daniele" initials="M." surname="Daniele"><organization/></author>
<author fullname="B. Haberman" initials="B." surname="Haberman"><organization/></author>
<author fullname="S. Routhier" initials="S." surname="Routhier"><organization/></author>
<author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"><organization/></author>
<date month="February" year="2005"/>
<abstract><t>This MIB module defines textual conventions to represent commonly used Internet network layer addressing information.  The intent is that these textual conventions will be imported and used in MIB modules that would otherwise define their own representations.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="4001"/>
<seriesInfo name="DOI" value="10.17487/RFC4001"/>
</reference>



<reference anchor="RFC6749">
<front>
<title>The OAuth 2.0 Authorization Framework</title>
<author fullname="D. Hardt" initials="D." role="editor" surname="Hardt"><organization/></author>
<date month="October" year="2012"/>
<abstract><t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name="RFC" value="6749"/>
<seriesInfo name="DOI" value="10.17487/RFC6749"/>
</reference>



<reference anchor="RFC8259">
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author fullname="T. Bray" initials="T." role="editor" surname="Bray"><organization/></author>
<date month="December" year="2017"/>
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name="STD" value="90"/>
<seriesInfo name="RFC" value="8259"/>
<seriesInfo name="DOI" value="10.17487/RFC8259"/>
</reference>



<reference anchor="RFC9110">
<front>
<title>HTTP Semantics</title>
<author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"><organization/></author>
<author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"><organization/></author>
<author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"><organization/></author>
<date month="June" year="2022"/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name="STD" value="97"/>
<seriesInfo name="RFC" value="9110"/>
<seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9493">
  <front>
    <title>Subject Identifiers for Security Event Tokens</title>
    <author fullname="A. Backman" initials="A." role="editor" surname="Backman"/>
    <author fullname="M. Scurtescu" initials="M." surname="Scurtescu"/>
    <author fullname="P. Jain" initials="P." surname="Jain"/>
    <date month="December" year="2023"/>
    <abstract>
      <t>Security events communicated within Security Event Tokens may support a variety of identifiers to identify subjects related to the event. This specification formalizes the notion of Subject Identifiers as structured information that describes a subject and named formats that define the syntax and semantics for encoding Subject Identifiers as JSON objects. It also establishes a registry for defining and allocating names for such formats as well as the JSON Web Token (JWT) "sub_id" Claim.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9493"/>
  <seriesInfo name="DOI" value="10.17487/RFC9493"/>
</reference>


<reference anchor="XACML" target="https://www.oasis-open.org/committees/xacml/repository/cs-xacml-specification-1.1.pdf">
  <front>
    <title>eXtensible Access Control Markup Language (XACML) Version 1.1</title>
    <author initials="S." surname="Godik" fullname="Simon Godik" role="editor">
      <organization>Overxeer</organization>
    </author>
    <author initials="T. M." surname="(Ed.)" fullname="Tim Moses (Ed.)" role="editor">
      <organization>Entrust</organization>
    </author>
    <date year="2006"/>
  </front>
</reference>


    </references>

    <references title='Informative References' anchor="sec-informative-references">

<reference anchor="ABAC" target="https://us.artechhouse.com/Attribute-Based-Access-Control-P1911.aspx">
  <front>
    <title>Attribute-Based Access Control</title>
    <author initials="K." surname="R." fullname="Kuhn, R.">
      <organization>NIST</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>

</references>


<?line 592?>

<section anchor="terminology"><name>Terminology</name>
<dl>
  <dt>Subject:</dt>
  <dd>
    <t>The user or robotic principal about whom the Authorization API call is being made.</t>
  </dd>
  <dt>Resource:</dt>
  <dd>
    <t>The target of the request; the resource about which the Authorization API is being made.</t>
  </dd>
  <dt>Action:</dt>
  <dd>
    <t>The operation the Subject has attempted on the Resource in an Authorization API call.</t>
  </dd>
  <dt>Context:</dt>
  <dd>
    <t>The environmental or contextual attributes for this request.</t>
  </dd>
  <dt>Decision:</dt>
  <dd>
    <t>The value of the evaluation decision made by the PDP: <spanx style="verb">true</spanx> for "allow", <spanx style="verb">false</spanx> for "deny".</t>
  </dd>
  <dt>PDP:</dt>
  <dd>
    <t>Policy Decision Point. The component or system that provides authorization decisions over the network interface defined here as the Authorization API.</t>
  </dd>
  <dt>PEP:</dt>
  <dd>
    <t>Policy Enforcement Point. The component or system that requests decisions from the PDP and enforces access to specific requests based on the decisions obtained from the PDP.</t>
  </dd>
</dl>

</section>
<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>This template uses extracts from templates written by
<contact fullname="Pekka Savola"/>, <contact fullname="Elwyn Davies"/> and
<contact fullname="Henrik Levkowetz"/>.</t>

</section>
<section anchor="document-history"><name>Document History</name>

<t>[[ To be removed from the final specification ]]</t>

<t>-00</t>

<t><list style="symbols">
  <t>Initial version</t>
</list></t>

</section>
<section anchor="Notices"><name>Notices</name>
<t>Copyright (c) 2024 The OpenID Foundation.</t>

<t>The OpenID Foundation (OIDF) grants to any Contributor, developer, implementer, or other interested party a non-exclusive, royalty free, worldwide copyright license to reproduce, prepare
derivative works from, distribute, perform and display, this Implementers Draft or Final Specification solely for the purposes of (i) developing specifications, and (ii) implementing
Implementers Drafts and Final Specifications based on such documents, provided that attribution be made to the OIDF as the source of the material, but that such attribution does not
indicate an endorsement by the OIDF.</t>

<t>The technology described in this specification was made available from contributions from various sources, including members of the OpenID Foundation and others. Although the OpenID
Foundation has taken steps to help ensure that the technology is available for distribution, it takes no position regarding the validity or scope of any intellectual property or other
rights that might be claimed to pertain to the implementation or use of the technology described in this specification or the extent to which any license under such rights might or might
not be available; neither does it represent that it has made any independent effort to identify any such rights. The OpenID Foundation and the contributors to this specification make no
(and hereby expressly disclaim any) warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or
title, related to this specification, and the entire risk as to implementing this specification is assumed by the implementer. The OpenID Intellectual Property Rights policy requires
contributors to offer a patent promise not to assert certain patent claims against other contributors and against implementers. The OpenID Foundation invites any interested party to bring
to its attention any copyrights, patents, patent applications, or other proprietary rights that may cover technology that may be required to practice this specification.</t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="M." surname="Jordan" fullname="Marc Jordan">
      <organization>SGNL</organization>
      <address>
        <email>marc@sgnl.ai</email>
      </address>
    </contact>
    <contact initials="E." surname="Gustavson" fullname="Erik Gustavson">
      <organization>SGNL</organization>
      <address>
        <email>erik@sgnl.ai</email>
      </address>
    </contact>
    <contact initials="A." surname="Babeanu" fullname="Alex Babeanu">
      <organization>3Edges</organization>
      <address>
        <email>alex@3edges.com</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA8Vd/XIbuZH/n0+BkqtupS0OTUr+ZO4uS+tjrY1t6SQ5lbtU
ygQ5IDnRcIYZDCVxtUrlHe5R7hHuTe5Jrr+AwZBD29rdJFupsjgDYBqN/vh1
o4FEUdSypc7iTzrNM9NXZbE0rWRR9FUGv1tjXfaVLWP1RB3OzPi6ZZejeWJt
kmflagHtT4+vTlq30746W5js9EgNluXsv44/tFpxPs70HFpoeJIXyY+6hE6R
XiRR71O31SqTMoW3g/CtGpyfql6nq/7vb/+t4kJPStXttvRoVJgbGOhH6NxK
dQZfM1nr+rbfUiqqj8BPxmNjrXqvMz01c5OV9PQPg8P37+ivs/MB/XuVL/SP
9NehiXVBf50fnfO/x/zv4N3JoPVExboEYve7+/tRF/+nooieqcSqSZKmJlZJ
hlPN50DHWKfpSo1W6m6e7heTsUomwM5STZMbIJwZ0m9FqsiRBSZOyrwADhdm
nt8Y15hWQsGwFpjbUd/rH5MSZ8JcPZsXSfUsL4AnA2uKModfZq6TtK9yaPKd
poedcT5X6jFfPOqoN0VurS5i/80jfZPE4WP+7F3Ck7bVp2Ns2RlJy++0b/J4
QgYddbVM7SwZ6emtTo2nZlAu041XRNHl9x/eVbRoaPednWZpRyetMchtkYxg
nUDCn6hLGAnEu1iOy2VhlLYirSpNbNlW0E5Nc2OBkjJXQV8LM2Aq3utirH7I
i1hnzZ+fQwP/edfruEiu1fdL0Lwbm2/paKDNRsdBau7UGz0yOlu6bgfH8dQE
zAdO3H13YPAhsrvVyvICuX9jUGEuTg6fdbs9nH1p7krg/KIwFpSENTCfqNNz
peMYHloaFTq8ePnsNXY4Q13jR6/2n9OjHy7PPvCT171eF5+8vbo6V5dASyYy
ge+evT4gfi9HfzbjUp3G8MFkkpgC1AfYfWnGyyIpV+oYFKQExbw2GXYlnUWq
lRJ7Yf5QwqtklBqn5oe4LHmKK3G9XKh3YB+WoPdqlzrvqd/DR3BmvU6PB9LF
1IBVm5XlwvafPr29ve3k2iY2ysGEdYClT4Frc1AsY+zTOz2ep0+BSblFUV09
HduInkV2YcYwhTHbNRi9s4gn9AWn4Pi3W7jLZA40fJ/HyTU9VzUNkEe0nGc3
prgzpqh1v0rm6n0OC6J2j+PO3heGOAaOgHDRI2e5ui9arSSbhKIweDM47KuQ
u4OSJdxEb8BwxGssppaJHWV99frlq96Lg+6rXu/gWa/2nd6rRi4vbUcXpRnP
ZvnSGpTLp2sfi/hjkXwsOu+BRHW0XdxtMLXiy9tlW/2+o+SpTP/D6eXVZ/qc
mKLQSZ7mbbBymz3VZ7oezsBVFnqeL9OkrS4e1/l3y1kGnRo/2YrAoegRmCI9
Llutq5lp8Iwm0yD3Vp3naTJeqSOQP5Ls8xzsE0gG+C67p4BC1+IY13tMLrBq
dIyNyJzN58sM5dfUfTSYhL8sjYXGOFQsX7HYx+jxTOXlzBTqNoEuy5IaJ0WS
TdV1lt+maHbQiFQtv0HzmWGPvLiGdhYMeuP0wJWCs7oBsQPPCT3RFxMJ8AI9
avDi+HzrINk4XcYGaQdjotMlvzJZvEAGtNXtLAHKFkUOHgqaOS1WmkXdT7ej
zmierqcFSw4+3aBtZG+PlEyW5DjQhjFb7BhWqUhy2xZSkDPWgBOY4V/Y0LIR
tLD+wD2bL2GJbIdFYJ7EMTgyQBynqAUxOCZENYf5fLFkC61T4lICfYDPYAxV
Ml+kvMYyh7FYRFwipjMpcLkXgOhwIsBFaxa6gPGApM9L06QAh/0lcergUrG4
4G+lgSWxmSQZM4oMsdq9v6c/Hh5YRlHwQTbQCKnLc/Wq2416L/axGT6CVh2w
O05EkbCRKW8NzLf+rUmepvktLGQyT1JdqIUGw12AuOoxwg8VJ5OJKZBkC+y6
RdKwr+dhOdNOiA2uiEjGmkp4y5ln2yQPpGkM9szJBggtQOAlMcspbkWLfKUg
rcrxqZd2mBWI+0KPkjQpE+jlNG0GoArWCzqMEmgHyzq3Jr0xPEZmYOoFuNwl
csHLhPfqmj4AE0TlQQF7n8cm3WJpgHgNKExndpEXZaSnWW5haHq3WI4AHc1q
atpGElizRD+B/WhAcJxxmgAhICOwHOS4kXw0BEgWMarmStugIDAOdEUkcYkk
Ty/OD9siVQGTrxyBKDSeWpScVqs+J1S7snmmJfBwghNGFgNBdgwwQDoEawhU
gT6viwU2g1Es9r81aRq55kCgSa25BZNgOuoEmpk7jWvSbqbjGzdb4Y16P/hP
4MOCZlf/5tLiezBvw9ooQzUzGiSq7Rqo4QhQzXiIDBwCYCxMMYRlAmTVARzG
IyP9BOrUPkRdwEUBe6ijMKWL48Oz9++PPxwdQziAMnNiNNo7S2IzztHy8RNe
yi2iRC/YNAUmGV46a+z0Q5PkgChNUMBxQRIUXG+jxTGBeqA1UAtTEEyLsYvY
vlprtq2ssGwniDNALgS3kYfFbm1sH4ywOoTBB2DvjLpJzG2lxE96+we//cJ7
CDZU70X/oAv6CLGJsbFetdUPS1DOXq+N8eMzN4QGf4LxKVocMKW/RfYivwSu
AodDC+LkXpgJ7W48rFWDbKWWCwRgZApIbrFJOSvy5XSGDsci5zI0dDfizZ3u
+U94F+aeWBJCvZzSazcqR0XvPwJq+XB2peaAaCcrT1Wlnyz5A+7NK47DiX9G
L5qIO8N+cwNyE5NLDN6gj4I3YibNHQRluIBBh3bYvK4ncwCbOkvsHBrVh80X
8gdrDOITGtPhHiA7rZOFeuIZzpMH+Uvmc8DewHYI9iGIGpu4MoqFSVm2Pl68
Q580U8OnN72nww77du9NAjMc+Bhkq0npszUwBiINTtxSRMp8LGuijVEV+oy+
i7TaoHhsVC9EG9qE5iHya9OIzu2TklhDygFYy7vvkYGhkegqeLt/IgjmoTXw
D0XNAdsXhGvyUY4OA2V7nCxwcUaoz7czgBNbDcXI4CSS7AasVMxq68YX8CXc
IDUWhS9pvDKZm+0DuyFbdYo1ha9i9zCiRbuX82vCBYikdIJgAlQsW85HOLuJ
ujarCA0ZulyAVtoFMiA5b/Nbc4NWGFVJ2AmoLkvmwINqBAh901jAB7YRAEJu
LS9AKFHgASSAiQPhQksGjh5GEuJhIkPMvw37rT5Y6f/4eHqBJnqghhBBAHOG
ismj8cUgiu3Abs5aB6Ml8dpYyHzAXsBulfhofa1jm71lzFbHKKapxmXUeeGi
+tEUOQrHHB1HoI91diIUrhtsWqlGi83ARsQRrPdf//pX9WfMqNxDkLWD1Oz0
1Q4K5U4bnyQx/tZovb+DIN6AC1tgLLrTesC+rfu+csIduU9QaPxvO8fyUya2
84A60ZTRqPQjqhj3QFNCLvPSM+EhkzCyACEDPiQxiyWxpKNOq/eKV5fsWVJ/
zBmsOFirNdgh7ZmrYjaQm148vOkaPipLM6yjN0W6hPmeh4dHL2QDMwlBWoKz
MvtfeZkrhrkVj+RzawsPFF4moQgEZKI0/OKpSkgZMFAdY0YvbHNCo30tC+4p
1bDDC72joAGlCKmFcj+2cEqph6/jVjEZI7Vb9GRtLWVq27ToCo1TpT84rYfW
JQHvkC15BkYRrMqYAj2B8BgmEQO/5fl+64xVYL7Q42GCGbqob3H0b9sKzfWq
UkX07Tq1eYVURO7YRMVi5FiNHYD1n6jb2Mq+/jzhwAngUMMpALnFkKf4S9WE
xgr1xGRTcPUGO31RW3CQiEbYZh+/x5e1Bf35yvH18/8VdGedL1+rPNvZ16xC
xMJAeaLPaQ8pBEzO6Q3PYV1tfCbVBspToZKH1nt0LXV4bFe2NHPO1dgSQSyg
KcaE5m7BCMhI7E5pHkoaLrQluEzjVV/1OIa7MiIYERz0qTJThX6imHWCFpRk
AuCRKwtPLEUVICkCjTgIv3S5szCW2IYrAgJBPzZRxiCrmriYEmNnWBfRdRx0
mZaJ/CZnLA01YlsIP1F4SUh3nXMe5XlqNEBuhnt7FH1Q/g03b6ity3AIABXI
Ce3opy4KvfrZRoMtErDBbpquGNN+JbJyWE39lzhUeluNiq0uNUhSk+2omn0B
W7GeD4II0ZFKpoRMc2G0Rc2A4BBBMmfLINbWagJBOea286wmACjmFdLBqKZP
SvQE97sGvN8VQrdFJJtgDN2CRusY2Bt/QlCYmEkWn6Rz4CdyoJflj7NrEIIt
YW6b+28wQvW1NopJkEsdXkk/iOIQhVEsj+DsFFmRmVJ9MCVm2t0ABmggs4i7
fj8Dk9lNsSKQGM7x7ytK3M1/Dl/0Xu539nsvO/v7nd6zRlTnl++rZK3iN0oY
i8WRwQSxOj0KpCKmZ4CCWChck+3x0ZpsoAZil08+EGiQDNbZBsHAkbl/CPN/
rQUNKPsnr6f0FHLw/av+i+d9Y/q9l/2Xpt8dNZsXWZuvWnG/uuxLfXoEFtvl
DTG94R9LfoO3NUVLJQMhOQlyDl+TVEhoh4ZjNpALt3GBOUxPIyVyVr9SmO8m
8fg4v0oaNQb61JlJ+EwIG+6ErYFU4hmh7X9CbIpKLrJh1W5NY/Yeq1ReTgSi
SpCAaMpPmXm/RaEANFyHCtXbPwiF3MnkNtl233881vaUS5aGV2k7xD5baJSV
DVzdlqlXXjvISlSO+GsZUEff8D6n7zr0TYLl+QRAm3qmyajQxepTgVYIRpFB
iFfYWIrTKN9LaVE3HBY1YIPXL19F3eevDw5eHRzs768j+PVFiIIZblkPZkpT
wAaS0YRwrNgjpg+skaY/HhCsyrOkruFihcgGcOaZzBGtWGmymHLnAJGQlQh6
/SCPyH6WChCtLVGwsZZBfBfaE/q5aVHwsd8Toi8+1k+hecV+GwKDQ+NaAQ6H
hdZxqCbcZZuSyJpL8HTIGFH48XsUKCu5hjmaMb9DLGZJq0P4XGmiC/ho9JH2
W6IjCJtK0h0BY4hALXuIcfiB2qY48gitm05ijLgcDZLj9htYYmz1YpFWe+BV
6pvjEzvTpGG82x20tbRRg9kOLGar4rA1slyCv74422mnPbIhMp+pGPbBH01N
BgHw2E1EpGeZxmpuNEeLdXFFDiS0bQpIYrJMcaMPieMgkCKmYNbQjLI2CHGN
m0u1mV6VqKAnqJ7jJwmuyzQ6jvIxLSRQfuXFkypi6DFKJYQQ7IFdgkfcm98V
EW/kLILL6gqLHSJw30Mx3fgaPpQFQT0F/MA1V3lWc71rS97moDhkLq2vmiyz
MRsT9IK0caRj2SnGPeWbJMawwQ37jXXfrdjCe4gbhPLjkFRRUL8hdxHstFLE
LsgVNZyKEuDDMgqubEbMpV2PRaqloESGJK6zAAnP6xC6xpot7I5JKTfmwY8D
l8emyqubfPvxn21hZQXVyCD6kswEwOC80OWavpFhtLK5Q3UmTWI8CgXBm0+y
WbR1B25hzH9xHOIe58HOlhih9SSNXxuY7k1S5Bltz6a4LjIkSgkslZYdu2Cm
Pm1Bm20weKxXX4F6Hx2hyHQ2oULClr/3+tXzqNeN9l9cdXt9LMl+2e92Qz8g
U9nmCOQD5AmaKxPI8VI5YpW2wtp1gVfNfdg6sHeGVbZYhWrucBd6alxdkq9i
0vXcGiHFbD1Hxy6IarH2yLiZO8C5pUPSmKpy/r+ik0VlO5kXsppNU5SVftgy
SycItILPonKJ3AyDGXH5E1AU3BK/SfKlTVfebvr9aUAOErc1gAcXoe7mRbWB
vOezwYKmYAh29w0j8Asa4MYUo6qvV6bKdG/2dq98rzCAEtGibmfnV6dnHwbv
uJu8oa8GylV9XMSuHnpsRh51oRdmVJB4IwSvQ+YaaE6s/QQDSDMCuhRvu6pc
+Lk0RUfUhKpyq7bYEbXt2fP9g2fPXxLORkDs0LZj0yZpIFf5EkL+kLo6UucF
qnpugDrpygUY+Ob746uqu7A6+PIXTMM6kCcx3h5M0WtB4p9TJK7G2KJJ/JJV
iUNASxVXc7ZyrgHVveJrzA9J7rgy06zqrkqjTa4cS3ZdPmnHeY0dB8oVCKl7
uJE4cOM35g1uZ4YKgEpKbUk5aELeShMERnRlMvaGlHUVZTrNGuv4NEjXnEoW
6+n/W3Ah4EqQYwD9wlIJ2tjbBxQolYK+3oVRJ54LEbdez70glbVqsGmOnL7V
RUyoYKJTu70nzAndPJpgX9e0Xl4WDtgSI8HLlwcbh67SgbghvHbJd8/Ra7MS
E7ApVr7R/RO3hg+Pze9xtsGNtOFFvcDIYa9KLdybbXrhhnQRVBC/OgSCW0Ne
L1AuXD6A01uhuLZDHcDQxzEPmzkFd8CaUbjbegERDPZNOophp7O/2IoCslWY
jQirqzg+4cFoi6qqK0d4g5C1yrfKggTyC9CNYxifPZKdKJJSKnL+hiIWydvu
6Bjd+A5J2E4+SpMpR2g70Pwt1VFzpVcW0zai+njKW3Lw+lR8qw9vIPxZRMsF
IQW0D6xsdZciq4E5g7VC4CDNVisbgWiryLFkH5Yp4D7aG7fFjUXLguoZE2pL
pwJo628duTjtmugkpbqrCIwPxSnAjyTI3dUMHe3W067k7kLgdFtNC72YATdj
/EGIA88v4Fdv0WyEW4xegOcaTxr4hap93RGuLRctr5xFqNkQNnUJ0U7bARfc
rSX/ujBBYHxYDE2lskEfdUIijIll/BmRRHNyOXidrO8G0hRnvHHJ1X9kSGy1
Ky5J4K+vb8WutY/ypzaTcoayYWk+dquJn2JMBZAupaf19CTNbKs/xbdiNSq2
nLlyQumd+6LCeoPKQemwxJ17rcUf67yrl0dy1V2/KQ0+cNsuWzPq/L3gUIWU
ipPRrdHFNo1BJvb5pGNwgw2IkV/7HEPgeySr42taEOxx5a3kSyZU0oqFhXhm
iFZ5sYSQ07pAzwEFSyJeVo7vVjuPF+bvXTnwpBLGBknB+K4mxVRr76aJRH55
lqw3TRP8hxP+2Ex5IJUbKsMgt7sj0Lha9wqkslZd1Eyjy3gddl++OH61f7IT
wGvP1HCI6Fn3AIcBx7CcTNBG0nGS5AZGwxOfZPwBXqsVxmCBiOQ+WjDWDXIu
/ZIcfRgMyOPhMOf/+z/ZFPfYTcaeecxHYAG5BaPGMOoauPalLaFWNxTTrTHU
17T4BDojg/VdBR9lfT5sWkM5zVFDuGbbVu0R6yYrt2XtfqXV+7usn4R19b0O
4n+E/I++kE+pL1Ytu+LP6LT4REN9Q85lTAA/1I+/BBaRCu0FxLiwh4ppEo3n
0I7wNFOARP05oOqY0a7pTDt0iGhvPZFbP8bnfkmMBr59AtyVqiiXF1ynhSl4
8kRm8Ia/ysLMjzZhvsjSlizLRZBlcYxxgIo4PJQ8bMS7jEDqMEiXP0UtGKJj
xBgkXm1xj353p/l4jhCxXn9yf789afTY4hL8cH3Z/Y7RFmrE6mL6onV+BsLx
lKnBoxUBQMdBn+J577c59FGLeNGZr1BmIHKgI/G1QwJ99YZOR6l/na9yhLF0
SOrfW3+I5KvR6VFfjSbmtRntv4706NXL6NlYH0Qj8+og0r34efzqoPv8Ze9F
67Epm22Vt1/Ir5R5nK8lV+jnV+ZWfq00irP0WyWiyepnX1IKH11uNOCOPrrk
VKGL5sUCYZiZfVGnmt4LanN4slK8miNC1K3LpR2C/sQ0o+F+tztkE/GP0Uum
5+sUU3JQqJknX7/zun2FeLxQDZ2uqbPftQ6D6ffV+tR/vkJtT1l8TgSdRDxO
BrmXE8LjogCg7Z7aNfNm6G11KAsjL9nu4ZxZda5ty/FIRrL1cfjAUpjmc/Sy
6LHkAaC9NByS9Z5TYMdXcOC+yxqOpuE3bDM9ZZprX6PIpvqQrR8Fg6X/CTw8
EPCTOqLDfnSYTsFP8X8o2SII6qfWTxH9J/+4/9Z+8jMY+Fm3iyO90bFXWPg5
yIRDblNFQjXu0cMmHzOXfwBCv9TjAHuc5MUoiSGeQMP3+R7PmSqusASIwQ0/
1wdFs8QzrRE1iJifEfNTBJLZxQIW8htF70OOl2lwi2CdCgMwJaslG1DQ3PLR
BiqNBzZE0m58DpGPjYdbeXSCyLoMCdUt0xYUZlQy6lRVe+XLEqTal2XUZDj2
mWlJEwGl6a1e2YpYZzjRTtZEmKujvNgv9CrNNeVXczXX18ZtdWO1L9Yifouj
wIIPG9ShknZfCEN3RhSSSloBDq5uL6AbHfZUnPBxEH/QLkiqGTd7ZHIkm29y
lgrYn2OeiJPz/uzetgPZ0NUf2k4yLo9zVTt0Hhtm5r4UzCMPZ+Fn1Zxnq7LY
dLlDFjvS1pwXrcEG92Dt0xxRN7eShSD/dV+zvpRHVw9DyV87HXV1TZKLxNOz
/tiqTAP3SxBBz/RNJYRhIhALDagMEZZBnpOQz+W+Behf2zBNvNOnnQJcH6pC
0T6TuPkV8L0Tl8Vsb2mjLt8O3r2rpfZ48Sq0+pbWVQ1DfzZsykmwAAic0GBv
SixP87WPdXvc7JDDg99+xMfC4Ga4Oz/59Lrz5vkketbp/fCX9z/HPa9vqG0v
vm2IYnQgP8JT53abBWttd2FACsNCEIuJQ2y3cQDYo9G1I71rK+iWi6LO6vRX
g4j4AhCHGa+aRamKd6tQsw5i3YJuCNPpxO9IVEN8nhiJ15wlqU2DnDrW5G2f
BWuqXIbCdS2PLNhbm5rk9hql9u+LGjdTUZLMqOR0m3zW7WWzgKrTwYcBYhyL
V7hIsd39E3z60JzmwDvkpIKNLvXhPSwsM6uZQNrUoMoudyFNYaaS4JXUM32b
LhHwFc8bhLg3D1IzFF6igyBmSt3Q+0LXCVNAZWOyk2v4Uh66s6g0tEPUdtIY
oWiBDmWmVow6z7E8CG9mI7nA22jorKUxXH+KGV+kSjZTl7rQQAgGEiqqaMIf
GyQNLDuyZSrCHXzdFdP4zTu+F6eS/+C7lRUnYmE1/7JEN49FdJavZuThZ3ki
tR/V/TKUQbp6d0l+hm64uzi+vNrjxI9cj7RGORFzSXt6ZJPCzboqX5WuKo29
fHv28d3RGggRCEA3Ncm1V7JZbvHkKsBRQlv17UC3uQmyq+W2HnfBA7cuTP2+
m8abeKjLKjxqx+v1fklFYsAO/EX3x0Rcsra2KYn3Z4L9vTYrtiXCWrp/qSxM
NgV5xrvCEio78Bd2VPWeTJ1c5+MGllWk9ea7nwIsrG9yUO7q/JceX1u16wrX
jvJLoMkaw8EMlV09pdDrxuAecWm5yJQuH5EdSNwbmmOeBmuZsLKI8DUq6Zhu
KNUqxUMhweUONexTsCAsUQ7oplUAyrr0o1fAj5DuJJku3b5Ix5kfxnI19DMy
NTGJFZ5EnFb4t0jstdSB0U2AqNio1K7YAu87Go+1FRnk/fLCalfumy9Fk+gi
werqLdExILivZvktyZnnPjV1SwNzRxzKLiaZzkq3fZlkv/XFv3g1hqUa0Nid
52ZniuPNabjaoLCEeBxzTneueJvkjBBanXVMyKjfyYzfzXc0L9gcW+bV4EYn
qRwlVP8C8W2Glat4kJsL8ViKQ1VdLOh6Dsz2Y7iH45VGduu3SWOZsBV0vtzB
bQvBK89pU5TaPnDAfFEbDCuVQfNxUR6X4oy5mecFLaddzhesxBdoR1I6q8pe
HPlEGgG2gKiUg430jErC3HV0IxiYsvi4L57laT5dtS7dbRtcTvMLbnxBu1Zd
+zIHiwyfdbV2bvzqxFWAcn7jkAvX6bkvufvHPnO5jHxlIGcL+Bu+lol6u9Ma
uH+MRZvAx4aybDoEvWVS8AFfw8pf+FyxbVCi668dqzBYVcfTX48wakVVXrRx
hkGCoC9lUzT2DhnMnbariOKHWNO1w2XM+JXGCwFdiaNcIkgnD+gEOdsbf59i
c3YAZO5GCssyOZ5KdnYCmu/zS+zY7JZEGZB3HJK3cRnhFyj0Rjk4LVCIaLqr
9yRFYKvofOPusbXi7GCCIwwr4E04aocLjP3NmHyt1v2T9UcONqKwYeoFtcoC
uqbrQB2h8s6q2wJrVMDBr1r39/fn5vpaq0swNal+eHhoK3h2nN6uMrqv2Vh4
hpPDpm9NhhcPvzM31/mtKX984HNw4BblDrC3ADbBfrRwN+CPf8Sj+HTnEt7N
HEwMlguPd9Ug7p/+RJ2iblfRH98qgHUJVf7LxVl4rlZ9QBtB1xTIXw+gKYsV
O4jd8R5dkUYLKfeJn6AncnWGjc/V7tnp0cke1gll7HMRWx9WlzW38dAsuPsF
5mKq7TtOzPCVZ8HJEqzkWEmgY+4A9VhAhm0wbyudwotJYeAXSHAa32L5/thT
jzs5EkZhURP5lTZmG2BE08LKrhsOmlD8eU2BMkT3pPxtd0aLb10lt7iS0x6n
FdGAYQh1AOkntAyXtWWweYoJFHffoS8JAXuxm+w5RtCdpGE/2eLcTaCN5xDu
Ym5+mUuRGr4daAY5En+NXLvKpHCxmNg7BvBsryRLhCvpTEBQg42YHSS/AGni
IhguzyFQFwzmwqxWLSGaxXlh2U6IVcSviDThjcTs1xru76xLOJafEK2aUQIC
DNQIfy14ZVNu8AZYAItyt2t4ABYc9Ah5KdPalGbkLgklXUOHN39OZ0HTVtCU
Cpz0NVgCLAok0Z+ZdAFTtrib7VOGwSQRc1Xk02kp66mnS6JwQOSiohuvOcc4
1UXsIBShEDliVBVAgcahDqUphosInimjyq1oNi1SEkGnc1KYEV4vopM5oyFs
TqWzLAnrF5hiCtULwyNWTRQBTCmdCHO3lCLBTmEJmrM0CZFMH8Ip/KOFscgo
WPffgBPjkIUkLglP1fDWC4MHlhZiTWwWGAnisZvJBCNKTNu7LCedNqw+32m2
fz64De+h9/c91mdN2fMsb+1iH/SrIPnmDmmk0xiJJcbjh/dArgu0nBiL7Eob
NpMJnjZz63ebWLMXCrK0CLvD6sxNgUFc6e/jQDOaZBNMeMoVLpOkzNC5UgVb
WDgnxgq/yf/vEG1V24hoKDAXjrjjZBD0SFlnaMSaGIR6gNXp1V5K4BhqC3Aa
ivW5E+sLFhTZWpBsjW2tLw3f7IuzLLnQJ4d4x/D/x0GOFMBgaiySL41oaYC8
KWYpS3FQtYFp30ReB2RvFRwIHRK6A0W0tObpMDmDq9NCrpWMeDORt1Xl3tCK
E33+j9pZ08CXouoXiSkx011TeirxJhhYqa9/MwruQKTTcVjFMDZNWYnW/wNC
k+sstWQAAA==

-->

</rfc>

